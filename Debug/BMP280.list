
BMP280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003338  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080034c0  080034c0  000134c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800351c  0800351c  0001351c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003524  08003524  00013524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003528  08003528  00013528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  0800352c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001e4  20000004  08003530  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001e8  08003530  000201e8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018791  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002ec4  00000000  00000000  000387c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c632  00000000  00000000  0003b689  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ef8  00000000  00000000  00047cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000011d8  00000000  00000000  00048bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008287  00000000  00000000  00049d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005c31  00000000  00000000  00052017  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00057c48  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002cd8  00000000  00000000  00057cc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080034a8 	.word	0x080034a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080034a8 	.word	0x080034a8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004da:	2003      	movs	r0, #3
 80004dc:	f000 f828 	bl	8000530 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004e0:	2000      	movs	r0, #0
 80004e2:	f002 feff 	bl	80032e4 <HAL_InitTick>
 80004e6:	4604      	mov	r4, r0
 80004e8:	b918      	cbnz	r0, 80004f2 <HAL_Init+0x1a>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004ea:	f002 fe1d 	bl	8003128 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 80004ee:	4620      	mov	r0, r4
 80004f0:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80004f2:	2401      	movs	r4, #1
 80004f4:	e7fb      	b.n	80004ee <HAL_Init+0x16>
	...

080004f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80004f8:	4a02      	ldr	r2, [pc, #8]	; (8000504 <HAL_IncTick+0xc>)
 80004fa:	6813      	ldr	r3, [r2, #0]
 80004fc:	3301      	adds	r3, #1
 80004fe:	6013      	str	r3, [r2, #0]
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20000020 	.word	0x20000020

08000508 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000508:	4b01      	ldr	r3, [pc, #4]	; (8000510 <HAL_GetTick+0x8>)
 800050a:	6818      	ldr	r0, [r3, #0]
}
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000020 	.word	0x20000020

08000514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000514:	b538      	push	{r3, r4, r5, lr}
 8000516:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000518:	f7ff fff6 	bl	8000508 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800051c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800051e:	4605      	mov	r5, r0
  {
    wait++;
 8000520:	bf18      	it	ne
 8000522:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000524:	f7ff fff0 	bl	8000508 <HAL_GetTick>
 8000528:	1b40      	subs	r0, r0, r5
 800052a:	4284      	cmp	r4, r0
 800052c:	d8fa      	bhi.n	8000524 <HAL_Delay+0x10>
  {
  }
}
 800052e:	bd38      	pop	{r3, r4, r5, pc}

08000530 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000530:	4a07      	ldr	r2, [pc, #28]	; (8000550 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000532:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000534:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000538:	041b      	lsls	r3, r3, #16
 800053a:	0c1b      	lsrs	r3, r3, #16
 800053c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000540:	0200      	lsls	r0, r0, #8
 8000542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000546:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800054a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800054c:	60d3      	str	r3, [r2, #12]
 800054e:	4770      	bx	lr
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000554:	4b17      	ldr	r3, [pc, #92]	; (80005b4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	68dc      	ldr	r4, [r3, #12]
 800055a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800055e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000562:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000564:	2b04      	cmp	r3, #4
 8000566:	bf28      	it	cs
 8000568:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800056a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800056c:	f04f 0501 	mov.w	r5, #1
 8000570:	fa05 f303 	lsl.w	r3, r5, r3
 8000574:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000578:	bf8c      	ite	hi
 800057a:	3c03      	subhi	r4, #3
 800057c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800057e:	4019      	ands	r1, r3
 8000580:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000582:	fa05 f404 	lsl.w	r4, r5, r4
 8000586:	3c01      	subs	r4, #1
 8000588:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800058a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800058c:	ea42 0201 	orr.w	r2, r2, r1
 8000590:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000594:	bfaf      	iteee	ge
 8000596:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059a:	f000 000f 	andlt.w	r0, r0, #15
 800059e:	4b06      	ldrlt	r3, [pc, #24]	; (80005b8 <HAL_NVIC_SetPriority+0x64>)
 80005a0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a2:	bfa5      	ittet	ge
 80005a4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005a8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005aa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ac:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop
 80005b4:	e000ed00 	.word	0xe000ed00
 80005b8:	e000ed14 	.word	0xe000ed14

080005bc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005bc:	0942      	lsrs	r2, r0, #5
 80005be:	2301      	movs	r3, #1
 80005c0:	f000 001f 	and.w	r0, r0, #31
 80005c4:	fa03 f000 	lsl.w	r0, r3, r0
 80005c8:	4b01      	ldr	r3, [pc, #4]	; (80005d0 <HAL_NVIC_EnableIRQ+0x14>)
 80005ca:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005ce:	4770      	bx	lr
 80005d0:	e000e100 	.word	0xe000e100

080005d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80005d4:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80005d6:	2800      	cmp	r0, #0
 80005d8:	d04e      	beq.n	8000678 <HAL_DMA_Init+0xa4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80005da:	6801      	ldr	r1, [r0, #0]
 80005dc:	4b27      	ldr	r3, [pc, #156]	; (800067c <HAL_DMA_Init+0xa8>)
 80005de:	4299      	cmp	r1, r3
 80005e0:	f04f 0414 	mov.w	r4, #20
 80005e4:	d840      	bhi.n	8000668 <HAL_DMA_Init+0x94>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80005e6:	4a26      	ldr	r2, [pc, #152]	; (8000680 <HAL_DMA_Init+0xac>)
 80005e8:	440a      	add	r2, r1
 80005ea:	fbb2 f2f4 	udiv	r2, r2, r4
 80005ee:	0092      	lsls	r2, r2, #2
 80005f0:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80005f2:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 80005f6:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80005f8:	2302      	movs	r3, #2
 80005fa:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80005fe:	6884      	ldr	r4, [r0, #8]
 8000600:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000602:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8000604:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8000606:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000608:	432b      	orrs	r3, r5
 800060a:	6945      	ldr	r5, [r0, #20]
 800060c:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800060e:	6985      	ldr	r5, [r0, #24]
 8000610:	432b      	orrs	r3, r5
 8000612:	69c5      	ldr	r5, [r0, #28]
 8000614:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8000616:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000618:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800061c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8000620:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8000622:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000624:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8000628:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800062a:	d014      	beq.n	8000656 <HAL_DMA_Init+0x82>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800062c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <HAL_DMA_Init+0xb0>)
 8000630:	429a      	cmp	r2, r3
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000632:	bf0c      	ite	eq
 8000634:	4914      	ldreq	r1, [pc, #80]	; (8000688 <HAL_DMA_Init+0xb4>)
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000636:	4915      	ldrne	r1, [pc, #84]	; (800068c <HAL_DMA_Init+0xb8>)
 8000638:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800063a:	680a      	ldr	r2, [r1, #0]
 800063c:	f003 031c 	and.w	r3, r3, #28
 8000640:	240f      	movs	r4, #15
 8000642:	409c      	lsls	r4, r3
 8000644:	ea22 0204 	bic.w	r2, r2, r4
 8000648:	600a      	str	r2, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800064a:	6842      	ldr	r2, [r0, #4]
 800064c:	680c      	ldr	r4, [r1, #0]
 800064e:	fa02 f303 	lsl.w	r3, r2, r3
 8000652:	4323      	orrs	r3, r4
 8000654:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000656:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000658:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800065a:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800065c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8000660:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 8000664:	4618      	mov	r0, r3
 8000666:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <HAL_DMA_Init+0xbc>)
 800066a:	440b      	add	r3, r1
 800066c:	fbb3 f3f4 	udiv	r3, r3, r4
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <HAL_DMA_Init+0xc0>)
 8000676:	e7be      	b.n	80005f6 <HAL_DMA_Init+0x22>
    return HAL_ERROR;
 8000678:	2001      	movs	r0, #1
}
 800067a:	bd30      	pop	{r4, r5, pc}
 800067c:	40020407 	.word	0x40020407
 8000680:	bffdfff8 	.word	0xbffdfff8
 8000684:	40020000 	.word	0x40020000
 8000688:	400200a8 	.word	0x400200a8
 800068c:	400204a8 	.word	0x400204a8
 8000690:	bffdfbf8 	.word	0xbffdfbf8
 8000694:	40020400 	.word	0x40020400

08000698 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000698:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800069c:	2a02      	cmp	r2, #2
{
 800069e:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80006a0:	d003      	beq.n	80006aa <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80006a2:	2204      	movs	r2, #4
 80006a4:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 80006a6:	2001      	movs	r0, #1
 80006a8:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80006aa:	6802      	ldr	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80006ac:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80006ae:	6811      	ldr	r1, [r2, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80006b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80006b2:	f021 010e 	bic.w	r1, r1, #14
 80006b6:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80006b8:	6811      	ldr	r1, [r2, #0]
 80006ba:	f021 0101 	bic.w	r1, r1, #1
 80006be:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80006c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80006c2:	2101      	movs	r1, #1
 80006c4:	f002 021c 	and.w	r2, r2, #28
 80006c8:	fa01 f202 	lsl.w	r2, r1, r2
 80006cc:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 80006ce:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80006d0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80006d4:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80006d8:	b113      	cbz	r3, 80006e0 <HAL_DMA_Abort_IT+0x48>
    {
      hdma->XferAbortCallback(hdma);
 80006da:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80006dc:	4620      	mov	r0, r4
 80006de:	bd10      	pop	{r4, pc}
 80006e0:	4618      	mov	r0, r3
    }
  }
  return status;
}
 80006e2:	bd10      	pop	{r4, pc}

080006e4 <HAL_DMA_IRQHandler>:
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80006e4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80006e6:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 80006e8:	6803      	ldr	r3, [r0, #0]
{
 80006ea:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80006ec:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80006f0:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80006f2:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80006f4:	2404      	movs	r4, #4
 80006f6:	4094      	lsls	r4, r2
 80006f8:	4226      	tst	r6, r4
 80006fa:	d00e      	beq.n	800071a <HAL_DMA_IRQHandler+0x36>
 80006fc:	f015 0f04 	tst.w	r5, #4
 8000700:	d00b      	beq.n	800071a <HAL_DMA_IRQHandler+0x36>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	0692      	lsls	r2, r2, #26
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000706:	bf5e      	ittt	pl
 8000708:	681a      	ldrpl	r2, [r3, #0]
 800070a:	f022 0204 	bicpl.w	r2, r2, #4
 800070e:	601a      	strpl	r2, [r3, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8000710:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000712:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 8000714:	b373      	cbz	r3, 8000774 <HAL_DMA_IRQHandler+0x90>
  else
  {
    /* Nothing To Do */
  }
  return;
}
 8000716:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000718:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800071a:	2402      	movs	r4, #2
 800071c:	4094      	lsls	r4, r2
 800071e:	4226      	tst	r6, r4
 8000720:	d012      	beq.n	8000748 <HAL_DMA_IRQHandler+0x64>
 8000722:	f015 0f02 	tst.w	r5, #2
 8000726:	d00f      	beq.n	8000748 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	0695      	lsls	r5, r2, #26
 800072c:	d406      	bmi.n	800073c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	f022 020a 	bic.w	r2, r2, #10
 8000734:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000736:	2301      	movs	r3, #1
 8000738:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800073c:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800073e:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8000740:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8000744:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000746:	e7e5      	b.n	8000714 <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000748:	2408      	movs	r4, #8
 800074a:	4094      	lsls	r4, r2
 800074c:	4234      	tst	r4, r6
 800074e:	d011      	beq.n	8000774 <HAL_DMA_IRQHandler+0x90>
 8000750:	072c      	lsls	r4, r5, #28
 8000752:	d50f      	bpl.n	8000774 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000754:	681c      	ldr	r4, [r3, #0]
 8000756:	f024 040e 	bic.w	r4, r4, #14
 800075a:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800075c:	2301      	movs	r3, #1
 800075e:	fa03 f202 	lsl.w	r2, r3, r2
 8000762:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000764:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8000766:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800076a:	2300      	movs	r3, #0
 800076c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8000770:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000772:	e7cf      	b.n	8000714 <HAL_DMA_IRQHandler+0x30>
}
 8000774:	bc70      	pop	{r4, r5, r6}
 8000776:	4770      	bx	lr

08000778 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800077c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800077e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000780:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800092c <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000784:	4c67      	ldr	r4, [pc, #412]	; (8000924 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000786:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8000788:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800078a:	9a01      	ldr	r2, [sp, #4]
 800078c:	40da      	lsrs	r2, r3
 800078e:	d102      	bne.n	8000796 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8000790:	b005      	add	sp, #20
 8000792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000796:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8000798:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800079a:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 800079c:	ea12 0e06 	ands.w	lr, r2, r6
 80007a0:	f000 80b1 	beq.w	8000906 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007a4:	684a      	ldr	r2, [r1, #4]
 80007a6:	f022 0710 	bic.w	r7, r2, #16
 80007aa:	2f02      	cmp	r7, #2
 80007ac:	d116      	bne.n	80007dc <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 80007ae:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80007b2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007b6:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80007ba:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007be:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80007c2:	f04f 0c0f 	mov.w	ip, #15
 80007c6:	fa0c fc0a 	lsl.w	ip, ip, sl
 80007ca:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80007ce:	690d      	ldr	r5, [r1, #16]
 80007d0:	fa05 f50a 	lsl.w	r5, r5, sl
 80007d4:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 80007d8:	f8c9 5020 	str.w	r5, [r9, #32]
 80007dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80007e0:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80007e2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80007e6:	fa05 f50c 	lsl.w	r5, r5, ip
 80007ea:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80007ec:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80007f0:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80007f4:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007f8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80007fa:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007fe:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000800:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000804:	d811      	bhi.n	800082a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000806:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000808:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800080c:	68cf      	ldr	r7, [r1, #12]
 800080e:	fa07 f70c 	lsl.w	r7, r7, ip
 8000812:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8000816:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000818:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800081a:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800081e:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8000822:	409f      	lsls	r7, r3
 8000824:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8000828:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800082a:	f1ba 0f03 	cmp.w	sl, #3
 800082e:	d107      	bne.n	8000840 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8000830:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000832:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000836:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 800083a:	409f      	lsls	r7, r3
 800083c:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 800083e:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8000840:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000842:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000844:	688e      	ldr	r6, [r1, #8]
 8000846:	fa06 f60c 	lsl.w	r6, r6, ip
 800084a:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 800084c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800084e:	00d5      	lsls	r5, r2, #3
 8000850:	d559      	bpl.n	8000906 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000856:	f045 0501 	orr.w	r5, r5, #1
 800085a:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 800085e:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000862:	f023 0603 	bic.w	r6, r3, #3
 8000866:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800086a:	f005 0501 	and.w	r5, r5, #1
 800086e:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000872:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000874:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000878:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 800087a:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800087c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000880:	270f      	movs	r7, #15
 8000882:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000886:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800088a:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800088e:	d03c      	beq.n	800090a <HAL_GPIO_Init+0x192>
 8000890:	4d25      	ldr	r5, [pc, #148]	; (8000928 <HAL_GPIO_Init+0x1b0>)
 8000892:	42a8      	cmp	r0, r5
 8000894:	d03b      	beq.n	800090e <HAL_GPIO_Init+0x196>
 8000896:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800089a:	42a8      	cmp	r0, r5
 800089c:	d039      	beq.n	8000912 <HAL_GPIO_Init+0x19a>
 800089e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008a2:	42a8      	cmp	r0, r5
 80008a4:	d037      	beq.n	8000916 <HAL_GPIO_Init+0x19e>
 80008a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008aa:	42a8      	cmp	r0, r5
 80008ac:	d035      	beq.n	800091a <HAL_GPIO_Init+0x1a2>
 80008ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008b2:	42a8      	cmp	r0, r5
 80008b4:	d033      	beq.n	800091e <HAL_GPIO_Init+0x1a6>
 80008b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008ba:	42a8      	cmp	r0, r5
 80008bc:	bf14      	ite	ne
 80008be:	2507      	movne	r5, #7
 80008c0:	2506      	moveq	r5, #6
 80008c2:	fa05 f50c 	lsl.w	r5, r5, ip
 80008c6:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80008c8:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 80008ca:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80008cc:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008d0:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 80008d2:	bf54      	ite	pl
 80008d4:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80008d6:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 80008da:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 80008dc:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008de:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 80008e0:	bf54      	ite	pl
 80008e2:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80008e4:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 80008e8:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 80008ea:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008ec:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 80008ee:	bf54      	ite	pl
 80008f0:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80008f2:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 80008f6:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80008f8:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008fa:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 80008fc:	bf54      	ite	pl
 80008fe:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000900:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8000904:	60e5      	str	r5, [r4, #12]
    position++;
 8000906:	3301      	adds	r3, #1
 8000908:	e73f      	b.n	800078a <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800090a:	2500      	movs	r5, #0
 800090c:	e7d9      	b.n	80008c2 <HAL_GPIO_Init+0x14a>
 800090e:	2501      	movs	r5, #1
 8000910:	e7d7      	b.n	80008c2 <HAL_GPIO_Init+0x14a>
 8000912:	2502      	movs	r5, #2
 8000914:	e7d5      	b.n	80008c2 <HAL_GPIO_Init+0x14a>
 8000916:	2503      	movs	r5, #3
 8000918:	e7d3      	b.n	80008c2 <HAL_GPIO_Init+0x14a>
 800091a:	2504      	movs	r5, #4
 800091c:	e7d1      	b.n	80008c2 <HAL_GPIO_Init+0x14a>
 800091e:	2505      	movs	r5, #5
 8000920:	e7cf      	b.n	80008c2 <HAL_GPIO_Init+0x14a>
 8000922:	bf00      	nop
 8000924:	40010400 	.word	0x40010400
 8000928:	48000400 	.word	0x48000400
 800092c:	40021000 	.word	0x40021000

08000930 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000930:	b10a      	cbz	r2, 8000936 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000932:	6181      	str	r1, [r0, #24]
 8000934:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000936:	6281      	str	r1, [r0, #40]	; 0x28
 8000938:	4770      	bx	lr

0800093a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800093a:	4770      	bx	lr

0800093c <HAL_GPIO_EXTI_IRQHandler>:
{
 800093c:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800093e:	4b04      	ldr	r3, [pc, #16]	; (8000950 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000940:	6959      	ldr	r1, [r3, #20]
 8000942:	4201      	tst	r1, r0
 8000944:	d002      	beq.n	800094c <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000946:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000948:	f7ff fff7 	bl	800093a <HAL_GPIO_EXTI_Callback>
 800094c:	bd08      	pop	{r3, pc}
 800094e:	bf00      	nop
 8000950:	40010400 	.word	0x40010400

08000954 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000954:	6803      	ldr	r3, [r0, #0]
 8000956:	699a      	ldr	r2, [r3, #24]
 8000958:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 800095a:	bf44      	itt	mi
 800095c:	2200      	movmi	r2, #0
 800095e:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000960:	699a      	ldr	r2, [r3, #24]
 8000962:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000964:	bf5e      	ittt	pl
 8000966:	699a      	ldrpl	r2, [r3, #24]
 8000968:	f042 0201 	orrpl.w	r2, r2, #1
 800096c:	619a      	strpl	r2, [r3, #24]
 800096e:	4770      	bx	lr

08000970 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000970:	b530      	push	{r4, r5, lr}
 8000972:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000974:	6805      	ldr	r5, [r0, #0]
 8000976:	4323      	orrs	r3, r4
 8000978:	0d64      	lsrs	r4, r4, #21
 800097a:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800097e:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8000982:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8000986:	6868      	ldr	r0, [r5, #4]
 8000988:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800098c:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8000990:	4319      	orrs	r1, r3
 8000992:	f044 0403 	orr.w	r4, r4, #3
 8000996:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800099a:	ea20 0404 	bic.w	r4, r0, r4
 800099e:	4321      	orrs	r1, r4
 80009a0:	6069      	str	r1, [r5, #4]
 80009a2:	bd30      	pop	{r4, r5, pc}

080009a4 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80009a4:	f011 0301 	ands.w	r3, r1, #1
 80009a8:	d007      	beq.n	80009ba <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80009aa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80009ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80009b2:	2b28      	cmp	r3, #40	; 0x28
 80009b4:	bf0c      	ite	eq
 80009b6:	2342      	moveq	r3, #66	; 0x42
 80009b8:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80009ba:	078a      	lsls	r2, r1, #30
 80009bc:	d509      	bpl.n	80009d2 <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80009be:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80009c2:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80009c6:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80009c8:	bf0c      	ite	eq
 80009ca:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80009ce:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80009d2:	074a      	lsls	r2, r1, #29
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80009d4:	f001 0211 	and.w	r2, r1, #17
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80009d8:	bf48      	it	mi
 80009da:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80009de:	f001 0112 	and.w	r1, r1, #18
  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80009e2:	2a11      	cmp	r2, #17
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80009e4:	bf08      	it	eq
 80009e6:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80009ea:	2912      	cmp	r1, #18
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80009ec:	6801      	ldr	r1, [r0, #0]
 80009ee:	680a      	ldr	r2, [r1, #0]
    tmpisr |= I2C_IT_TCI;
 80009f0:	bf08      	it	eq
 80009f2:	f043 0360 	orreq.w	r3, r3, #96	; 0x60
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80009f6:	ea22 0303 	bic.w	r3, r2, r3
 80009fa:	600b      	str	r3, [r1, #0]
 80009fc:	4770      	bx	lr

080009fe <I2C_WaitOnFlagUntilTimeout>:
{
 80009fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a02:	9f06      	ldr	r7, [sp, #24]
 8000a04:	4604      	mov	r4, r0
 8000a06:	4688      	mov	r8, r1
 8000a08:	4616      	mov	r6, r2
 8000a0a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000a0c:	6822      	ldr	r2, [r4, #0]
 8000a0e:	6993      	ldr	r3, [r2, #24]
 8000a10:	ea38 0303 	bics.w	r3, r8, r3
 8000a14:	bf0c      	ite	eq
 8000a16:	2301      	moveq	r3, #1
 8000a18:	2300      	movne	r3, #0
 8000a1a:	42b3      	cmp	r3, r6
 8000a1c:	d002      	beq.n	8000a24 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8000a1e:	2000      	movs	r0, #0
}
 8000a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000a24:	1c6b      	adds	r3, r5, #1
 8000a26:	d0f2      	beq.n	8000a0e <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a28:	f7ff fd6e 	bl	8000508 <HAL_GetTick>
 8000a2c:	1bc0      	subs	r0, r0, r7
 8000a2e:	4285      	cmp	r5, r0
 8000a30:	d301      	bcc.n	8000a36 <I2C_WaitOnFlagUntilTimeout+0x38>
 8000a32:	2d00      	cmp	r5, #0
 8000a34:	d1ea      	bne.n	8000a0c <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000a36:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a38:	f043 0320 	orr.w	r3, r3, #32
 8000a3c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000a3e:	2320      	movs	r3, #32
 8000a40:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000a4a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000a4e:	2001      	movs	r0, #1
 8000a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000a54 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000a54:	6803      	ldr	r3, [r0, #0]
{
 8000a56:	b570      	push	{r4, r5, r6, lr}
 8000a58:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000a5a:	6998      	ldr	r0, [r3, #24]
 8000a5c:	f010 0010 	ands.w	r0, r0, #16
{
 8000a60:	460d      	mov	r5, r1
 8000a62:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000a64:	d116      	bne.n	8000a94 <I2C_IsAcknowledgeFailed+0x40>
 8000a66:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000a68:	1c69      	adds	r1, r5, #1
 8000a6a:	d014      	beq.n	8000a96 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a6c:	f7ff fd4c 	bl	8000508 <HAL_GetTick>
 8000a70:	1b80      	subs	r0, r0, r6
 8000a72:	4285      	cmp	r5, r0
 8000a74:	d300      	bcc.n	8000a78 <I2C_IsAcknowledgeFailed+0x24>
 8000a76:	b96d      	cbnz	r5, 8000a94 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000a78:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a7a:	f043 0320 	orr.w	r3, r3, #32
 8000a7e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000a80:	2320      	movs	r3, #32
 8000a82:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8000a8c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8000a90:	2001      	movs	r0, #1
}
 8000a92:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000a94:	6823      	ldr	r3, [r4, #0]
 8000a96:	6999      	ldr	r1, [r3, #24]
 8000a98:	068a      	lsls	r2, r1, #26
 8000a9a:	d5e5      	bpl.n	8000a68 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000a9c:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000a9e:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000aa0:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000aa2:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000aa4:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000aa6:	f7ff ff55 	bl	8000954 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000aaa:	6822      	ldr	r2, [r4, #0]
 8000aac:	6853      	ldr	r3, [r2, #4]
 8000aae:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000ab2:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000ab6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000aba:	f023 0301 	bic.w	r3, r3, #1
 8000abe:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000ac0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000ac8:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8000acc:	e7db      	b.n	8000a86 <I2C_IsAcknowledgeFailed+0x32>

08000ace <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000ace:	b570      	push	{r4, r5, r6, lr}
 8000ad0:	4604      	mov	r4, r0
 8000ad2:	460d      	mov	r5, r1
 8000ad4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000ad6:	6823      	ldr	r3, [r4, #0]
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	079b      	lsls	r3, r3, #30
 8000adc:	d501      	bpl.n	8000ae2 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8000ade:	2000      	movs	r0, #0
 8000ae0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ae2:	4632      	mov	r2, r6
 8000ae4:	4629      	mov	r1, r5
 8000ae6:	4620      	mov	r0, r4
 8000ae8:	f7ff ffb4 	bl	8000a54 <I2C_IsAcknowledgeFailed>
 8000aec:	b9a0      	cbnz	r0, 8000b18 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8000aee:	1c6a      	adds	r2, r5, #1
 8000af0:	d0f1      	beq.n	8000ad6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000af2:	f7ff fd09 	bl	8000508 <HAL_GetTick>
 8000af6:	1b80      	subs	r0, r0, r6
 8000af8:	4285      	cmp	r5, r0
 8000afa:	d301      	bcc.n	8000b00 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8000afc:	2d00      	cmp	r5, #0
 8000afe:	d1ea      	bne.n	8000ad6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000b00:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b02:	f043 0320 	orr.w	r3, r3, #32
 8000b06:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000b08:	2320      	movs	r3, #32
 8000b0a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000b14:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000b18:	2001      	movs	r0, #1
}
 8000b1a:	bd70      	pop	{r4, r5, r6, pc}

08000b1c <I2C_RequestMemoryWrite>:
{
 8000b1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000b1e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000b20:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <I2C_RequestMemoryWrite+0x60>)
 8000b24:	9300      	str	r3, [sp, #0]
{
 8000b26:	4605      	mov	r5, r0
 8000b28:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000b2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b2e:	b2fa      	uxtb	r2, r7
 8000b30:	f7ff ff1e 	bl	8000970 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b34:	4632      	mov	r2, r6
 8000b36:	9908      	ldr	r1, [sp, #32]
 8000b38:	4628      	mov	r0, r5
 8000b3a:	f7ff ffc8 	bl	8000ace <I2C_WaitOnTXISFlagUntilTimeout>
 8000b3e:	b110      	cbz	r0, 8000b46 <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 8000b40:	2001      	movs	r0, #1
}
 8000b42:	b003      	add	sp, #12
 8000b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000b46:	2f01      	cmp	r7, #1
 8000b48:	682b      	ldr	r3, [r5, #0]
 8000b4a:	d10c      	bne.n	8000b66 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000b4c:	b2e4      	uxtb	r4, r4
 8000b4e:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8000b50:	9b08      	ldr	r3, [sp, #32]
 8000b52:	9600      	str	r6, [sp, #0]
 8000b54:	2200      	movs	r2, #0
 8000b56:	2180      	movs	r1, #128	; 0x80
 8000b58:	4628      	mov	r0, r5
 8000b5a:	f7ff ff50 	bl	80009fe <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8000b5e:	3000      	adds	r0, #0
 8000b60:	bf18      	it	ne
 8000b62:	2001      	movne	r0, #1
 8000b64:	e7ed      	b.n	8000b42 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000b66:	0a22      	lsrs	r2, r4, #8
 8000b68:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b6a:	9908      	ldr	r1, [sp, #32]
 8000b6c:	4632      	mov	r2, r6
 8000b6e:	4628      	mov	r0, r5
 8000b70:	f7ff ffad 	bl	8000ace <I2C_WaitOnTXISFlagUntilTimeout>
 8000b74:	2800      	cmp	r0, #0
 8000b76:	d1e3      	bne.n	8000b40 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000b78:	682b      	ldr	r3, [r5, #0]
 8000b7a:	e7e7      	b.n	8000b4c <I2C_RequestMemoryWrite+0x30>
 8000b7c:	80002000 	.word	0x80002000

08000b80 <I2C_RequestMemoryRead>:
{
 8000b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000b82:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000b84:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <I2C_RequestMemoryRead+0x60>)
 8000b88:	9300      	str	r3, [sp, #0]
{
 8000b8a:	4605      	mov	r5, r0
 8000b8c:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000b8e:	2300      	movs	r3, #0
 8000b90:	b2fa      	uxtb	r2, r7
 8000b92:	f7ff feed 	bl	8000970 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b96:	4632      	mov	r2, r6
 8000b98:	9908      	ldr	r1, [sp, #32]
 8000b9a:	4628      	mov	r0, r5
 8000b9c:	f7ff ff97 	bl	8000ace <I2C_WaitOnTXISFlagUntilTimeout>
 8000ba0:	b110      	cbz	r0, 8000ba8 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8000ba2:	2001      	movs	r0, #1
}
 8000ba4:	b003      	add	sp, #12
 8000ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000ba8:	2f01      	cmp	r7, #1
 8000baa:	682b      	ldr	r3, [r5, #0]
 8000bac:	d10c      	bne.n	8000bc8 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000bae:	b2e4      	uxtb	r4, r4
 8000bb0:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8000bb2:	9b08      	ldr	r3, [sp, #32]
 8000bb4:	9600      	str	r6, [sp, #0]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2140      	movs	r1, #64	; 0x40
 8000bba:	4628      	mov	r0, r5
 8000bbc:	f7ff ff1f 	bl	80009fe <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8000bc0:	3000      	adds	r0, #0
 8000bc2:	bf18      	it	ne
 8000bc4:	2001      	movne	r0, #1
 8000bc6:	e7ed      	b.n	8000ba4 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000bc8:	0a22      	lsrs	r2, r4, #8
 8000bca:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000bcc:	9908      	ldr	r1, [sp, #32]
 8000bce:	4632      	mov	r2, r6
 8000bd0:	4628      	mov	r0, r5
 8000bd2:	f7ff ff7c 	bl	8000ace <I2C_WaitOnTXISFlagUntilTimeout>
 8000bd6:	2800      	cmp	r0, #0
 8000bd8:	d1e3      	bne.n	8000ba2 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000bda:	682b      	ldr	r3, [r5, #0]
 8000bdc:	e7e7      	b.n	8000bae <I2C_RequestMemoryRead+0x2e>
 8000bde:	bf00      	nop
 8000be0:	80002000 	.word	0x80002000

08000be4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000be4:	b570      	push	{r4, r5, r6, lr}
 8000be6:	4604      	mov	r4, r0
 8000be8:	460d      	mov	r5, r1
 8000bea:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000bec:	6823      	ldr	r3, [r4, #0]
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	069b      	lsls	r3, r3, #26
 8000bf2:	d501      	bpl.n	8000bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000bf8:	4632      	mov	r2, r6
 8000bfa:	4629      	mov	r1, r5
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	f7ff ff29 	bl	8000a54 <I2C_IsAcknowledgeFailed>
 8000c02:	b990      	cbnz	r0, 8000c2a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c04:	f7ff fc80 	bl	8000508 <HAL_GetTick>
 8000c08:	1b80      	subs	r0, r0, r6
 8000c0a:	4285      	cmp	r5, r0
 8000c0c:	d301      	bcc.n	8000c12 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	d1ec      	bne.n	8000bec <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000c12:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c14:	f043 0320 	orr.w	r3, r3, #32
 8000c18:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000c1a:	2320      	movs	r3, #32
 8000c1c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000c26:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000c2a:	2001      	movs	r0, #1
}
 8000c2c:	bd70      	pop	{r4, r5, r6, pc}

08000c2e <HAL_I2C_Init>:
{
 8000c2e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000c30:	4604      	mov	r4, r0
 8000c32:	2800      	cmp	r0, #0
 8000c34:	d04a      	beq.n	8000ccc <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c36:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000c3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c3e:	b91b      	cbnz	r3, 8000c48 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000c40:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000c44:	f002 fa92 	bl	800316c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c48:	2324      	movs	r3, #36	; 0x24
 8000c4a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000c4e:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c50:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	f022 0201 	bic.w	r2, r2, #1
 8000c58:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000c5a:	6862      	ldr	r2, [r4, #4]
 8000c5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c60:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c62:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c64:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c6e:	d124      	bne.n	8000cba <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000c70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c74:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c76:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000c78:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c7a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000c7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c82:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c84:	68da      	ldr	r2, [r3, #12]
 8000c86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c8a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000c8c:	6922      	ldr	r2, [r4, #16]
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	69a1      	ldr	r1, [r4, #24]
 8000c92:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000c96:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c98:	6a21      	ldr	r1, [r4, #32]
 8000c9a:	69e2      	ldr	r2, [r4, #28]
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	f042 0201 	orr.w	r2, r2, #1
 8000ca6:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ca8:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000caa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cac:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000cae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000cb2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cb4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000cb8:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000cba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000cbe:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000cc0:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000cc2:	bf04      	itt	eq
 8000cc4:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000cc8:	605a      	streq	r2, [r3, #4]
 8000cca:	e7d4      	b.n	8000c76 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000ccc:	2001      	movs	r0, #1
}
 8000cce:	bd10      	pop	{r4, pc}

08000cd0 <HAL_I2C_Mem_Write>:
{
 8000cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cd4:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cd6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000cda:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cdc:	2b20      	cmp	r3, #32
{
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	9203      	str	r2, [sp, #12]
 8000ce4:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8000ce8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cec:	f040 80a5 	bne.w	8000e3a <HAL_I2C_Mem_Write+0x16a>
    if ((pData == NULL) || (Size == 0U))
 8000cf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000cf2:	b113      	cbz	r3, 8000cfa <HAL_I2C_Mem_Write+0x2a>
 8000cf4:	f1ba 0f00 	cmp.w	sl, #0
 8000cf8:	d106      	bne.n	8000d08 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000cfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cfe:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000d00:	2001      	movs	r0, #1
}
 8000d02:	b005      	add	sp, #20
 8000d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8000d08:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	f000 8094 	beq.w	8000e3a <HAL_I2C_Mem_Write+0x16a>
 8000d12:	2501      	movs	r5, #1
 8000d14:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000d18:	f7ff fbf6 	bl	8000508 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000d1c:	2319      	movs	r3, #25
 8000d1e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8000d20:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000d22:	462a      	mov	r2, r5
 8000d24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d28:	4620      	mov	r0, r4
 8000d2a:	f7ff fe68 	bl	80009fe <I2C_WaitOnFlagUntilTimeout>
 8000d2e:	4681      	mov	r9, r0
 8000d30:	2800      	cmp	r0, #0
 8000d32:	d1e5      	bne.n	8000d00 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000d34:	2321      	movs	r3, #33	; 0x21
 8000d36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000d3a:	2340      	movs	r3, #64	; 0x40
 8000d3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8000d40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d42:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000d44:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8000d46:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000d48:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000d4c:	9601      	str	r6, [sp, #4]
 8000d4e:	f8cd 8000 	str.w	r8, [sp]
 8000d52:	465b      	mov	r3, fp
 8000d54:	9a03      	ldr	r2, [sp, #12]
 8000d56:	4639      	mov	r1, r7
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f7ff fedf 	bl	8000b1c <I2C_RequestMemoryWrite>
 8000d5e:	b110      	cbz	r0, 8000d66 <HAL_I2C_Mem_Write+0x96>
      __HAL_UNLOCK(hi2c);
 8000d60:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8000d64:	e7cc      	b.n	8000d00 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d66:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	2bff      	cmp	r3, #255	; 0xff
 8000d6c:	d955      	bls.n	8000e1a <HAL_I2C_Mem_Write+0x14a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d6e:	22ff      	movs	r2, #255	; 0xff
 8000d70:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000d72:	9000      	str	r0, [sp, #0]
 8000d74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000d78:	4639      	mov	r1, r7
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	f7ff fdf8 	bl	8000970 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d80:	4632      	mov	r2, r6
 8000d82:	4641      	mov	r1, r8
 8000d84:	4620      	mov	r0, r4
 8000d86:	f7ff fea2 	bl	8000ace <I2C_WaitOnTXISFlagUntilTimeout>
 8000d8a:	2800      	cmp	r0, #0
 8000d8c:	d1b8      	bne.n	8000d00 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000d8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d90:	6822      	ldr	r2, [r4, #0]
 8000d92:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000d96:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000d98:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000d9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000d9c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000da4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000da6:	3a01      	subs	r2, #1
 8000da8:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000daa:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000dac:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000dae:	b1ab      	cbz	r3, 8000ddc <HAL_I2C_Mem_Write+0x10c>
 8000db0:	b9a2      	cbnz	r2, 8000ddc <HAL_I2C_Mem_Write+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000db2:	9600      	str	r6, [sp, #0]
 8000db4:	4643      	mov	r3, r8
 8000db6:	2180      	movs	r1, #128	; 0x80
 8000db8:	4620      	mov	r0, r4
 8000dba:	f7ff fe20 	bl	80009fe <I2C_WaitOnFlagUntilTimeout>
 8000dbe:	2800      	cmp	r0, #0
 8000dc0:	d19e      	bne.n	8000d00 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000dc2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	2bff      	cmp	r3, #255	; 0xff
 8000dc8:	d92f      	bls.n	8000e2a <HAL_I2C_Mem_Write+0x15a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000dca:	22ff      	movs	r2, #255	; 0xff
 8000dcc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000dce:	9000      	str	r0, [sp, #0]
 8000dd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000dd4:	4639      	mov	r1, r7
 8000dd6:	4620      	mov	r0, r4
 8000dd8:	f7ff fdca 	bl	8000970 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8000ddc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1cd      	bne.n	8000d80 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000de4:	4632      	mov	r2, r6
 8000de6:	4641      	mov	r1, r8
 8000de8:	4620      	mov	r0, r4
 8000dea:	f7ff fefb 	bl	8000be4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000dee:	2800      	cmp	r0, #0
 8000df0:	d186      	bne.n	8000d00 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000df2:	6823      	ldr	r3, [r4, #0]
 8000df4:	2120      	movs	r1, #32
 8000df6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000dfe:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000e02:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000e06:	f022 0201 	bic.w	r2, r2, #1
 8000e0a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000e0c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000e10:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000e14:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000e18:	e773      	b.n	8000d02 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8000e1a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e1c:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000e1e:	b292      	uxth	r2, r2
 8000e20:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	e7a6      	b.n	8000d78 <HAL_I2C_Mem_Write+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8000e2a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e2c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000e2e:	b292      	uxth	r2, r2
 8000e30:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	e7cc      	b.n	8000dd4 <HAL_I2C_Mem_Write+0x104>
    return HAL_BUSY;
 8000e3a:	2002      	movs	r0, #2
 8000e3c:	e761      	b.n	8000d02 <HAL_I2C_Mem_Write+0x32>
	...

08000e40 <HAL_I2C_Mem_Read>:
{
 8000e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e44:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e46:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000e4a:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e4c:	2b20      	cmp	r3, #32
{
 8000e4e:	4604      	mov	r4, r0
 8000e50:	460f      	mov	r7, r1
 8000e52:	9203      	str	r2, [sp, #12]
 8000e54:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8000e58:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e5c:	f040 80a9 	bne.w	8000fb2 <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8000e60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000e62:	b113      	cbz	r3, 8000e6a <HAL_I2C_Mem_Read+0x2a>
 8000e64:	f1ba 0f00 	cmp.w	sl, #0
 8000e68:	d106      	bne.n	8000e78 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000e6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e6e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000e70:	2001      	movs	r0, #1
}
 8000e72:	b005      	add	sp, #20
 8000e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8000e78:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	f000 8098 	beq.w	8000fb2 <HAL_I2C_Mem_Read+0x172>
 8000e82:	2501      	movs	r5, #1
 8000e84:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000e88:	f7ff fb3e 	bl	8000508 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e8c:	2319      	movs	r3, #25
 8000e8e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8000e90:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e92:	462a      	mov	r2, r5
 8000e94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e98:	4620      	mov	r0, r4
 8000e9a:	f7ff fdb0 	bl	80009fe <I2C_WaitOnFlagUntilTimeout>
 8000e9e:	4681      	mov	r9, r0
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d1e5      	bne.n	8000e70 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000ea4:	2322      	movs	r3, #34	; 0x22
 8000ea6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000eaa:	2340      	movs	r3, #64	; 0x40
 8000eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8000eb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000eb2:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000eb4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8000eb6:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000eb8:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000ebc:	9601      	str	r6, [sp, #4]
 8000ebe:	f8cd 8000 	str.w	r8, [sp]
 8000ec2:	465b      	mov	r3, fp
 8000ec4:	9a03      	ldr	r2, [sp, #12]
 8000ec6:	4639      	mov	r1, r7
 8000ec8:	4620      	mov	r0, r4
 8000eca:	f7ff fe59 	bl	8000b80 <I2C_RequestMemoryRead>
 8000ece:	b110      	cbz	r0, 8000ed6 <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 8000ed0:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8000ed4:	e7cc      	b.n	8000e70 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ed6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	2bff      	cmp	r3, #255	; 0xff
 8000edc:	4b36      	ldr	r3, [pc, #216]	; (8000fb8 <HAL_I2C_Mem_Read+0x178>)
 8000ede:	d958      	bls.n	8000f92 <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ee0:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000ee2:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ee4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000ee6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000eea:	4639      	mov	r1, r7
 8000eec:	4620      	mov	r0, r4
 8000eee:	f7ff fd3f 	bl	8000970 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8000ef2:	9600      	str	r6, [sp, #0]
 8000ef4:	4643      	mov	r3, r8
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2104      	movs	r1, #4
 8000efa:	4620      	mov	r0, r4
 8000efc:	f7ff fd7f 	bl	80009fe <I2C_WaitOnFlagUntilTimeout>
 8000f00:	2800      	cmp	r0, #0
 8000f02:	d1b5      	bne.n	8000e70 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000f04:	6822      	ldr	r2, [r4, #0]
 8000f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000f0a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8000f0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8000f0e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000f10:	3301      	adds	r3, #1
 8000f12:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000f14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f16:	3b01      	subs	r3, #1
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000f1e:	3a01      	subs	r2, #1
 8000f20:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f22:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000f24:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f26:	b1ab      	cbz	r3, 8000f54 <HAL_I2C_Mem_Read+0x114>
 8000f28:	b9a2      	cbnz	r2, 8000f54 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f2a:	9600      	str	r6, [sp, #0]
 8000f2c:	4643      	mov	r3, r8
 8000f2e:	2180      	movs	r1, #128	; 0x80
 8000f30:	4620      	mov	r0, r4
 8000f32:	f7ff fd64 	bl	80009fe <I2C_WaitOnFlagUntilTimeout>
 8000f36:	2800      	cmp	r0, #0
 8000f38:	d19a      	bne.n	8000e70 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	2bff      	cmp	r3, #255	; 0xff
 8000f40:	d92f      	bls.n	8000fa2 <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f42:	22ff      	movs	r2, #255	; 0xff
 8000f44:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000f46:	9000      	str	r0, [sp, #0]
 8000f48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000f4c:	4639      	mov	r1, r7
 8000f4e:	4620      	mov	r0, r4
 8000f50:	f7ff fd0e 	bl	8000970 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8000f54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1ca      	bne.n	8000ef2 <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f5c:	4632      	mov	r2, r6
 8000f5e:	4641      	mov	r1, r8
 8000f60:	4620      	mov	r0, r4
 8000f62:	f7ff fe3f 	bl	8000be4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000f66:	2800      	cmp	r0, #0
 8000f68:	d182      	bne.n	8000e70 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f6a:	6823      	ldr	r3, [r4, #0]
 8000f6c:	2120      	movs	r1, #32
 8000f6e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000f76:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000f7a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000f7e:	f022 0201 	bic.w	r2, r2, #1
 8000f82:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000f84:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000f88:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000f8c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000f90:	e76f      	b.n	8000e72 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8000f92:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000f94:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000f96:	b292      	uxth	r2, r2
 8000f98:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000f9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	e7a3      	b.n	8000eea <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8000fa2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000fa4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000fa6:	b292      	uxth	r2, r2
 8000fa8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000faa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	e7cc      	b.n	8000f4c <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	e75d      	b.n	8000e72 <HAL_I2C_Mem_Read+0x32>
 8000fb6:	bf00      	nop
 8000fb8:	80002400 	.word	0x80002400

08000fbc <HAL_I2C_IsDeviceReady>:
{
 8000fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000fc0:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fc6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000fca:	2b20      	cmp	r3, #32
{
 8000fcc:	4604      	mov	r4, r0
 8000fce:	4690      	mov	r8, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fd0:	d17d      	bne.n	80010ce <HAL_I2C_IsDeviceReady+0x112>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8000fd2:	6803      	ldr	r3, [r0, #0]
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 8000fda:	d178      	bne.n	80010ce <HAL_I2C_IsDeviceReady+0x112>
    __HAL_LOCK(hi2c);
 8000fdc:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8000fe0:	2a01      	cmp	r2, #1
 8000fe2:	d074      	beq.n	80010ce <HAL_I2C_IsDeviceReady+0x112>
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 8000fea:	f3c1 0609 	ubfx	r6, r1, #0, #10
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000fee:	2224      	movs	r2, #36	; 0x24
 8000ff0:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8000ff4:	f446 5920 	orr.w	r9, r6, #10240	; 0x2800
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ff8:	6443      	str	r3, [r0, #68]	; 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8000ffa:	68e3      	ldr	r3, [r4, #12]
 8000ffc:	6822      	ldr	r2, [r4, #0]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	bf06      	itte	eq
 8001002:	f046 7300 	orreq.w	r3, r6, #33554432	; 0x2000000
 8001006:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
 800100a:	464b      	movne	r3, r9
 800100c:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 800100e:	f7ff fa7b 	bl	8000508 <HAL_GetTick>
 8001012:	4607      	mov	r7, r0
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001014:	6823      	ldr	r3, [r4, #0]
 8001016:	699a      	ldr	r2, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001018:	699b      	ldr	r3, [r3, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800101a:	f3c2 1240 	ubfx	r2, r2, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800101e:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001022:	b902      	cbnz	r2, 8001026 <HAL_I2C_IsDeviceReady+0x6a>
 8001024:	b16b      	cbz	r3, 8001042 <HAL_I2C_IsDeviceReady+0x86>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001026:	6823      	ldr	r3, [r4, #0]
 8001028:	699a      	ldr	r2, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800102a:	9700      	str	r7, [sp, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800102c:	f012 0210 	ands.w	r2, r2, #16
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001030:	462b      	mov	r3, r5
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001032:	d124      	bne.n	800107e <HAL_I2C_IsDeviceReady+0xc2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001034:	2120      	movs	r1, #32
 8001036:	4620      	mov	r0, r4
 8001038:	f7ff fce1 	bl	80009fe <I2C_WaitOnFlagUntilTimeout>
 800103c:	b1a8      	cbz	r0, 800106a <HAL_I2C_IsDeviceReady+0xae>
    return HAL_ERROR;
 800103e:	2001      	movs	r0, #1
 8001040:	e01a      	b.n	8001078 <HAL_I2C_IsDeviceReady+0xbc>
        if (Timeout != HAL_MAX_DELAY)
 8001042:	1c6b      	adds	r3, r5, #1
 8001044:	d0e6      	beq.n	8001014 <HAL_I2C_IsDeviceReady+0x58>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001046:	f7ff fa5f 	bl	8000508 <HAL_GetTick>
 800104a:	1bc0      	subs	r0, r0, r7
 800104c:	4285      	cmp	r5, r0
 800104e:	d301      	bcc.n	8001054 <HAL_I2C_IsDeviceReady+0x98>
 8001050:	2d00      	cmp	r5, #0
 8001052:	d1df      	bne.n	8001014 <HAL_I2C_IsDeviceReady+0x58>
    hi2c->State = HAL_I2C_STATE_READY;
 8001054:	2320      	movs	r3, #32
 8001056:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800105a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8001062:	2300      	movs	r3, #0
 8001064:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001068:	e7e9      	b.n	800103e <HAL_I2C_IsDeviceReady+0x82>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800106a:	6822      	ldr	r2, [r4, #0]
 800106c:	2320      	movs	r3, #32
 800106e:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8001070:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8001074:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8001078:	b004      	add	sp, #16
 800107a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800107e:	2200      	movs	r2, #0
 8001080:	2120      	movs	r1, #32
 8001082:	4620      	mov	r0, r4
 8001084:	f7ff fcbb 	bl	80009fe <I2C_WaitOnFlagUntilTimeout>
 8001088:	4602      	mov	r2, r0
 800108a:	2800      	cmp	r0, #0
 800108c:	d1d7      	bne.n	800103e <HAL_I2C_IsDeviceReady+0x82>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800108e:	6823      	ldr	r3, [r4, #0]
 8001090:	2110      	movs	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001092:	f04f 0a20 	mov.w	sl, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001096:	61d9      	str	r1, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001098:	f8c3 a01c 	str.w	sl, [r3, #28]
      if (I2C_Trials == Trials)
 800109c:	9903      	ldr	r1, [sp, #12]
 800109e:	4541      	cmp	r1, r8
 80010a0:	d10e      	bne.n	80010c0 <HAL_I2C_IsDeviceReady+0x104>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80010a2:	6859      	ldr	r1, [r3, #4]
 80010a4:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80010a8:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80010aa:	4620      	mov	r0, r4
 80010ac:	9700      	str	r7, [sp, #0]
 80010ae:	462b      	mov	r3, r5
 80010b0:	4651      	mov	r1, sl
 80010b2:	f7ff fca4 	bl	80009fe <I2C_WaitOnFlagUntilTimeout>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	d1c1      	bne.n	800103e <HAL_I2C_IsDeviceReady+0x82>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80010ba:	6823      	ldr	r3, [r4, #0]
 80010bc:	f8c3 a01c 	str.w	sl, [r3, #28]
      I2C_Trials++;
 80010c0:	9b03      	ldr	r3, [sp, #12]
 80010c2:	3301      	adds	r3, #1
 80010c4:	9303      	str	r3, [sp, #12]
    while (I2C_Trials < Trials);
 80010c6:	9b03      	ldr	r3, [sp, #12]
 80010c8:	4598      	cmp	r8, r3
 80010ca:	d896      	bhi.n	8000ffa <HAL_I2C_IsDeviceReady+0x3e>
 80010cc:	e7c2      	b.n	8001054 <HAL_I2C_IsDeviceReady+0x98>
    return HAL_BUSY;
 80010ce:	2002      	movs	r0, #2
 80010d0:	e7d2      	b.n	8001078 <HAL_I2C_IsDeviceReady+0xbc>

080010d2 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80010d2:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 80010d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80010d6:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80010d8:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 80010da:	b103      	cbz	r3, 80010de <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 80010dc:	4718      	bx	r3
 80010de:	4770      	bx	lr

080010e0 <HAL_I2C_SlaveTxCpltCallback>:
 80010e0:	4770      	bx	lr

080010e2 <HAL_I2C_SlaveRxCpltCallback>:
 80010e2:	4770      	bx	lr

080010e4 <I2C_ITSlaveSequentialCplt>:
{
 80010e4:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010e6:	2500      	movs	r5, #0
 80010e8:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80010ec:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80010f0:	2b29      	cmp	r3, #41	; 0x29
 80010f2:	d10c      	bne.n	800110e <I2C_ITSlaveSequentialCplt+0x2a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80010f4:	2328      	movs	r3, #40	; 0x28
 80010f6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80010fa:	2321      	movs	r3, #33	; 0x21
 80010fc:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80010fe:	2101      	movs	r1, #1
 8001100:	f7ff fc50 	bl	80009a4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001104:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001108:	f7ff ffea 	bl	80010e0 <HAL_I2C_SlaveTxCpltCallback>
 800110c:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800110e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001112:	2b2a      	cmp	r3, #42	; 0x2a
 8001114:	d10b      	bne.n	800112e <I2C_ITSlaveSequentialCplt+0x4a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001116:	2328      	movs	r3, #40	; 0x28
 8001118:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800111c:	2322      	movs	r3, #34	; 0x22
 800111e:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001120:	2102      	movs	r1, #2
 8001122:	f7ff fc3f 	bl	80009a4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001126:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800112a:	f7ff ffda 	bl	80010e2 <HAL_I2C_SlaveRxCpltCallback>
 800112e:	bd38      	pop	{r3, r4, r5, pc}

08001130 <HAL_I2C_AddrCallback>:
{
 8001130:	4770      	bx	lr

08001132 <I2C_ITAddrCplt.isra.8>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8001132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001134:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001138:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800113c:	2b28      	cmp	r3, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800113e:	4604      	mov	r4, r0
 8001140:	6803      	ldr	r3, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001142:	d134      	bne.n	80011ae <I2C_ITAddrCplt.isra.8+0x7c>
    transferdirection = I2C_GET_DIR(hi2c);
 8001144:	699e      	ldr	r6, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001146:	68c1      	ldr	r1, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001148:	699d      	ldr	r5, [r3, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800114a:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800114c:	68df      	ldr	r7, [r3, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800114e:	0c2d      	lsrs	r5, r5, #16
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001150:	2902      	cmp	r1, #2
    transferdirection = I2C_GET_DIR(hi2c);
 8001152:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001156:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800115a:	d120      	bne.n	800119e <I2C_ITAddrCplt.isra.8+0x6c>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800115c:	f3c2 0209 	ubfx	r2, r2, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001160:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8001164:	f015 0506 	ands.w	r5, r5, #6
 8001168:	d10e      	bne.n	8001188 <I2C_ITAddrCplt.isra.8+0x56>
        hi2c->AddrEventCount++;
 800116a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800116c:	3101      	adds	r1, #1
 800116e:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001170:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001172:	2902      	cmp	r1, #2
 8001174:	d120      	bne.n	80011b8 <I2C_ITAddrCplt.isra.8+0x86>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001176:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 8001178:	6485      	str	r5, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800117a:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 800117c:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001180:	4631      	mov	r1, r6
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001182:	f7ff ffd5 	bl	8001130 <HAL_I2C_AddrCallback>
 8001186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001188:	2104      	movs	r1, #4
 800118a:	f7ff fc0b 	bl	80009a4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800118e:	2300      	movs	r3, #0
 8001190:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001194:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001198:	4631      	mov	r1, r6
 800119a:	4620      	mov	r0, r4
 800119c:	e7f1      	b.n	8001182 <I2C_ITAddrCplt.isra.8+0x50>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800119e:	2104      	movs	r1, #4
 80011a0:	f7ff fc00 	bl	80009a4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80011a4:	2300      	movs	r3, #0
 80011a6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80011aa:	462a      	mov	r2, r5
 80011ac:	e7f4      	b.n	8001198 <I2C_ITAddrCplt.isra.8+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80011ae:	2208      	movs	r2, #8
 80011b0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80011b2:	2300      	movs	r3, #0
 80011b4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80011b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080011ba <HAL_I2C_ListenCpltCallback>:
 80011ba:	4770      	bx	lr

080011bc <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <I2C_ITListenCplt+0x60>)
{
 80011be:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_READY;
 80011c0:	2220      	movs	r2, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011c2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 80011c8:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 80011ca:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011ce:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80011d2:	074b      	lsls	r3, r1, #29
{
 80011d4:	4604      	mov	r4, r0
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80011d6:	d512      	bpl.n	80011fe <I2C_ITListenCplt+0x42>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80011d8:	6802      	ldr	r2, [r0, #0]
 80011da:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80011dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80011de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80011e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80011e2:	3301      	adds	r3, #1
 80011e4:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80011e6:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 80011e8:	b14b      	cbz	r3, 80011fe <I2C_ITListenCplt+0x42>
      hi2c->XferSize--;
 80011ea:	3b01      	subs	r3, #1
 80011ec:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 80011ee:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80011f0:	3b01      	subs	r3, #1
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80011f6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80011fe:	4620      	mov	r0, r4
 8001200:	2107      	movs	r1, #7
 8001202:	f7ff fbcf 	bl	80009a4 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001206:	6823      	ldr	r3, [r4, #0]
 8001208:	2210      	movs	r2, #16
 800120a:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800120c:	2300      	movs	r3, #0
 800120e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8001212:	4620      	mov	r0, r4
 8001214:	f7ff ffd1 	bl	80011ba <HAL_I2C_ListenCpltCallback>
 8001218:	bd10      	pop	{r4, pc}
 800121a:	bf00      	nop
 800121c:	ffff0000 	.word	0xffff0000

08001220 <HAL_I2C_ErrorCallback>:
 8001220:	4770      	bx	lr

08001222 <HAL_I2C_AbortCpltCallback>:
{
 8001222:	4770      	bx	lr

08001224 <I2C_ITError>:
{
 8001224:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001226:	4a32      	ldr	r2, [pc, #200]	; (80012f0 <I2C_ITError+0xcc>)
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001228:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800122c:	2500      	movs	r5, #0
 800122e:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001232:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001234:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8001236:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001238:	3b28      	subs	r3, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 800123a:	4311      	orrs	r1, r2
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800123c:	2b02      	cmp	r3, #2
{
 800123e:	4604      	mov	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 8001240:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001242:	d822      	bhi.n	800128a <I2C_ITError+0x66>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001244:	2103      	movs	r1, #3
 8001246:	f7ff fbad 	bl	80009a4 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800124a:	2328      	movs	r3, #40	; 0x28
 800124c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001250:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <I2C_ITError+0xd0>)
    hi2c->PreviousState = I2C_STATE_NONE;
 8001252:	6305      	str	r5, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001254:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001256:	6823      	ldr	r3, [r4, #0]
 8001258:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800125a:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800125c:	f411 4180 	ands.w	r1, r1, #16384	; 0x4000
 8001260:	d020      	beq.n	80012a4 <I2C_ITError+0x80>
    if (hi2c->hdmatx != NULL)
 8001262:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001264:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001268:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 800126a:	2800      	cmp	r0, #0
 800126c:	d03e      	beq.n	80012ec <I2C_ITError+0xc8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800126e:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <I2C_ITError+0xd4>)
 8001270:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8001272:	2300      	movs	r3, #0
 8001274:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001278:	f7ff fa0e 	bl	8000698 <HAL_DMA_Abort_IT>
 800127c:	2800      	cmp	r0, #0
 800127e:	d035      	beq.n	80012ec <I2C_ITError+0xc8>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001280:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001282:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8001284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001288:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800128a:	2107      	movs	r1, #7
 800128c:	f7ff fb8a 	bl	80009a4 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001290:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001294:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 8001296:	bf1c      	itt	ne
 8001298:	2320      	movne	r3, #32
 800129a:	f880 3041 	strbne.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800129e:	2300      	movs	r3, #0
 80012a0:	6303      	str	r3, [r0, #48]	; 0x30
 80012a2:	e7d7      	b.n	8001254 <I2C_ITError+0x30>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80012a4:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 80012a8:	d00e      	beq.n	80012c8 <I2C_ITError+0xa4>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80012aa:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 80012ac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80012ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012b2:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 80012b4:	b1d0      	cbz	r0, 80012ec <I2C_ITError+0xc8>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <I2C_ITError+0xd4>)
 80012b8:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80012ba:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80012be:	f7ff f9eb 	bl	8000698 <HAL_DMA_Abort_IT>
 80012c2:	b198      	cbz	r0, 80012ec <I2C_ITError+0xc8>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80012c4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80012c6:	e7dc      	b.n	8001282 <I2C_ITError+0x5e>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80012c8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80012cc:	2b60      	cmp	r3, #96	; 0x60
 80012ce:	d108      	bne.n	80012e2 <I2C_ITError+0xbe>
    hi2c->State = HAL_I2C_STATE_READY;
 80012d0:	2320      	movs	r3, #32
 80012d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80012d6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80012da:	4620      	mov	r0, r4
 80012dc:	f7ff ffa1 	bl	8001222 <HAL_I2C_AbortCpltCallback>
 80012e0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hi2c);
 80012e2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80012e6:	4620      	mov	r0, r4
 80012e8:	f7ff ff9a 	bl	8001220 <HAL_I2C_ErrorCallback>
 80012ec:	bd70      	pop	{r4, r5, r6, pc}
 80012ee:	bf00      	nop
 80012f0:	ffff0000 	.word	0xffff0000
 80012f4:	080013ed 	.word	0x080013ed
 80012f8:	0800155d 	.word	0x0800155d

080012fc <I2C_ITSlaveCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80012fc:	6803      	ldr	r3, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012fe:	2220      	movs	r2, #32
{
 8001300:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001302:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001304:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001306:	2208      	movs	r2, #8
 8001308:	61da      	str	r2, [r3, #28]
{
 800130a:	460d      	mov	r5, r1
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800130c:	2107      	movs	r1, #7
{
 800130e:	4604      	mov	r4, r0
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001310:	f7ff fb48 	bl	80009a4 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001314:	6803      	ldr	r3, [r0, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800131c:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001324:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001328:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800132c:	f022 0201 	bic.w	r2, r2, #1
 8001330:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8001332:	f7ff fb0f 	bl	8000954 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001336:	0471      	lsls	r1, r6, #17
 8001338:	d532      	bpl.n	80013a0 <I2C_ITSlaveCplt+0xa4>
    if (hi2c->hdmatx != NULL)
 800133a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 800133c:	b11b      	cbz	r3, 8001346 <I2C_ITSlaveCplt+0x4a>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	b29b      	uxth	r3, r3
 8001344:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001346:	076b      	lsls	r3, r5, #29
 8001348:	d50e      	bpl.n	8001368 <I2C_ITSlaveCplt+0x6c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800134a:	6822      	ldr	r2, [r4, #0]
 800134c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800134e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001350:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001352:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001354:	3301      	adds	r3, #1
 8001356:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8001358:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800135a:	b12b      	cbz	r3, 8001368 <I2C_ITSlaveCplt+0x6c>
      hi2c->XferSize--;
 800135c:	3b01      	subs	r3, #1
 800135e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001360:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001362:	3b01      	subs	r3, #1
 8001364:	b29b      	uxth	r3, r3
 8001366:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8001368:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800136a:	b29b      	uxth	r3, r3
 800136c:	b11b      	cbz	r3, 8001376 <I2C_ITSlaveCplt+0x7a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800136e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8001376:	2300      	movs	r3, #0
 8001378:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800137a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 800137e:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001380:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001382:	b18b      	cbz	r3, 80013a8 <I2C_ITSlaveCplt+0xac>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001384:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001386:	4620      	mov	r0, r4
 8001388:	f7ff ff4c 	bl	8001224 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800138c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001390:	2b28      	cmp	r3, #40	; 0x28
 8001392:	d128      	bne.n	80013e6 <I2C_ITSlaveCplt+0xea>
      I2C_ITListenCplt(hi2c, ITFlags);
 8001394:	4629      	mov	r1, r5
 8001396:	4620      	mov	r0, r4
}
 8001398:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_ITListenCplt(hi2c, ITFlags);
 800139c:	f7ff bf0e 	b.w	80011bc <I2C_ITListenCplt>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80013a0:	0432      	lsls	r2, r6, #16
 80013a2:	d5d0      	bpl.n	8001346 <I2C_ITSlaveCplt+0x4a>
    if (hi2c->hdmarx != NULL)
 80013a4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80013a6:	e7c9      	b.n	800133c <I2C_ITSlaveCplt+0x40>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80013a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013aa:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80013ae:	d00a      	beq.n	80013c6 <I2C_ITSlaveCplt+0xca>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013b0:	4a0d      	ldr	r2, [pc, #52]	; (80013e8 <I2C_ITSlaveCplt+0xec>)
 80013b2:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80013b4:	2220      	movs	r2, #32
 80013b6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80013ba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80013be:	4620      	mov	r0, r4
 80013c0:	f7ff fefb 	bl	80011ba <HAL_I2C_ListenCpltCallback>
 80013c4:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80013c6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80013ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80013ce:	2a22      	cmp	r2, #34	; 0x22
 80013d0:	f04f 0220 	mov.w	r2, #32
    hi2c->State = HAL_I2C_STATE_READY;
 80013d4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80013d8:	4620      	mov	r0, r4
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80013da:	d102      	bne.n	80013e2 <I2C_ITSlaveCplt+0xe6>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80013dc:	f7ff fe81 	bl	80010e2 <HAL_I2C_SlaveRxCpltCallback>
 80013e0:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80013e2:	f7ff fe7d 	bl	80010e0 <HAL_I2C_SlaveTxCpltCallback>
 80013e6:	bd70      	pop	{r4, r5, r6, pc}
 80013e8:	ffff0000 	.word	0xffff0000

080013ec <I2C_Slave_ISR_IT>:
{
 80013ec:	b570      	push	{r4, r5, r6, lr}
 80013ee:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 80013f0:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 80013f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80013f6:	2a01      	cmp	r2, #1
{
 80013f8:	4604      	mov	r4, r0
 80013fa:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 80013fc:	d07c      	beq.n	80014f8 <I2C_Slave_ISR_IT+0x10c>
 80013fe:	2201      	movs	r2, #1
 8001400:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001404:	06ca      	lsls	r2, r1, #27
 8001406:	d539      	bpl.n	800147c <I2C_Slave_ISR_IT+0x90>
 8001408:	06f2      	lsls	r2, r6, #27
 800140a:	d537      	bpl.n	800147c <I2C_Slave_ISR_IT+0x90>
    if (hi2c->XferCount == 0U)
 800140c:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800140e:	b292      	uxth	r2, r2
 8001410:	bb32      	cbnz	r2, 8001460 <I2C_Slave_ISR_IT+0x74>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8001412:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001416:	2a28      	cmp	r2, #40	; 0x28
 8001418:	d110      	bne.n	800143c <I2C_Slave_ISR_IT+0x50>
 800141a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800141e:	d10d      	bne.n	800143c <I2C_Slave_ISR_IT+0x50>
        I2C_ITListenCplt(hi2c, ITFlags);
 8001420:	f7ff fecc 	bl	80011bc <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001424:	06aa      	lsls	r2, r5, #26
 8001426:	d505      	bpl.n	8001434 <I2C_Slave_ISR_IT+0x48>
 8001428:	06b3      	lsls	r3, r6, #26
 800142a:	d503      	bpl.n	8001434 <I2C_Slave_ISR_IT+0x48>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800142c:	4629      	mov	r1, r5
 800142e:	4620      	mov	r0, r4
 8001430:	f7ff ff64 	bl	80012fc <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8001434:	2000      	movs	r0, #0
 8001436:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 800143a:	bd70      	pop	{r4, r5, r6, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800143c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8001440:	2a29      	cmp	r2, #41	; 0x29
 8001442:	6822      	ldr	r2, [r4, #0]
 8001444:	f04f 0110 	mov.w	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001448:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800144a:	d1eb      	bne.n	8001424 <I2C_Slave_ISR_IT+0x38>
 800144c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001450:	d0e8      	beq.n	8001424 <I2C_Slave_ISR_IT+0x38>
        I2C_Flush_TXDR(hi2c);
 8001452:	4620      	mov	r0, r4
 8001454:	f7ff fa7e 	bl	8000954 <I2C_Flush_TXDR>
      I2C_ITSlaveSequentialCplt(hi2c);
 8001458:	4620      	mov	r0, r4
 800145a:	f7ff fe43 	bl	80010e4 <I2C_ITSlaveSequentialCplt>
 800145e:	e7e1      	b.n	8001424 <I2C_Slave_ISR_IT+0x38>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001460:	6802      	ldr	r2, [r0, #0]
 8001462:	2110      	movs	r1, #16
 8001464:	61d1      	str	r1, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001466:	6c42      	ldr	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001468:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800146c:	f042 0204 	orr.w	r2, r2, #4
 8001470:	6442      	str	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001472:	d1d7      	bne.n	8001424 <I2C_Slave_ISR_IT+0x38>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001474:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001476:	f7ff fed5 	bl	8001224 <I2C_ITError>
 800147a:	e7d3      	b.n	8001424 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800147c:	076a      	lsls	r2, r5, #29
 800147e:	d51a      	bpl.n	80014b6 <I2C_Slave_ISR_IT+0xca>
 8001480:	0770      	lsls	r0, r6, #29
 8001482:	d518      	bpl.n	80014b6 <I2C_Slave_ISR_IT+0xca>
    if (hi2c->XferCount > 0U)
 8001484:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001486:	b292      	uxth	r2, r2
 8001488:	b16a      	cbz	r2, 80014a6 <I2C_Slave_ISR_IT+0xba>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800148a:	6821      	ldr	r1, [r4, #0]
 800148c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800148e:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8001490:	7011      	strb	r1, [r2, #0]
      hi2c->pBuffPtr++;
 8001492:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001494:	3201      	adds	r2, #1
 8001496:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001498:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800149a:	3a01      	subs	r2, #1
 800149c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800149e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80014a0:	3a01      	subs	r2, #1
 80014a2:	b292      	uxth	r2, r2
 80014a4:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 80014a6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80014a8:	b292      	uxth	r2, r2
 80014aa:	2a00      	cmp	r2, #0
 80014ac:	d1ba      	bne.n	8001424 <I2C_Slave_ISR_IT+0x38>
 80014ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80014b2:	d1d1      	bne.n	8001458 <I2C_Slave_ISR_IT+0x6c>
 80014b4:	e7b6      	b.n	8001424 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80014b6:	0729      	lsls	r1, r5, #28
 80014b8:	d505      	bpl.n	80014c6 <I2C_Slave_ISR_IT+0xda>
 80014ba:	0732      	lsls	r2, r6, #28
 80014bc:	d503      	bpl.n	80014c6 <I2C_Slave_ISR_IT+0xda>
    I2C_ITAddrCplt(hi2c, ITFlags);
 80014be:	4620      	mov	r0, r4
 80014c0:	f7ff fe37 	bl	8001132 <I2C_ITAddrCplt.isra.8>
 80014c4:	e7ae      	b.n	8001424 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80014c6:	07a8      	lsls	r0, r5, #30
 80014c8:	d5ac      	bpl.n	8001424 <I2C_Slave_ISR_IT+0x38>
 80014ca:	07b1      	lsls	r1, r6, #30
 80014cc:	d5aa      	bpl.n	8001424 <I2C_Slave_ISR_IT+0x38>
    if (hi2c->XferCount > 0U)
 80014ce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80014d0:	b292      	uxth	r2, r2
 80014d2:	b16a      	cbz	r2, 80014f0 <I2C_Slave_ISR_IT+0x104>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014d6:	6822      	ldr	r2, [r4, #0]
 80014d8:	f813 1b01 	ldrb.w	r1, [r3], #1
 80014dc:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80014de:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80014e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80014e2:	3b01      	subs	r3, #1
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80014e8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80014ea:	3b01      	subs	r3, #1
 80014ec:	8523      	strh	r3, [r4, #40]	; 0x28
 80014ee:	e799      	b.n	8001424 <I2C_Slave_ISR_IT+0x38>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80014f0:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 80014f4:	d0b0      	beq.n	8001458 <I2C_Slave_ISR_IT+0x6c>
 80014f6:	e795      	b.n	8001424 <I2C_Slave_ISR_IT+0x38>
  __HAL_LOCK(hi2c);
 80014f8:	2002      	movs	r0, #2
}
 80014fa:	bd70      	pop	{r4, r5, r6, pc}

080014fc <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80014fc:	6803      	ldr	r3, [r0, #0]
 80014fe:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001500:	681a      	ldr	r2, [r3, #0]
{
 8001502:	b410      	push	{r4}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001504:	05cc      	lsls	r4, r1, #23
 8001506:	d508      	bpl.n	800151a <HAL_I2C_ER_IRQHandler+0x1e>
 8001508:	0614      	lsls	r4, r2, #24
 800150a:	d506      	bpl.n	800151a <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800150c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800150e:	f044 0401 	orr.w	r4, r4, #1
 8001512:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001514:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001518:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800151a:	054c      	lsls	r4, r1, #21
 800151c:	d508      	bpl.n	8001530 <HAL_I2C_ER_IRQHandler+0x34>
 800151e:	0614      	lsls	r4, r2, #24
 8001520:	d506      	bpl.n	8001530 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001522:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001524:	f044 0408 	orr.w	r4, r4, #8
 8001528:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800152a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800152e:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001530:	0589      	lsls	r1, r1, #22
 8001532:	d508      	bpl.n	8001546 <HAL_I2C_ER_IRQHandler+0x4a>
 8001534:	0612      	lsls	r2, r2, #24
 8001536:	d506      	bpl.n	8001546 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001538:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800153a:	f042 0202 	orr.w	r2, r2, #2
 800153e:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001540:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001544:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8001546:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001548:	f011 0f0b 	tst.w	r1, #11
 800154c:	d003      	beq.n	8001556 <HAL_I2C_ER_IRQHandler+0x5a>
}
 800154e:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 8001552:	f7ff be67 	b.w	8001224 <I2C_ITError>
}
 8001556:	f85d 4b04 	ldr.w	r4, [sp], #4
 800155a:	4770      	bx	lr

0800155c <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800155c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 800155e:	6b82      	ldr	r2, [r0, #56]	; 0x38
{
 8001560:	b508      	push	{r3, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001562:	2300      	movs	r3, #0
 8001564:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001566:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001568:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800156a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800156e:	2b60      	cmp	r3, #96	; 0x60
 8001570:	d105      	bne.n	800157e <I2C_DMAAbort+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 8001572:	2320      	movs	r3, #32
 8001574:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8001578:	f7ff fe53 	bl	8001222 <HAL_I2C_AbortCpltCallback>
 800157c:	bd08      	pop	{r3, pc}
    HAL_I2C_ErrorCallback(hi2c);
 800157e:	f7ff fe4f 	bl	8001220 <HAL_I2C_ErrorCallback>
 8001582:	bd08      	pop	{r3, pc}

08001584 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001584:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	2a20      	cmp	r2, #32
{
 800158c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800158e:	d11d      	bne.n	80015cc <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001590:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001594:	2b01      	cmp	r3, #1
 8001596:	d019      	beq.n	80015cc <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001598:	2324      	movs	r3, #36	; 0x24
 800159a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800159e:	6803      	ldr	r3, [r0, #0]
 80015a0:	681c      	ldr	r4, [r3, #0]
 80015a2:	f024 0401 	bic.w	r4, r4, #1
 80015a6:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80015a8:	681c      	ldr	r4, [r3, #0]
 80015aa:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80015ae:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80015b0:	681c      	ldr	r4, [r3, #0]
 80015b2:	4321      	orrs	r1, r4
 80015b4:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015b6:	6819      	ldr	r1, [r3, #0]
 80015b8:	f041 0101 	orr.w	r1, r1, #1
 80015bc:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015be:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80015c0:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80015c4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80015c8:	4618      	mov	r0, r3
 80015ca:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80015cc:	2002      	movs	r0, #2
  }
}
 80015ce:	bd10      	pop	{r4, pc}

080015d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80015d0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015d2:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80015d6:	b2e4      	uxtb	r4, r4
 80015d8:	2c20      	cmp	r4, #32
 80015da:	d11c      	bne.n	8001616 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015dc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d018      	beq.n	8001616 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015e4:	2324      	movs	r3, #36	; 0x24
 80015e6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015ea:	6803      	ldr	r3, [r0, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	f022 0201 	bic.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80015f4:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80015f6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80015fa:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80015fe:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	f042 0201 	orr.w	r2, r2, #1
 8001606:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001608:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800160a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800160e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001612:	4618      	mov	r0, r3
 8001614:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001616:	2002      	movs	r0, #2
  }
}
 8001618:	bd10      	pop	{r4, pc}
	...

0800161c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800161c:	4b02      	ldr	r3, [pc, #8]	; (8001628 <HAL_PWREx_GetVoltageRange+0xc>)
 800161e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001620:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40007000 	.word	0x40007000

0800162c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800162c:	4b17      	ldr	r3, [pc, #92]	; (800168c <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800162e:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001630:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001634:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001638:	d11c      	bne.n	8001674 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800163a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800163e:	d015      	beq.n	800166c <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800164a:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800164c:	4a10      	ldr	r2, [pc, #64]	; (8001690 <HAL_PWREx_ControlVoltageScaling+0x64>)
 800164e:	6811      	ldr	r1, [r2, #0]
 8001650:	2232      	movs	r2, #50	; 0x32
 8001652:	434a      	muls	r2, r1
 8001654:	490f      	ldr	r1, [pc, #60]	; (8001694 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001656:	fbb2 f2f1 	udiv	r2, r2, r1
 800165a:	4619      	mov	r1, r3
 800165c:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800165e:	6958      	ldr	r0, [r3, #20]
 8001660:	0540      	lsls	r0, r0, #21
 8001662:	d500      	bpl.n	8001666 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8001664:	b922      	cbnz	r2, 8001670 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001666:	694b      	ldr	r3, [r1, #20]
 8001668:	055b      	lsls	r3, r3, #21
 800166a:	d40d      	bmi.n	8001688 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800166c:	2000      	movs	r0, #0
 800166e:	4770      	bx	lr
        wait_loop_index--;
 8001670:	3a01      	subs	r2, #1
 8001672:	e7f4      	b.n	800165e <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001674:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001678:	bf1f      	itttt	ne
 800167a:	681a      	ldrne	r2, [r3, #0]
 800167c:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001680:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001684:	601a      	strne	r2, [r3, #0]
 8001686:	e7f1      	b.n	800166c <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8001688:	2003      	movs	r0, #3
}
 800168a:	4770      	bx	lr
 800168c:	40007000 	.word	0x40007000
 8001690:	20000000 	.word	0x20000000
 8001694:	000f4240 	.word	0x000f4240

08001698 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001698:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800169a:	4d1e      	ldr	r5, [pc, #120]	; (8001714 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800169c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800169e:	00da      	lsls	r2, r3, #3
{
 80016a0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80016a2:	d518      	bpl.n	80016d6 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80016a4:	f7ff ffba 	bl	800161c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016a8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80016ac:	d123      	bne.n	80016f6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80016ae:	2c80      	cmp	r4, #128	; 0x80
 80016b0:	d929      	bls.n	8001706 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80016b2:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80016b4:	bf8c      	ite	hi
 80016b6:	2002      	movhi	r0, #2
 80016b8:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80016ba:	4a17      	ldr	r2, [pc, #92]	; (8001718 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80016bc:	6813      	ldr	r3, [r2, #0]
 80016be:	f023 0307 	bic.w	r3, r3, #7
 80016c2:	4303      	orrs	r3, r0
 80016c4:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80016c6:	6813      	ldr	r3, [r2, #0]
 80016c8:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80016cc:	1a18      	subs	r0, r3, r0
 80016ce:	bf18      	it	ne
 80016d0:	2001      	movne	r0, #1
 80016d2:	b003      	add	sp, #12
 80016d4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016dc:	65ab      	str	r3, [r5, #88]	; 0x58
 80016de:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80016e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80016e8:	f7ff ff98 	bl	800161c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80016ec:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80016ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016f2:	65ab      	str	r3, [r5, #88]	; 0x58
 80016f4:	e7d8      	b.n	80016a8 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80016f6:	2c80      	cmp	r4, #128	; 0x80
 80016f8:	d807      	bhi.n	800170a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80016fa:	d008      	beq.n	800170e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80016fc:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001700:	4258      	negs	r0, r3
 8001702:	4158      	adcs	r0, r3
 8001704:	e7d9      	b.n	80016ba <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001706:	2000      	movs	r0, #0
 8001708:	e7d7      	b.n	80016ba <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800170a:	2003      	movs	r0, #3
 800170c:	e7d5      	b.n	80016ba <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800170e:	2002      	movs	r0, #2
 8001710:	e7d3      	b.n	80016ba <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001712:	bf00      	nop
 8001714:	40021000 	.word	0x40021000
 8001718:	40022000 	.word	0x40022000

0800171c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800171c:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800171e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001720:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001722:	f012 020c 	ands.w	r2, r2, #12
 8001726:	d005      	beq.n	8001734 <HAL_RCC_GetSysClockFreq+0x18>
 8001728:	2a0c      	cmp	r2, #12
 800172a:	d115      	bne.n	8001758 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800172c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001730:	2901      	cmp	r1, #1
 8001732:	d118      	bne.n	8001766 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001734:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001736:	4820      	ldr	r0, [pc, #128]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001738:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800173a:	bf55      	itete	pl
 800173c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001740:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001742:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001746:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800174a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800174e:	b382      	cbz	r2, 80017b2 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001750:	2a0c      	cmp	r2, #12
 8001752:	d009      	beq.n	8001768 <HAL_RCC_GetSysClockFreq+0x4c>
 8001754:	2000      	movs	r0, #0
  return sysclockfreq;
 8001756:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001758:	2a04      	cmp	r2, #4
 800175a:	d029      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0x94>
 800175c:	2a08      	cmp	r2, #8
 800175e:	4817      	ldr	r0, [pc, #92]	; (80017bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001760:	bf18      	it	ne
 8001762:	2000      	movne	r0, #0
 8001764:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001766:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001768:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800176a:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800176c:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001770:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8001774:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001776:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 800177a:	d005      	beq.n	8001788 <HAL_RCC_GetSysClockFreq+0x6c>
 800177c:	2903      	cmp	r1, #3
 800177e:	d012      	beq.n	80017a6 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001780:	68d9      	ldr	r1, [r3, #12]
 8001782:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001786:	e003      	b.n	8001790 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001788:	68d9      	ldr	r1, [r3, #12]
 800178a:	480d      	ldr	r0, [pc, #52]	; (80017c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800178c:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001790:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001792:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001796:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800179a:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800179c:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800179e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80017a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80017a4:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017a6:	68d9      	ldr	r1, [r3, #12]
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <HAL_RCC_GetSysClockFreq+0xa0>)
 80017aa:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80017ae:	e7ef      	b.n	8001790 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 80017b0:	4803      	ldr	r0, [pc, #12]	; (80017c0 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 80017b2:	4770      	bx	lr
 80017b4:	40021000 	.word	0x40021000
 80017b8:	080034ec 	.word	0x080034ec
 80017bc:	007a1200 	.word	0x007a1200
 80017c0:	00f42400 	.word	0x00f42400

080017c4 <HAL_RCC_OscConfig>:
{
 80017c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 80017c8:	4605      	mov	r5, r0
 80017ca:	b918      	cbnz	r0, 80017d4 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80017cc:	2001      	movs	r0, #1
}
 80017ce:	b003      	add	sp, #12
 80017d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017d4:	4ca5      	ldr	r4, [pc, #660]	; (8001a6c <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017d6:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017d8:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017da:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017dc:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017de:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e2:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017e6:	d53c      	bpl.n	8001862 <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017e8:	b11e      	cbz	r6, 80017f2 <HAL_RCC_OscConfig+0x2e>
 80017ea:	2e0c      	cmp	r6, #12
 80017ec:	d163      	bne.n	80018b6 <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80017ee:	2f01      	cmp	r7, #1
 80017f0:	d161      	bne.n	80018b6 <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017f2:	6823      	ldr	r3, [r4, #0]
 80017f4:	0798      	lsls	r0, r3, #30
 80017f6:	d502      	bpl.n	80017fe <HAL_RCC_OscConfig+0x3a>
 80017f8:	69ab      	ldr	r3, [r5, #24]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0e6      	beq.n	80017cc <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017fe:	6823      	ldr	r3, [r4, #0]
 8001800:	6a28      	ldr	r0, [r5, #32]
 8001802:	0719      	lsls	r1, r3, #28
 8001804:	bf56      	itet	pl
 8001806:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 800180a:	6823      	ldrmi	r3, [r4, #0]
 800180c:	091b      	lsrpl	r3, r3, #4
 800180e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001812:	4283      	cmp	r3, r0
 8001814:	d23a      	bcs.n	800188c <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001816:	f7ff ff3f 	bl	8001698 <RCC_SetFlashLatencyFromMSIRange>
 800181a:	2800      	cmp	r0, #0
 800181c:	d1d6      	bne.n	80017cc <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800181e:	6823      	ldr	r3, [r4, #0]
 8001820:	f043 0308 	orr.w	r3, r3, #8
 8001824:	6023      	str	r3, [r4, #0]
 8001826:	6823      	ldr	r3, [r4, #0]
 8001828:	6a2a      	ldr	r2, [r5, #32]
 800182a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800182e:	4313      	orrs	r3, r2
 8001830:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001832:	6863      	ldr	r3, [r4, #4]
 8001834:	69ea      	ldr	r2, [r5, #28]
 8001836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800183a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800183e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001840:	f7ff ff6c 	bl	800171c <HAL_RCC_GetSysClockFreq>
 8001844:	68a3      	ldr	r3, [r4, #8]
 8001846:	4a8a      	ldr	r2, [pc, #552]	; (8001a70 <HAL_RCC_OscConfig+0x2ac>)
 8001848:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800184c:	5cd3      	ldrb	r3, [r2, r3]
 800184e:	f003 031f 	and.w	r3, r3, #31
 8001852:	40d8      	lsrs	r0, r3
 8001854:	4b87      	ldr	r3, [pc, #540]	; (8001a74 <HAL_RCC_OscConfig+0x2b0>)
 8001856:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001858:	2000      	movs	r0, #0
 800185a:	f001 fd43 	bl	80032e4 <HAL_InitTick>
        if(status != HAL_OK)
 800185e:	2800      	cmp	r0, #0
 8001860:	d1b5      	bne.n	80017ce <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001862:	682b      	ldr	r3, [r5, #0]
 8001864:	07d8      	lsls	r0, r3, #31
 8001866:	d45d      	bmi.n	8001924 <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001868:	682b      	ldr	r3, [r5, #0]
 800186a:	0799      	lsls	r1, r3, #30
 800186c:	f100 809c 	bmi.w	80019a8 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001870:	682b      	ldr	r3, [r5, #0]
 8001872:	0718      	lsls	r0, r3, #28
 8001874:	f100 80d0 	bmi.w	8001a18 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001878:	682b      	ldr	r3, [r5, #0]
 800187a:	0759      	lsls	r1, r3, #29
 800187c:	f100 80fc 	bmi.w	8001a78 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001880:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001882:	2b00      	cmp	r3, #0
 8001884:	f040 8165 	bne.w	8001b52 <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 8001888:	2000      	movs	r0, #0
 800188a:	e7a0      	b.n	80017ce <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	f043 0308 	orr.w	r3, r3, #8
 8001892:	6023      	str	r3, [r4, #0]
 8001894:	6823      	ldr	r3, [r4, #0]
 8001896:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800189a:	4303      	orrs	r3, r0
 800189c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800189e:	6863      	ldr	r3, [r4, #4]
 80018a0:	69ea      	ldr	r2, [r5, #28]
 80018a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80018a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80018aa:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018ac:	f7ff fef4 	bl	8001698 <RCC_SetFlashLatencyFromMSIRange>
 80018b0:	2800      	cmp	r0, #0
 80018b2:	d0c5      	beq.n	8001840 <HAL_RCC_OscConfig+0x7c>
 80018b4:	e78a      	b.n	80017cc <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018b6:	69ab      	ldr	r3, [r5, #24]
 80018b8:	b31b      	cbz	r3, 8001902 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 80018ba:	6823      	ldr	r3, [r4, #0]
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80018c2:	f7fe fe21 	bl	8000508 <HAL_GetTick>
 80018c6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018c8:	6823      	ldr	r3, [r4, #0]
 80018ca:	079a      	lsls	r2, r3, #30
 80018cc:	d511      	bpl.n	80018f2 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ce:	6823      	ldr	r3, [r4, #0]
 80018d0:	f043 0308 	orr.w	r3, r3, #8
 80018d4:	6023      	str	r3, [r4, #0]
 80018d6:	6823      	ldr	r3, [r4, #0]
 80018d8:	6a2a      	ldr	r2, [r5, #32]
 80018da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018de:	4313      	orrs	r3, r2
 80018e0:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018e2:	6863      	ldr	r3, [r4, #4]
 80018e4:	69ea      	ldr	r2, [r5, #28]
 80018e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80018ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80018ee:	6063      	str	r3, [r4, #4]
 80018f0:	e7b7      	b.n	8001862 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018f2:	f7fe fe09 	bl	8000508 <HAL_GetTick>
 80018f6:	eba0 0008 	sub.w	r0, r0, r8
 80018fa:	2802      	cmp	r0, #2
 80018fc:	d9e4      	bls.n	80018c8 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 80018fe:	2003      	movs	r0, #3
 8001900:	e765      	b.n	80017ce <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8001902:	6823      	ldr	r3, [r4, #0]
 8001904:	f023 0301 	bic.w	r3, r3, #1
 8001908:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800190a:	f7fe fdfd 	bl	8000508 <HAL_GetTick>
 800190e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001910:	6823      	ldr	r3, [r4, #0]
 8001912:	079b      	lsls	r3, r3, #30
 8001914:	d5a5      	bpl.n	8001862 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001916:	f7fe fdf7 	bl	8000508 <HAL_GetTick>
 800191a:	eba0 0008 	sub.w	r0, r0, r8
 800191e:	2802      	cmp	r0, #2
 8001920:	d9f6      	bls.n	8001910 <HAL_RCC_OscConfig+0x14c>
 8001922:	e7ec      	b.n	80018fe <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001924:	2e08      	cmp	r6, #8
 8001926:	d003      	beq.n	8001930 <HAL_RCC_OscConfig+0x16c>
 8001928:	2e0c      	cmp	r6, #12
 800192a:	d108      	bne.n	800193e <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 800192c:	2f03      	cmp	r7, #3
 800192e:	d106      	bne.n	800193e <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001930:	6823      	ldr	r3, [r4, #0]
 8001932:	039a      	lsls	r2, r3, #14
 8001934:	d598      	bpl.n	8001868 <HAL_RCC_OscConfig+0xa4>
 8001936:	686b      	ldr	r3, [r5, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d195      	bne.n	8001868 <HAL_RCC_OscConfig+0xa4>
 800193c:	e746      	b.n	80017cc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800193e:	686b      	ldr	r3, [r5, #4]
 8001940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001944:	d110      	bne.n	8001968 <HAL_RCC_OscConfig+0x1a4>
 8001946:	6823      	ldr	r3, [r4, #0]
 8001948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800194e:	f7fe fddb 	bl	8000508 <HAL_GetTick>
 8001952:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001954:	6823      	ldr	r3, [r4, #0]
 8001956:	039b      	lsls	r3, r3, #14
 8001958:	d486      	bmi.n	8001868 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800195a:	f7fe fdd5 	bl	8000508 <HAL_GetTick>
 800195e:	eba0 0008 	sub.w	r0, r0, r8
 8001962:	2864      	cmp	r0, #100	; 0x64
 8001964:	d9f6      	bls.n	8001954 <HAL_RCC_OscConfig+0x190>
 8001966:	e7ca      	b.n	80018fe <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800196c:	d104      	bne.n	8001978 <HAL_RCC_OscConfig+0x1b4>
 800196e:	6823      	ldr	r3, [r4, #0]
 8001970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001974:	6023      	str	r3, [r4, #0]
 8001976:	e7e6      	b.n	8001946 <HAL_RCC_OscConfig+0x182>
 8001978:	6822      	ldr	r2, [r4, #0]
 800197a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800197e:	6022      	str	r2, [r4, #0]
 8001980:	6822      	ldr	r2, [r4, #0]
 8001982:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001986:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1e0      	bne.n	800194e <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 800198c:	f7fe fdbc 	bl	8000508 <HAL_GetTick>
 8001990:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001992:	6823      	ldr	r3, [r4, #0]
 8001994:	0398      	lsls	r0, r3, #14
 8001996:	f57f af67 	bpl.w	8001868 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800199a:	f7fe fdb5 	bl	8000508 <HAL_GetTick>
 800199e:	eba0 0008 	sub.w	r0, r0, r8
 80019a2:	2864      	cmp	r0, #100	; 0x64
 80019a4:	d9f5      	bls.n	8001992 <HAL_RCC_OscConfig+0x1ce>
 80019a6:	e7aa      	b.n	80018fe <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019a8:	2e04      	cmp	r6, #4
 80019aa:	d003      	beq.n	80019b4 <HAL_RCC_OscConfig+0x1f0>
 80019ac:	2e0c      	cmp	r6, #12
 80019ae:	d110      	bne.n	80019d2 <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 80019b0:	2f02      	cmp	r7, #2
 80019b2:	d10e      	bne.n	80019d2 <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	0559      	lsls	r1, r3, #21
 80019b8:	d503      	bpl.n	80019c2 <HAL_RCC_OscConfig+0x1fe>
 80019ba:	68eb      	ldr	r3, [r5, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f43f af05 	beq.w	80017cc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c2:	6863      	ldr	r3, [r4, #4]
 80019c4:	692a      	ldr	r2, [r5, #16]
 80019c6:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80019ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80019ce:	6063      	str	r3, [r4, #4]
 80019d0:	e74e      	b.n	8001870 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019d2:	68eb      	ldr	r3, [r5, #12]
 80019d4:	b17b      	cbz	r3, 80019f6 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 80019d6:	6823      	ldr	r3, [r4, #0]
 80019d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019dc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80019de:	f7fe fd93 	bl	8000508 <HAL_GetTick>
 80019e2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019e4:	6823      	ldr	r3, [r4, #0]
 80019e6:	055a      	lsls	r2, r3, #21
 80019e8:	d4eb      	bmi.n	80019c2 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ea:	f7fe fd8d 	bl	8000508 <HAL_GetTick>
 80019ee:	1bc0      	subs	r0, r0, r7
 80019f0:	2802      	cmp	r0, #2
 80019f2:	d9f7      	bls.n	80019e4 <HAL_RCC_OscConfig+0x220>
 80019f4:	e783      	b.n	80018fe <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019fc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80019fe:	f7fe fd83 	bl	8000508 <HAL_GetTick>
 8001a02:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a04:	6823      	ldr	r3, [r4, #0]
 8001a06:	055b      	lsls	r3, r3, #21
 8001a08:	f57f af32 	bpl.w	8001870 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a0c:	f7fe fd7c 	bl	8000508 <HAL_GetTick>
 8001a10:	1bc0      	subs	r0, r0, r7
 8001a12:	2802      	cmp	r0, #2
 8001a14:	d9f6      	bls.n	8001a04 <HAL_RCC_OscConfig+0x240>
 8001a16:	e772      	b.n	80018fe <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a18:	696b      	ldr	r3, [r5, #20]
 8001a1a:	b19b      	cbz	r3, 8001a44 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8001a1c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001a28:	f7fe fd6e 	bl	8000508 <HAL_GetTick>
 8001a2c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a2e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001a32:	079a      	lsls	r2, r3, #30
 8001a34:	f53f af20 	bmi.w	8001878 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a38:	f7fe fd66 	bl	8000508 <HAL_GetTick>
 8001a3c:	1bc0      	subs	r0, r0, r7
 8001a3e:	2802      	cmp	r0, #2
 8001a40:	d9f5      	bls.n	8001a2e <HAL_RCC_OscConfig+0x26a>
 8001a42:	e75c      	b.n	80018fe <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 8001a44:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001a50:	f7fe fd5a 	bl	8000508 <HAL_GetTick>
 8001a54:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a56:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001a5a:	079b      	lsls	r3, r3, #30
 8001a5c:	f57f af0c 	bpl.w	8001878 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a60:	f7fe fd52 	bl	8000508 <HAL_GetTick>
 8001a64:	1bc0      	subs	r0, r0, r7
 8001a66:	2802      	cmp	r0, #2
 8001a68:	d9f5      	bls.n	8001a56 <HAL_RCC_OscConfig+0x292>
 8001a6a:	e748      	b.n	80018fe <HAL_RCC_OscConfig+0x13a>
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	080034d1 	.word	0x080034d1
 8001a74:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001a7a:	00d8      	lsls	r0, r3, #3
 8001a7c:	d429      	bmi.n	8001ad2 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a84:	65a3      	str	r3, [r4, #88]	; 0x58
 8001a86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	9301      	str	r3, [sp, #4]
 8001a8e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a90:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a94:	4f5d      	ldr	r7, [pc, #372]	; (8001c0c <HAL_RCC_OscConfig+0x448>)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	05d9      	lsls	r1, r3, #23
 8001a9a:	d51d      	bpl.n	8001ad8 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9c:	68ab      	ldr	r3, [r5, #8]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d12b      	bne.n	8001afa <HAL_RCC_OscConfig+0x336>
 8001aa2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001aae:	f7fe fd2b 	bl	8000508 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab2:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001ab6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ab8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001abc:	079b      	lsls	r3, r3, #30
 8001abe:	d542      	bpl.n	8001b46 <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 8001ac0:	f1b8 0f00 	cmp.w	r8, #0
 8001ac4:	f43f aedc 	beq.w	8001880 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ace:	65a3      	str	r3, [r4, #88]	; 0x58
 8001ad0:	e6d6      	b.n	8001880 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 8001ad2:	f04f 0800 	mov.w	r8, #0
 8001ad6:	e7dd      	b.n	8001a94 <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ade:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001ae0:	f7fe fd12 	bl	8000508 <HAL_GetTick>
 8001ae4:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	05da      	lsls	r2, r3, #23
 8001aea:	d4d7      	bmi.n	8001a9c <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aec:	f7fe fd0c 	bl	8000508 <HAL_GetTick>
 8001af0:	eba0 0009 	sub.w	r0, r0, r9
 8001af4:	2802      	cmp	r0, #2
 8001af6:	d9f6      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x322>
 8001af8:	e701      	b.n	80018fe <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001afa:	2b05      	cmp	r3, #5
 8001afc:	d106      	bne.n	8001b0c <HAL_RCC_OscConfig+0x348>
 8001afe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001b02:	f043 0304 	orr.w	r3, r3, #4
 8001b06:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001b0a:	e7ca      	b.n	8001aa2 <HAL_RCC_OscConfig+0x2de>
 8001b0c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001b10:	f022 0201 	bic.w	r2, r2, #1
 8001b14:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001b18:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001b1c:	f022 0204 	bic.w	r2, r2, #4
 8001b20:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1c2      	bne.n	8001aae <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 8001b28:	f7fe fcee 	bl	8000508 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b30:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b32:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001b36:	0798      	lsls	r0, r3, #30
 8001b38:	d5c2      	bpl.n	8001ac0 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3a:	f7fe fce5 	bl	8000508 <HAL_GetTick>
 8001b3e:	1bc0      	subs	r0, r0, r7
 8001b40:	4548      	cmp	r0, r9
 8001b42:	d9f6      	bls.n	8001b32 <HAL_RCC_OscConfig+0x36e>
 8001b44:	e6db      	b.n	80018fe <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b46:	f7fe fcdf 	bl	8000508 <HAL_GetTick>
 8001b4a:	1bc0      	subs	r0, r0, r7
 8001b4c:	4548      	cmp	r0, r9
 8001b4e:	d9b3      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x2f4>
 8001b50:	e6d5      	b.n	80018fe <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b52:	2e0c      	cmp	r6, #12
 8001b54:	f43f ae3a 	beq.w	80017cc <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b58:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8001b5a:	6823      	ldr	r3, [r4, #0]
 8001b5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b60:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b62:	d137      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 8001b64:	f7fe fcd0 	bl	8000508 <HAL_GetTick>
 8001b68:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	0199      	lsls	r1, r3, #6
 8001b6e:	d42b      	bmi.n	8001bc8 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b70:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001b72:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001b74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b78:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001b7a:	3a01      	subs	r2, #1
 8001b7c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001b80:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001b82:	0912      	lsrs	r2, r2, #4
 8001b84:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001b88:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001b8a:	0852      	lsrs	r2, r2, #1
 8001b8c:	3a01      	subs	r2, #1
 8001b8e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001b92:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001b94:	0852      	lsrs	r2, r2, #1
 8001b96:	3a01      	subs	r2, #1
 8001b98:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001b9c:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001b9e:	6823      	ldr	r3, [r4, #0]
 8001ba0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ba4:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ba6:	68e3      	ldr	r3, [r4, #12]
 8001ba8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bac:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001bae:	f7fe fcab 	bl	8000508 <HAL_GetTick>
 8001bb2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb4:	6823      	ldr	r3, [r4, #0]
 8001bb6:	019a      	lsls	r2, r3, #6
 8001bb8:	f53f ae66 	bmi.w	8001888 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bbc:	f7fe fca4 	bl	8000508 <HAL_GetTick>
 8001bc0:	1b40      	subs	r0, r0, r5
 8001bc2:	2802      	cmp	r0, #2
 8001bc4:	d9f6      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x3f0>
 8001bc6:	e69a      	b.n	80018fe <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7fe fc9e 	bl	8000508 <HAL_GetTick>
 8001bcc:	1b80      	subs	r0, r0, r6
 8001bce:	2802      	cmp	r0, #2
 8001bd0:	d9cb      	bls.n	8001b6a <HAL_RCC_OscConfig+0x3a6>
 8001bd2:	e694      	b.n	80018fe <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001bd4:	6823      	ldr	r3, [r4, #0]
 8001bd6:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001bda:	bf02      	ittt	eq
 8001bdc:	68e3      	ldreq	r3, [r4, #12]
 8001bde:	f023 0303 	biceq.w	r3, r3, #3
 8001be2:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001be4:	68e3      	ldr	r3, [r4, #12]
 8001be6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bee:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001bf0:	f7fe fc8a 	bl	8000508 <HAL_GetTick>
 8001bf4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	019b      	lsls	r3, r3, #6
 8001bfa:	f57f ae45 	bpl.w	8001888 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfe:	f7fe fc83 	bl	8000508 <HAL_GetTick>
 8001c02:	1b40      	subs	r0, r0, r5
 8001c04:	2802      	cmp	r0, #2
 8001c06:	d9f6      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x432>
 8001c08:	e679      	b.n	80018fe <HAL_RCC_OscConfig+0x13a>
 8001c0a:	bf00      	nop
 8001c0c:	40007000 	.word	0x40007000

08001c10 <HAL_RCC_ClockConfig>:
{
 8001c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c14:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8001c16:	4604      	mov	r4, r0
 8001c18:	b910      	cbnz	r0, 8001c20 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c20:	4a40      	ldr	r2, [pc, #256]	; (8001d24 <HAL_RCC_ClockConfig+0x114>)
 8001c22:	6813      	ldr	r3, [r2, #0]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	428b      	cmp	r3, r1
 8001c2a:	d329      	bcc.n	8001c80 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2c:	6823      	ldr	r3, [r4, #0]
 8001c2e:	07d9      	lsls	r1, r3, #31
 8001c30:	d431      	bmi.n	8001c96 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c32:	6821      	ldr	r1, [r4, #0]
 8001c34:	078a      	lsls	r2, r1, #30
 8001c36:	d45b      	bmi.n	8001cf0 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c38:	4a3a      	ldr	r2, [pc, #232]	; (8001d24 <HAL_RCC_ClockConfig+0x114>)
 8001c3a:	6813      	ldr	r3, [r2, #0]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	429e      	cmp	r6, r3
 8001c42:	d35d      	bcc.n	8001d00 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c44:	f011 0f04 	tst.w	r1, #4
 8001c48:	4d37      	ldr	r5, [pc, #220]	; (8001d28 <HAL_RCC_ClockConfig+0x118>)
 8001c4a:	d164      	bne.n	8001d16 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4c:	070b      	lsls	r3, r1, #28
 8001c4e:	d506      	bpl.n	8001c5e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c50:	68ab      	ldr	r3, [r5, #8]
 8001c52:	6922      	ldr	r2, [r4, #16]
 8001c54:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001c58:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c5c:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c5e:	f7ff fd5d 	bl	800171c <HAL_RCC_GetSysClockFreq>
 8001c62:	68ab      	ldr	r3, [r5, #8]
 8001c64:	4a31      	ldr	r2, [pc, #196]	; (8001d2c <HAL_RCC_ClockConfig+0x11c>)
 8001c66:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c6e:	5cd3      	ldrb	r3, [r2, r3]
 8001c70:	f003 031f 	and.w	r3, r3, #31
 8001c74:	40d8      	lsrs	r0, r3
 8001c76:	4b2e      	ldr	r3, [pc, #184]	; (8001d30 <HAL_RCC_ClockConfig+0x120>)
 8001c78:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f001 bb32 	b.w	80032e4 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c80:	6813      	ldr	r3, [r2, #0]
 8001c82:	f023 0307 	bic.w	r3, r3, #7
 8001c86:	430b      	orrs	r3, r1
 8001c88:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8a:	6813      	ldr	r3, [r2, #0]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	4299      	cmp	r1, r3
 8001c92:	d1c2      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xa>
 8001c94:	e7ca      	b.n	8001c2c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c96:	6862      	ldr	r2, [r4, #4]
 8001c98:	4d23      	ldr	r5, [pc, #140]	; (8001d28 <HAL_RCC_ClockConfig+0x118>)
 8001c9a:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c9e:	d11b      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca4:	d0b9      	beq.n	8001c1a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ca6:	68ab      	ldr	r3, [r5, #8]
 8001ca8:	f023 0303 	bic.w	r3, r3, #3
 8001cac:	4313      	orrs	r3, r2
 8001cae:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8001cb0:	f7fe fc2a 	bl	8000508 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001cb8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cba:	68ab      	ldr	r3, [r5, #8]
 8001cbc:	6862      	ldr	r2, [r4, #4]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001cc6:	d0b4      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc8:	f7fe fc1e 	bl	8000508 <HAL_GetTick>
 8001ccc:	1bc0      	subs	r0, r0, r7
 8001cce:	4540      	cmp	r0, r8
 8001cd0:	d9f3      	bls.n	8001cba <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8001cd2:	2003      	movs	r0, #3
}
 8001cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd8:	2a02      	cmp	r2, #2
 8001cda:	d102      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cdc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001ce0:	e7e0      	b.n	8001ca4 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ce2:	b912      	cbnz	r2, 8001cea <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ce4:	f013 0f02 	tst.w	r3, #2
 8001ce8:	e7dc      	b.n	8001ca4 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cea:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001cee:	e7d9      	b.n	8001ca4 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <HAL_RCC_ClockConfig+0x118>)
 8001cf2:	68a0      	ldr	r0, [r4, #8]
 8001cf4:	6893      	ldr	r3, [r2, #8]
 8001cf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cfa:	4303      	orrs	r3, r0
 8001cfc:	6093      	str	r3, [r2, #8]
 8001cfe:	e79b      	b.n	8001c38 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d00:	6813      	ldr	r3, [r2, #0]
 8001d02:	f023 0307 	bic.w	r3, r3, #7
 8001d06:	4333      	orrs	r3, r6
 8001d08:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0a:	6813      	ldr	r3, [r2, #0]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	429e      	cmp	r6, r3
 8001d12:	d182      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xa>
 8001d14:	e796      	b.n	8001c44 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d16:	68ab      	ldr	r3, [r5, #8]
 8001d18:	68e2      	ldr	r2, [r4, #12]
 8001d1a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	60ab      	str	r3, [r5, #8]
 8001d22:	e793      	b.n	8001c4c <HAL_RCC_ClockConfig+0x3c>
 8001d24:	40022000 	.word	0x40022000
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	080034d1 	.word	0x080034d1
 8001d30:	20000000 	.word	0x20000000

08001d34 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001d36:	4a06      	ldr	r2, [pc, #24]	; (8001d50 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001d3e:	5cd3      	ldrb	r3, [r2, r3]
 8001d40:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d42:	6810      	ldr	r0, [r2, #0]
 8001d44:	f003 031f 	and.w	r3, r3, #31
}
 8001d48:	40d8      	lsrs	r0, r3
 8001d4a:	4770      	bx	lr
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	080034e1 	.word	0x080034e1
 8001d54:	20000000 	.word	0x20000000

08001d58 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001d5a:	4a06      	ldr	r2, [pc, #24]	; (8001d74 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001d62:	5cd3      	ldrb	r3, [r2, r3]
 8001d64:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d66:	6810      	ldr	r0, [r2, #0]
 8001d68:	f003 031f 	and.w	r3, r3, #31
}
 8001d6c:	40d8      	lsrs	r0, r3
 8001d6e:	4770      	bx	lr
 8001d70:	40021000 	.word	0x40021000
 8001d74:	080034e1 	.word	0x080034e1
 8001d78:	20000000 	.word	0x20000000

08001d7c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d7c:	230f      	movs	r3, #15
 8001d7e:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_RCC_GetClockConfig+0x34>)
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	f002 0203 	and.w	r2, r2, #3
 8001d88:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001d90:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001d98:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	08db      	lsrs	r3, r3, #3
 8001d9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001da2:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001da4:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <HAL_RCC_GetClockConfig+0x38>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	600b      	str	r3, [r1, #0]
 8001dae:	4770      	bx	lr
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40022000 	.word	0x40022000

08001db8 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8001db8:	4a02      	ldr	r2, [pc, #8]	; (8001dc4 <HAL_RCC_EnableCSS+0xc>)
 8001dba:	6813      	ldr	r3, [r2, #0]
 8001dbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	4770      	bx	lr
 8001dc4:	40021000 	.word	0x40021000

08001dc8 <HAL_RCC_CSSCallback>:
{
 8001dc8:	4770      	bx	lr
	...

08001dcc <HAL_RCC_NMI_IRQHandler>:
{
 8001dcc:	b510      	push	{r4, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001dce:	4c05      	ldr	r4, [pc, #20]	; (8001de4 <HAL_RCC_NMI_IRQHandler+0x18>)
 8001dd0:	69e3      	ldr	r3, [r4, #28]
 8001dd2:	05db      	lsls	r3, r3, #23
 8001dd4:	d504      	bpl.n	8001de0 <HAL_RCC_NMI_IRQHandler+0x14>
    HAL_RCC_CSSCallback();
 8001dd6:	f7ff fff7 	bl	8001dc8 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001dda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dde:	6223      	str	r3, [r4, #32]
 8001de0:	bd10      	pop	{r4, pc}
 8001de2:	bf00      	nop
 8001de4:	40021000 	.word	0x40021000

08001de8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001dea:	4b45      	ldr	r3, [pc, #276]	; (8001f00 <RCCEx_PLLSAI1_Config+0x118>)
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	f012 0f03 	tst.w	r2, #3
{
 8001df2:	4605      	mov	r5, r0
 8001df4:	460e      	mov	r6, r1
 8001df6:	461c      	mov	r4, r3
 8001df8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001dfa:	d02a      	beq.n	8001e52 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	f002 0203 	and.w	r2, r2, #3
 8001e02:	4282      	cmp	r2, r0
 8001e04:	d13c      	bne.n	8001e80 <RCCEx_PLLSAI1_Config+0x98>
       ||
 8001e06:	2a00      	cmp	r2, #0
 8001e08:	d03a      	beq.n	8001e80 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001e0a:	68db      	ldr	r3, [r3, #12]
       ||
 8001e0c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001e0e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001e12:	3301      	adds	r3, #1
       ||
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d133      	bne.n	8001e80 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001e18:	6823      	ldr	r3, [r4, #0]
 8001e1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e1e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e20:	f7fe fb72 	bl	8000508 <HAL_GetTick>
 8001e24:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001e26:	6823      	ldr	r3, [r4, #0]
 8001e28:	011a      	lsls	r2, r3, #4
 8001e2a:	d432      	bmi.n	8001e92 <RCCEx_PLLSAI1_Config+0xaa>
 8001e2c:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001e2e:	2e00      	cmp	r6, #0
 8001e30:	d036      	beq.n	8001ea0 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001e32:	2e01      	cmp	r6, #1
 8001e34:	d150      	bne.n	8001ed8 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e36:	6922      	ldr	r2, [r4, #16]
 8001e38:	6928      	ldr	r0, [r5, #16]
 8001e3a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001e3e:	0840      	lsrs	r0, r0, #1
 8001e40:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001e44:	3801      	subs	r0, #1
 8001e46:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001e4a:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001e4e:	6122      	str	r2, [r4, #16]
 8001e50:	e032      	b.n	8001eb8 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8001e52:	2802      	cmp	r0, #2
 8001e54:	d010      	beq.n	8001e78 <RCCEx_PLLSAI1_Config+0x90>
 8001e56:	2803      	cmp	r0, #3
 8001e58:	d014      	beq.n	8001e84 <RCCEx_PLLSAI1_Config+0x9c>
 8001e5a:	2801      	cmp	r0, #1
 8001e5c:	d110      	bne.n	8001e80 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	079f      	lsls	r7, r3, #30
 8001e62:	d538      	bpl.n	8001ed6 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001e64:	68e3      	ldr	r3, [r4, #12]
 8001e66:	686a      	ldr	r2, [r5, #4]
 8001e68:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001e6c:	3a01      	subs	r2, #1
 8001e6e:	4318      	orrs	r0, r3
 8001e70:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001e74:	60e0      	str	r0, [r4, #12]
 8001e76:	e7cf      	b.n	8001e18 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001e7e:	d1f1      	bne.n	8001e64 <RCCEx_PLLSAI1_Config+0x7c>
 8001e80:	2001      	movs	r0, #1
 8001e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	0391      	lsls	r1, r2, #14
 8001e88:	d4ec      	bmi.n	8001e64 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001e90:	e7f5      	b.n	8001e7e <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001e92:	f7fe fb39 	bl	8000508 <HAL_GetTick>
 8001e96:	1bc0      	subs	r0, r0, r7
 8001e98:	2802      	cmp	r0, #2
 8001e9a:	d9c4      	bls.n	8001e26 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001e9c:	2003      	movs	r0, #3
 8001e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001ea0:	6921      	ldr	r1, [r4, #16]
 8001ea2:	68eb      	ldr	r3, [r5, #12]
 8001ea4:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8001ea8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001eac:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8001eb6:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001eb8:	6823      	ldr	r3, [r4, #0]
 8001eba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ebe:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec0:	f7fe fb22 	bl	8000508 <HAL_GetTick>
 8001ec4:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001ec6:	6823      	ldr	r3, [r4, #0]
 8001ec8:	011b      	lsls	r3, r3, #4
 8001eca:	d513      	bpl.n	8001ef4 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001ecc:	6923      	ldr	r3, [r4, #16]
 8001ece:	69aa      	ldr	r2, [r5, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	6123      	str	r3, [r4, #16]
 8001ed4:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001ed8:	6923      	ldr	r3, [r4, #16]
 8001eda:	6968      	ldr	r0, [r5, #20]
 8001edc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001ee0:	0840      	lsrs	r0, r0, #1
 8001ee2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001ee6:	3801      	subs	r0, #1
 8001ee8:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001eec:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001ef0:	6123      	str	r3, [r4, #16]
 8001ef2:	e7e1      	b.n	8001eb8 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001ef4:	f7fe fb08 	bl	8000508 <HAL_GetTick>
 8001ef8:	1b80      	subs	r0, r0, r6
 8001efa:	2802      	cmp	r0, #2
 8001efc:	d9e3      	bls.n	8001ec6 <RCCEx_PLLSAI1_Config+0xde>
 8001efe:	e7cd      	b.n	8001e9c <RCCEx_PLLSAI1_Config+0xb4>
 8001f00:	40021000 	.word	0x40021000

08001f04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001f06:	4b3d      	ldr	r3, [pc, #244]	; (8001ffc <RCCEx_PLLSAI2_Config+0xf8>)
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	f012 0f03 	tst.w	r2, #3
{
 8001f0e:	4605      	mov	r5, r0
 8001f10:	460e      	mov	r6, r1
 8001f12:	461c      	mov	r4, r3
 8001f14:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001f16:	d028      	beq.n	8001f6a <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	f002 0203 	and.w	r2, r2, #3
 8001f1e:	4282      	cmp	r2, r0
 8001f20:	d13a      	bne.n	8001f98 <RCCEx_PLLSAI2_Config+0x94>
       ||
 8001f22:	2a00      	cmp	r2, #0
 8001f24:	d038      	beq.n	8001f98 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001f26:	68db      	ldr	r3, [r3, #12]
       ||
 8001f28:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001f2a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001f2e:	3301      	adds	r3, #1
       ||
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d131      	bne.n	8001f98 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f3c:	f7fe fae4 	bl	8000508 <HAL_GetTick>
 8001f40:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001f42:	6823      	ldr	r3, [r4, #0]
 8001f44:	009a      	lsls	r2, r3, #2
 8001f46:	d430      	bmi.n	8001faa <RCCEx_PLLSAI2_Config+0xa6>
 8001f48:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001f4a:	2e00      	cmp	r6, #0
 8001f4c:	d034      	beq.n	8001fb8 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001f4e:	6963      	ldr	r3, [r4, #20]
 8001f50:	6929      	ldr	r1, [r5, #16]
 8001f52:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001f56:	0849      	lsrs	r1, r1, #1
 8001f58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001f5c:	3901      	subs	r1, #1
 8001f5e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001f62:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001f66:	6163      	str	r3, [r4, #20]
 8001f68:	e032      	b.n	8001fd0 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8001f6a:	2802      	cmp	r0, #2
 8001f6c:	d010      	beq.n	8001f90 <RCCEx_PLLSAI2_Config+0x8c>
 8001f6e:	2803      	cmp	r0, #3
 8001f70:	d014      	beq.n	8001f9c <RCCEx_PLLSAI2_Config+0x98>
 8001f72:	2801      	cmp	r0, #1
 8001f74:	d110      	bne.n	8001f98 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	079f      	lsls	r7, r3, #30
 8001f7a:	d538      	bpl.n	8001fee <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001f7c:	68e3      	ldr	r3, [r4, #12]
 8001f7e:	686a      	ldr	r2, [r5, #4]
 8001f80:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001f84:	3a01      	subs	r2, #1
 8001f86:	4318      	orrs	r0, r3
 8001f88:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001f8c:	60e0      	str	r0, [r4, #12]
 8001f8e:	e7d1      	b.n	8001f34 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001f96:	d1f1      	bne.n	8001f7c <RCCEx_PLLSAI2_Config+0x78>
 8001f98:	2001      	movs	r0, #1
 8001f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	0391      	lsls	r1, r2, #14
 8001fa0:	d4ec      	bmi.n	8001f7c <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001fa8:	e7f5      	b.n	8001f96 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001faa:	f7fe faad 	bl	8000508 <HAL_GetTick>
 8001fae:	1bc0      	subs	r0, r0, r7
 8001fb0:	2802      	cmp	r0, #2
 8001fb2:	d9c6      	bls.n	8001f42 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8001fb4:	2003      	movs	r0, #3
 8001fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001fb8:	6962      	ldr	r2, [r4, #20]
 8001fba:	68eb      	ldr	r3, [r5, #12]
 8001fbc:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8001fc0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001fc4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8001fce:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8001fd0:	6823      	ldr	r3, [r4, #0]
 8001fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd8:	f7fe fa96 	bl	8000508 <HAL_GetTick>
 8001fdc:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001fde:	6823      	ldr	r3, [r4, #0]
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	d505      	bpl.n	8001ff0 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8001fe4:	6963      	ldr	r3, [r4, #20]
 8001fe6:	696a      	ldr	r2, [r5, #20]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	6163      	str	r3, [r4, #20]
 8001fec:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001ff0:	f7fe fa8a 	bl	8000508 <HAL_GetTick>
 8001ff4:	1b80      	subs	r0, r0, r6
 8001ff6:	2802      	cmp	r0, #2
 8001ff8:	d9f1      	bls.n	8001fde <RCCEx_PLLSAI2_Config+0xda>
 8001ffa:	e7db      	b.n	8001fb4 <RCCEx_PLLSAI2_Config+0xb0>
 8001ffc:	40021000 	.word	0x40021000

08002000 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002000:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002004:	6806      	ldr	r6, [r0, #0]
 8002006:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 800200a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800200c:	d024      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800200e:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002010:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002014:	d02c      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8002016:	d802      	bhi.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002018:	b1c1      	cbz	r1, 800204c <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 800201a:	2601      	movs	r6, #1
 800201c:	e01c      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800201e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002022:	d00d      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002024:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002028:	d1f7      	bne.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800202a:	4a4d      	ldr	r2, [pc, #308]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800202c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800202e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002032:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002036:	430b      	orrs	r3, r1
 8002038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800203c:	2600      	movs	r6, #0
 800203e:	e00b      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002040:	4a47      	ldr	r2, [pc, #284]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002042:	68d3      	ldr	r3, [r2, #12]
 8002044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002048:	60d3      	str	r3, [r2, #12]
      break;
 800204a:	e7ee      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800204c:	3004      	adds	r0, #4
 800204e:	f7ff fecb 	bl	8001de8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002052:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002054:	2800      	cmp	r0, #0
 8002056:	d0e8      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002058:	6823      	ldr	r3, [r4, #0]
 800205a:	04d8      	lsls	r0, r3, #19
 800205c:	d506      	bpl.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 800205e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002060:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002064:	d074      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8002066:	d808      	bhi.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002068:	b1a9      	cbz	r1, 8002096 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 800206a:	2601      	movs	r6, #1
 800206c:	4635      	mov	r5, r6
 800206e:	e021      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002070:	2100      	movs	r1, #0
 8002072:	3020      	adds	r0, #32
 8002074:	f7ff ff46 	bl	8001f04 <RCCEx_PLLSAI2_Config>
 8002078:	e7eb      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 800207a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800207e:	d004      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002080:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002084:	d1f1      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002086:	4635      	mov	r5, r6
 8002088:	e009      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800208a:	4a35      	ldr	r2, [pc, #212]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800208c:	68d3      	ldr	r3, [r2, #12]
 800208e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002092:	60d3      	str	r3, [r2, #12]
 8002094:	e7f7      	b.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002096:	1d20      	adds	r0, r4, #4
 8002098:	f7ff fea6 	bl	8001de8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800209c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800209e:	2d00      	cmp	r5, #0
 80020a0:	d15c      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020a2:	4a2f      	ldr	r2, [pc, #188]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020a4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80020a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80020aa:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80020ae:	430b      	orrs	r3, r1
 80020b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020b4:	6823      	ldr	r3, [r4, #0]
 80020b6:	0399      	lsls	r1, r3, #14
 80020b8:	f140 814f 	bpl.w	800235a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020bc:	4f28      	ldr	r7, [pc, #160]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020c0:	00da      	lsls	r2, r3, #3
 80020c2:	f140 8176 	bpl.w	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 80020c6:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020ca:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002164 <HAL_RCCEx_PeriphCLKConfig+0x164>
 80020ce:	f8d9 3000 	ldr.w	r3, [r9]
 80020d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d6:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80020da:	f7fe fa15 	bl	8000508 <HAL_GetTick>
 80020de:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020e0:	f8d9 3000 	ldr.w	r3, [r9]
 80020e4:	05db      	lsls	r3, r3, #23
 80020e6:	d53f      	bpl.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 80020e8:	2d00      	cmp	r5, #0
 80020ea:	d144      	bne.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020f0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80020f4:	d015      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x122>
 80020f6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d011      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002102:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002106:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800210a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800210e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002116:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800211a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800211e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002122:	07d8      	lsls	r0, r3, #31
 8002124:	d509      	bpl.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8002126:	f7fe f9ef 	bl	8000508 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800212e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002130:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002134:	0799      	lsls	r1, r3, #30
 8002136:	f140 8109 	bpl.w	800234c <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800213a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800213e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800214c:	4635      	mov	r5, r6
 800214e:	e012      	b.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002150:	2100      	movs	r1, #0
 8002152:	f104 0020 	add.w	r0, r4, #32
 8002156:	f7ff fed5 	bl	8001f04 <RCCEx_PLLSAI2_Config>
 800215a:	e79f      	b.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800215c:	462e      	mov	r6, r5
 800215e:	e7a9      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8002160:	40021000 	.word	0x40021000
 8002164:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002168:	f7fe f9ce 	bl	8000508 <HAL_GetTick>
 800216c:	eba0 000a 	sub.w	r0, r0, sl
 8002170:	2802      	cmp	r0, #2
 8002172:	d9b5      	bls.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8002174:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002176:	f1b8 0f00 	cmp.w	r8, #0
 800217a:	d003      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 800217c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800217e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002182:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002184:	6823      	ldr	r3, [r4, #0]
 8002186:	07da      	lsls	r2, r3, #31
 8002188:	d508      	bpl.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800218a:	4990      	ldr	r1, [pc, #576]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800218c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800218e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002192:	f022 0203 	bic.w	r2, r2, #3
 8002196:	4302      	orrs	r2, r0
 8002198:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800219c:	079f      	lsls	r7, r3, #30
 800219e:	d508      	bpl.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021a0:	498a      	ldr	r1, [pc, #552]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80021a2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80021a4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80021a8:	f022 020c 	bic.w	r2, r2, #12
 80021ac:	4302      	orrs	r2, r0
 80021ae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021b2:	075e      	lsls	r6, r3, #29
 80021b4:	d508      	bpl.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021b6:	4985      	ldr	r1, [pc, #532]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80021b8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80021ba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80021be:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80021c2:	4302      	orrs	r2, r0
 80021c4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021c8:	0718      	lsls	r0, r3, #28
 80021ca:	d508      	bpl.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021cc:	497f      	ldr	r1, [pc, #508]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80021ce:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80021d0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80021d4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80021d8:	4302      	orrs	r2, r0
 80021da:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021de:	06d9      	lsls	r1, r3, #27
 80021e0:	d508      	bpl.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021e2:	497a      	ldr	r1, [pc, #488]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80021e4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80021e6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80021ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80021ee:	4302      	orrs	r2, r0
 80021f0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021f4:	069a      	lsls	r2, r3, #26
 80021f6:	d508      	bpl.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021f8:	4974      	ldr	r1, [pc, #464]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80021fa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80021fc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002200:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002204:	4302      	orrs	r2, r0
 8002206:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800220a:	059f      	lsls	r7, r3, #22
 800220c:	d508      	bpl.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800220e:	496f      	ldr	r1, [pc, #444]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002210:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002212:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002216:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800221a:	4302      	orrs	r2, r0
 800221c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002220:	055e      	lsls	r6, r3, #21
 8002222:	d508      	bpl.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002224:	4969      	ldr	r1, [pc, #420]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002226:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002228:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800222c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002230:	4302      	orrs	r2, r0
 8002232:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002236:	0658      	lsls	r0, r3, #25
 8002238:	d508      	bpl.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800223a:	4964      	ldr	r1, [pc, #400]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800223c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800223e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002242:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002246:	4302      	orrs	r2, r0
 8002248:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800224c:	0619      	lsls	r1, r3, #24
 800224e:	d508      	bpl.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002250:	495e      	ldr	r1, [pc, #376]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002252:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002254:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002258:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800225c:	4302      	orrs	r2, r0
 800225e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002262:	05da      	lsls	r2, r3, #23
 8002264:	d508      	bpl.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002266:	4959      	ldr	r1, [pc, #356]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800226a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800226e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002272:	4302      	orrs	r2, r0
 8002274:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002278:	049b      	lsls	r3, r3, #18
 800227a:	d50f      	bpl.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800227c:	4a53      	ldr	r2, [pc, #332]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800227e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002280:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002284:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002288:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800228a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800228e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002292:	d164      	bne.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002294:	68d3      	ldr	r3, [r2, #12]
 8002296:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800229a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800229c:	6823      	ldr	r3, [r4, #0]
 800229e:	031f      	lsls	r7, r3, #12
 80022a0:	d50f      	bpl.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022a2:	4a4a      	ldr	r2, [pc, #296]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80022a4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80022a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80022aa:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80022ae:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022b0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022b8:	d15c      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ba:	68d3      	ldr	r3, [r2, #12]
 80022bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022c0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022c2:	6823      	ldr	r3, [r4, #0]
 80022c4:	035e      	lsls	r6, r3, #13
 80022c6:	d50f      	bpl.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022c8:	4a40      	ldr	r2, [pc, #256]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80022ca:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80022cc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80022d0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80022d4:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022d6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022de:	d154      	bne.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022e0:	68d3      	ldr	r3, [r2, #12]
 80022e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022e6:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	0458      	lsls	r0, r3, #17
 80022ec:	d512      	bpl.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022ee:	4937      	ldr	r1, [pc, #220]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80022f0:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80022f2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80022f6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80022fa:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022fc:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002304:	d14c      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002306:	2102      	movs	r1, #2
 8002308:	1d20      	adds	r0, r4, #4
 800230a:	f7ff fd6d 	bl	8001de8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800230e:	2800      	cmp	r0, #0
 8002310:	bf18      	it	ne
 8002312:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002314:	6822      	ldr	r2, [r4, #0]
 8002316:	0411      	lsls	r1, r2, #16
 8002318:	d508      	bpl.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800231a:	492c      	ldr	r1, [pc, #176]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800231c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800231e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002322:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002326:	4303      	orrs	r3, r0
 8002328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800232c:	03d3      	lsls	r3, r2, #15
 800232e:	d509      	bpl.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002330:	4a26      	ldr	r2, [pc, #152]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002332:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002336:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800233a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800233e:	430b      	orrs	r3, r1
 8002340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002344:	4628      	mov	r0, r5
 8002346:	b002      	add	sp, #8
 8002348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234c:	f7fe f8dc 	bl	8000508 <HAL_GetTick>
 8002350:	1b40      	subs	r0, r0, r5
 8002352:	4548      	cmp	r0, r9
 8002354:	f67f aeec 	bls.w	8002130 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002358:	e70c      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800235a:	4635      	mov	r5, r6
 800235c:	e712      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800235e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002362:	d19b      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002364:	2101      	movs	r1, #1
 8002366:	1d20      	adds	r0, r4, #4
 8002368:	f7ff fd3e 	bl	8001de8 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800236c:	2800      	cmp	r0, #0
 800236e:	bf18      	it	ne
 8002370:	4605      	movne	r5, r0
 8002372:	e793      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002374:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002378:	d1a3      	bne.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800237a:	2101      	movs	r1, #1
 800237c:	1d20      	adds	r0, r4, #4
 800237e:	f7ff fd33 	bl	8001de8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002382:	2800      	cmp	r0, #0
 8002384:	bf18      	it	ne
 8002386:	4605      	movne	r5, r0
 8002388:	e79b      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800238a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800238e:	d1ab      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002390:	2101      	movs	r1, #1
 8002392:	1d20      	adds	r0, r4, #4
 8002394:	f7ff fd28 	bl	8001de8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002398:	2800      	cmp	r0, #0
 800239a:	bf18      	it	ne
 800239c:	4605      	movne	r5, r0
 800239e:	e7a3      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80023a0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80023a4:	d1b6      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80023a6:	2102      	movs	r1, #2
 80023a8:	f104 0020 	add.w	r0, r4, #32
 80023ac:	f7ff fdaa 	bl	8001f04 <RCCEx_PLLSAI2_Config>
 80023b0:	e7ad      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80023ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c0:	9301      	str	r3, [sp, #4]
 80023c2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80023c4:	f04f 0801 	mov.w	r8, #1
 80023c8:	e67f      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0xca>
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000

080023d0 <HAL_RTC_WaitForSynchro>:

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80023d0:	6802      	ldr	r2, [r0, #0]
{
 80023d2:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80023d4:	68d3      	ldr	r3, [r2, #12]
 80023d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023da:	60d3      	str	r3, [r2, #12]
{
 80023dc:	4604      	mov	r4, r0
#endif

  tickstart = HAL_GetTick();
 80023de:	f7fe f893 	bl	8000508 <HAL_GetTick>
 80023e2:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80023e4:	6823      	ldr	r3, [r4, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	069b      	lsls	r3, r3, #26
 80023ea:	d501      	bpl.n	80023f0 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80023ec:	2000      	movs	r0, #0
 80023ee:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80023f0:	f7fe f88a 	bl	8000508 <HAL_GetTick>
 80023f4:	1b40      	subs	r0, r0, r5
 80023f6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80023fa:	d9f3      	bls.n	80023e4 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 80023fc:	2003      	movs	r0, #3
}
 80023fe:	bd38      	pop	{r3, r4, r5, pc}

08002400 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002400:	b538      	push	{r3, r4, r5, lr}
        return HAL_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002402:	6803      	ldr	r3, [r0, #0]
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	0652      	lsls	r2, r2, #25
{
 8002408:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800240a:	d501      	bpl.n	8002410 <RTC_EnterInitMode+0x10>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return HAL_OK;
 800240c:	2000      	movs	r0, #0
 800240e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002414:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002416:	f7fe f877 	bl	8000508 <HAL_GetTick>
 800241a:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800241c:	6823      	ldr	r3, [r4, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	065b      	lsls	r3, r3, #25
 8002422:	d4f3      	bmi.n	800240c <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002424:	f7fe f870 	bl	8000508 <HAL_GetTick>
 8002428:	1b40      	subs	r0, r0, r5
 800242a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800242e:	d9f5      	bls.n	800241c <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8002430:	2003      	movs	r0, #3
}
 8002432:	bd38      	pop	{r3, r4, r5, pc}

08002434 <HAL_RTC_Init>:
{
 8002434:	b538      	push	{r3, r4, r5, lr}
  if(hrtc != NULL)
 8002436:	4604      	mov	r4, r0
 8002438:	b1d8      	cbz	r0, 8002472 <HAL_RTC_Init+0x3e>
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800243a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800243e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002442:	b91b      	cbnz	r3, 800244c <HAL_RTC_Init+0x18>
      hrtc->Lock = HAL_UNLOCKED;
 8002444:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8002448:	f000 fed6 	bl	80031f8 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800244c:	2302      	movs	r3, #2
 800244e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002452:	6823      	ldr	r3, [r4, #0]
 8002454:	22ca      	movs	r2, #202	; 0xca
 8002456:	625a      	str	r2, [r3, #36]	; 0x24
 8002458:	2253      	movs	r2, #83	; 0x53
 800245a:	625a      	str	r2, [r3, #36]	; 0x24
    if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800245c:	4620      	mov	r0, r4
 800245e:	f7ff ffcf 	bl	8002400 <RTC_EnterInitMode>
 8002462:	6823      	ldr	r3, [r4, #0]
 8002464:	4605      	mov	r5, r0
 8002466:	b138      	cbz	r0, 8002478 <HAL_RTC_Init+0x44>
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002468:	22ff      	movs	r2, #255	; 0xff
 800246a:	625a      	str	r2, [r3, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_ERROR;
 800246c:	2304      	movs	r3, #4
 800246e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  HAL_StatusTypeDef status = HAL_ERROR;
 8002472:	2501      	movs	r5, #1
}
 8002474:	4628      	mov	r0, r5
 8002476:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002478:	689a      	ldr	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800247a:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800247c:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8002480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002484:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002486:	6862      	ldr	r2, [r4, #4]
 8002488:	6899      	ldr	r1, [r3, #8]
 800248a:	4302      	orrs	r2, r0
 800248c:	69a0      	ldr	r0, [r4, #24]
 800248e:	4302      	orrs	r2, r0
 8002490:	430a      	orrs	r2, r1
 8002492:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002494:	68e2      	ldr	r2, [r4, #12]
 8002496:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	68a1      	ldr	r1, [r4, #8]
 800249c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80024a0:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024a8:	60da      	str	r2, [r3, #12]
      if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	069b      	lsls	r3, r3, #26
 80024ae:	d405      	bmi.n	80024bc <HAL_RTC_Init+0x88>
        if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80024b0:	4620      	mov	r0, r4
 80024b2:	f7ff ff8d 	bl	80023d0 <HAL_RTC_WaitForSynchro>
 80024b6:	b108      	cbz	r0, 80024bc <HAL_RTC_Init+0x88>
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024b8:	6823      	ldr	r3, [r4, #0]
 80024ba:	e7d5      	b.n	8002468 <HAL_RTC_Init+0x34>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80024bc:	6823      	ldr	r3, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80024be:	6960      	ldr	r0, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80024c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024c2:	f022 0203 	bic.w	r2, r2, #3
 80024c6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80024c8:	69e2      	ldr	r2, [r4, #28]
 80024ca:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80024cc:	4302      	orrs	r2, r0
 80024ce:	430a      	orrs	r2, r1
 80024d0:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024d2:	22ff      	movs	r2, #255	; 0xff
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_READY;
 80024d6:	2301      	movs	r3, #1
 80024d8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  return status;
 80024dc:	e7ca      	b.n	8002474 <HAL_RTC_Init+0x40>

080024de <HAL_TIM_Base_MspInit>:
 80024de:	4770      	bx	lr

080024e0 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024e0:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 80024e2:	480a      	ldr	r0, [pc, #40]	; (800250c <HAL_TIM_Base_Start_IT+0x2c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	60da      	str	r2, [r3, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 80024ec:	6899      	ldr	r1, [r3, #8]
 80024ee:	4001      	ands	r1, r0
 80024f0:	2906      	cmp	r1, #6
 80024f2:	d008      	beq.n	8002506 <HAL_TIM_Base_Start_IT+0x26>
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	4002      	ands	r2, r0
 80024f8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 80024fc:	bf1e      	ittt	ne
 80024fe:	681a      	ldrne	r2, [r3, #0]
 8002500:	f042 0201 	orrne.w	r2, r2, #1
 8002504:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002506:	2000      	movs	r0, #0
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	00010007 	.word	0x00010007

08002510 <HAL_TIM_OC_DelayElapsedCallback>:
 8002510:	4770      	bx	lr

08002512 <HAL_TIM_IC_CaptureCallback>:
 8002512:	4770      	bx	lr

08002514 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002514:	4770      	bx	lr

08002516 <HAL_TIM_TriggerCallback>:
 8002516:	4770      	bx	lr

08002518 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002518:	6803      	ldr	r3, [r0, #0]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	0791      	lsls	r1, r2, #30
{
 800251e:	b510      	push	{r4, lr}
 8002520:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002522:	d50f      	bpl.n	8002544 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	0792      	lsls	r2, r2, #30
 8002528:	d50c      	bpl.n	8002544 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800252a:	f06f 0202 	mvn.w	r2, #2
 800252e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002530:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002532:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002534:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002536:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002538:	f000 8085 	beq.w	8002646 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800253c:	f7ff ffe9 	bl	8002512 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002540:	2300      	movs	r3, #0
 8002542:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002544:	6823      	ldr	r3, [r4, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	0752      	lsls	r2, r2, #29
 800254a:	d510      	bpl.n	800256e <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	0750      	lsls	r0, r2, #29
 8002550:	d50d      	bpl.n	800256e <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002552:	f06f 0204 	mvn.w	r2, #4
 8002556:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002558:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800255a:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800255c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002560:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002562:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002564:	d075      	beq.n	8002652 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002566:	f7ff ffd4 	bl	8002512 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256a:	2300      	movs	r3, #0
 800256c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800256e:	6823      	ldr	r3, [r4, #0]
 8002570:	691a      	ldr	r2, [r3, #16]
 8002572:	0711      	lsls	r1, r2, #28
 8002574:	d50f      	bpl.n	8002596 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	0712      	lsls	r2, r2, #28
 800257a:	d50c      	bpl.n	8002596 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800257c:	f06f 0208 	mvn.w	r2, #8
 8002580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002582:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002584:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002586:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002588:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800258a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800258c:	d067      	beq.n	800265e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800258e:	f7ff ffc0 	bl	8002512 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002592:	2300      	movs	r3, #0
 8002594:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002596:	6823      	ldr	r3, [r4, #0]
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	06d0      	lsls	r0, r2, #27
 800259c:	d510      	bpl.n	80025c0 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800259e:	68da      	ldr	r2, [r3, #12]
 80025a0:	06d1      	lsls	r1, r2, #27
 80025a2:	d50d      	bpl.n	80025c0 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025a4:	f06f 0210 	mvn.w	r2, #16
 80025a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025aa:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ac:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025ae:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025b2:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025b4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025b6:	d058      	beq.n	800266a <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80025b8:	f7ff ffab 	bl	8002512 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025bc:	2300      	movs	r3, #0
 80025be:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025c0:	6823      	ldr	r3, [r4, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	07d2      	lsls	r2, r2, #31
 80025c6:	d508      	bpl.n	80025da <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	07d0      	lsls	r0, r2, #31
 80025cc:	d505      	bpl.n	80025da <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025ce:	f06f 0201 	mvn.w	r2, #1
 80025d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025d4:	4620      	mov	r0, r4
 80025d6:	f000 fd9b 	bl	8003110 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025da:	6823      	ldr	r3, [r4, #0]
 80025dc:	691a      	ldr	r2, [r3, #16]
 80025de:	0611      	lsls	r1, r2, #24
 80025e0:	d508      	bpl.n	80025f4 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	0612      	lsls	r2, r2, #24
 80025e6:	d505      	bpl.n	80025f4 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025ee:	4620      	mov	r0, r4
 80025f0:	f000 f8c3 	bl	800277a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80025f4:	6823      	ldr	r3, [r4, #0]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	05d0      	lsls	r0, r2, #23
 80025fa:	d508      	bpl.n	800260e <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	0611      	lsls	r1, r2, #24
 8002600:	d505      	bpl.n	800260e <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002602:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002608:	4620      	mov	r0, r4
 800260a:	f000 f8b7 	bl	800277c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	691a      	ldr	r2, [r3, #16]
 8002612:	0652      	lsls	r2, r2, #25
 8002614:	d508      	bpl.n	8002628 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	0650      	lsls	r0, r2, #25
 800261a:	d505      	bpl.n	8002628 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800261c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002622:	4620      	mov	r0, r4
 8002624:	f7ff ff77 	bl	8002516 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	0691      	lsls	r1, r2, #26
 800262e:	d522      	bpl.n	8002676 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	0692      	lsls	r2, r2, #26
 8002634:	d51f      	bpl.n	8002676 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002636:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 800263a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800263c:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800263e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002642:	f000 b899 	b.w	8002778 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002646:	f7ff ff63 	bl	8002510 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800264a:	4620      	mov	r0, r4
 800264c:	f7ff ff62 	bl	8002514 <HAL_TIM_PWM_PulseFinishedCallback>
 8002650:	e776      	b.n	8002540 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002652:	f7ff ff5d 	bl	8002510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002656:	4620      	mov	r0, r4
 8002658:	f7ff ff5c 	bl	8002514 <HAL_TIM_PWM_PulseFinishedCallback>
 800265c:	e785      	b.n	800256a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800265e:	f7ff ff57 	bl	8002510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002662:	4620      	mov	r0, r4
 8002664:	f7ff ff56 	bl	8002514 <HAL_TIM_PWM_PulseFinishedCallback>
 8002668:	e793      	b.n	8002592 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800266a:	f7ff ff51 	bl	8002510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800266e:	4620      	mov	r0, r4
 8002670:	f7ff ff50 	bl	8002514 <HAL_TIM_PWM_PulseFinishedCallback>
 8002674:	e7a2      	b.n	80025bc <HAL_TIM_IRQHandler+0xa4>
 8002676:	bd10      	pop	{r4, pc}

08002678 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002678:	4a30      	ldr	r2, [pc, #192]	; (800273c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800267a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800267c:	4290      	cmp	r0, r2
 800267e:	d012      	beq.n	80026a6 <TIM_Base_SetConfig+0x2e>
 8002680:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002684:	d00f      	beq.n	80026a6 <TIM_Base_SetConfig+0x2e>
 8002686:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800268a:	4290      	cmp	r0, r2
 800268c:	d00b      	beq.n	80026a6 <TIM_Base_SetConfig+0x2e>
 800268e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002692:	4290      	cmp	r0, r2
 8002694:	d007      	beq.n	80026a6 <TIM_Base_SetConfig+0x2e>
 8002696:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800269a:	4290      	cmp	r0, r2
 800269c:	d003      	beq.n	80026a6 <TIM_Base_SetConfig+0x2e>
 800269e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80026a2:	4290      	cmp	r0, r2
 80026a4:	d119      	bne.n	80026da <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80026a6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80026ac:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ae:	4a23      	ldr	r2, [pc, #140]	; (800273c <TIM_Base_SetConfig+0xc4>)
 80026b0:	4290      	cmp	r0, r2
 80026b2:	d01d      	beq.n	80026f0 <TIM_Base_SetConfig+0x78>
 80026b4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80026b8:	d01a      	beq.n	80026f0 <TIM_Base_SetConfig+0x78>
 80026ba:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80026be:	4290      	cmp	r0, r2
 80026c0:	d016      	beq.n	80026f0 <TIM_Base_SetConfig+0x78>
 80026c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026c6:	4290      	cmp	r0, r2
 80026c8:	d012      	beq.n	80026f0 <TIM_Base_SetConfig+0x78>
 80026ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026ce:	4290      	cmp	r0, r2
 80026d0:	d00e      	beq.n	80026f0 <TIM_Base_SetConfig+0x78>
 80026d2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80026d6:	4290      	cmp	r0, r2
 80026d8:	d00a      	beq.n	80026f0 <TIM_Base_SetConfig+0x78>
 80026da:	4a19      	ldr	r2, [pc, #100]	; (8002740 <TIM_Base_SetConfig+0xc8>)
 80026dc:	4290      	cmp	r0, r2
 80026de:	d007      	beq.n	80026f0 <TIM_Base_SetConfig+0x78>
 80026e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026e4:	4290      	cmp	r0, r2
 80026e6:	d003      	beq.n	80026f0 <TIM_Base_SetConfig+0x78>
 80026e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026ec:	4290      	cmp	r0, r2
 80026ee:	d103      	bne.n	80026f8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026f0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80026f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026f6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026f8:	694a      	ldr	r2, [r1, #20]
 80026fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026fe:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002700:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002702:	688b      	ldr	r3, [r1, #8]
 8002704:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002706:	680b      	ldr	r3, [r1, #0]
 8002708:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800270a:	4b0c      	ldr	r3, [pc, #48]	; (800273c <TIM_Base_SetConfig+0xc4>)
 800270c:	4298      	cmp	r0, r3
 800270e:	d00f      	beq.n	8002730 <TIM_Base_SetConfig+0xb8>
 8002710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002714:	4298      	cmp	r0, r3
 8002716:	d00b      	beq.n	8002730 <TIM_Base_SetConfig+0xb8>
 8002718:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800271c:	4298      	cmp	r0, r3
 800271e:	d007      	beq.n	8002730 <TIM_Base_SetConfig+0xb8>
 8002720:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002724:	4298      	cmp	r0, r3
 8002726:	d003      	beq.n	8002730 <TIM_Base_SetConfig+0xb8>
 8002728:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800272c:	4298      	cmp	r0, r3
 800272e:	d101      	bne.n	8002734 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002730:	690b      	ldr	r3, [r1, #16]
 8002732:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002734:	2301      	movs	r3, #1
 8002736:	6143      	str	r3, [r0, #20]
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40012c00 	.word	0x40012c00
 8002740:	40014000 	.word	0x40014000

08002744 <HAL_TIM_Base_Init>:
{
 8002744:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002746:	4604      	mov	r4, r0
 8002748:	b1a0      	cbz	r0, 8002774 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800274a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800274e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002752:	b91b      	cbnz	r3, 800275c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002754:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002758:	f7ff fec1 	bl	80024de <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800275c:	2302      	movs	r3, #2
 800275e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002762:	6820      	ldr	r0, [r4, #0]
 8002764:	1d21      	adds	r1, r4, #4
 8002766:	f7ff ff87 	bl	8002678 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800276a:	2301      	movs	r3, #1
 800276c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002770:	2000      	movs	r0, #0
 8002772:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002774:	2001      	movs	r0, #1
}
 8002776:	bd10      	pop	{r4, pc}

08002778 <HAL_TIMEx_CommutationCallback>:
 8002778:	4770      	bx	lr

0800277a <HAL_TIMEx_BreakCallback>:
 800277a:	4770      	bx	lr

0800277c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800277c:	4770      	bx	lr
	...

08002780 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002780:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002782:	69c1      	ldr	r1, [r0, #28]
{
 8002784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002786:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002788:	6883      	ldr	r3, [r0, #8]
 800278a:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800278c:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800278e:	4303      	orrs	r3, r0
 8002790:	6960      	ldr	r0, [r4, #20]
 8002792:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002794:	48ba      	ldr	r0, [pc, #744]	; (8002a80 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002796:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002798:	4028      	ands	r0, r5
 800279a:	4303      	orrs	r3, r0
 800279c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800279e:	6853      	ldr	r3, [r2, #4]
 80027a0:	68e0      	ldr	r0, [r4, #12]
 80027a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027a6:	4303      	orrs	r3, r0
 80027a8:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027aa:	4bb6      	ldr	r3, [pc, #728]	; (8002a84 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027ac:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027ae:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 80027b0:	bf1c      	itt	ne
 80027b2:	6a23      	ldrne	r3, [r4, #32]
 80027b4:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027b6:	6893      	ldr	r3, [r2, #8]
 80027b8:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80027bc:	4303      	orrs	r3, r0
 80027be:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027c0:	4bb1      	ldr	r3, [pc, #708]	; (8002a88 <UART_SetConfig+0x308>)
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d119      	bne.n	80027fa <UART_SetConfig+0x7a>
 80027c6:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80027ca:	4ab0      	ldr	r2, [pc, #704]	; (8002a8c <UART_SetConfig+0x30c>)
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d0:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027d4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80027d8:	5cd3      	ldrb	r3, [r2, r3]
 80027da:	f040 8138 	bne.w	8002a4e <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 80027de:	2b08      	cmp	r3, #8
 80027e0:	f200 808f 	bhi.w	8002902 <UART_SetConfig+0x182>
 80027e4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80027e8:	00ca011a 	.word	0x00ca011a
 80027ec:	008d00f9 	.word	0x008d00f9
 80027f0:	008d0114 	.word	0x008d0114
 80027f4:	008d008d 	.word	0x008d008d
 80027f8:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027fa:	4ba5      	ldr	r3, [pc, #660]	; (8002a90 <UART_SetConfig+0x310>)
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d107      	bne.n	8002810 <UART_SetConfig+0x90>
 8002800:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002804:	4aa3      	ldr	r2, [pc, #652]	; (8002a94 <UART_SetConfig+0x314>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	e7e1      	b.n	80027d4 <UART_SetConfig+0x54>
 8002810:	4ba1      	ldr	r3, [pc, #644]	; (8002a98 <UART_SetConfig+0x318>)
 8002812:	429a      	cmp	r2, r3
 8002814:	d123      	bne.n	800285e <UART_SetConfig+0xde>
 8002816:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002822:	2b10      	cmp	r3, #16
 8002824:	f000 80f1 	beq.w	8002a0a <UART_SetConfig+0x28a>
 8002828:	d80b      	bhi.n	8002842 <UART_SetConfig+0xc2>
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 80f3 	beq.w	8002a16 <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002830:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002834:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002838:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800283c:	f000 80f8 	beq.w	8002a30 <UART_SetConfig+0x2b0>
 8002840:	e0a8      	b.n	8002994 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002842:	2b20      	cmp	r3, #32
 8002844:	f000 80c6 	beq.w	80029d4 <UART_SetConfig+0x254>
 8002848:	2b30      	cmp	r3, #48	; 0x30
 800284a:	d1f1      	bne.n	8002830 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800284c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002850:	f040 80b8 	bne.w	80029c4 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002854:	6860      	ldr	r0, [r4, #4]
 8002856:	0843      	lsrs	r3, r0, #1
 8002858:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800285c:	e0c3      	b.n	80029e6 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800285e:	4b8f      	ldr	r3, [pc, #572]	; (8002a9c <UART_SetConfig+0x31c>)
 8002860:	429a      	cmp	r2, r3
 8002862:	d11e      	bne.n	80028a2 <UART_SetConfig+0x122>
 8002864:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002870:	2b40      	cmp	r3, #64	; 0x40
 8002872:	f000 80bb 	beq.w	80029ec <UART_SetConfig+0x26c>
 8002876:	d80a      	bhi.n	800288e <UART_SetConfig+0x10e>
 8002878:	b97b      	cbnz	r3, 800289a <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 800287a:	4b82      	ldr	r3, [pc, #520]	; (8002a84 <UART_SetConfig+0x304>)
 800287c:	429a      	cmp	r2, r3
 800287e:	f040 80ca 	bne.w	8002a16 <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002882:	f7ff fa57 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
        break;
 8002886:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8002888:	bbb0      	cbnz	r0, 80028f8 <UART_SetConfig+0x178>
 800288a:	4602      	mov	r2, r0
 800288c:	e03a      	b.n	8002904 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800288e:	2b80      	cmp	r3, #128	; 0x80
 8002890:	f000 809d 	beq.w	80029ce <UART_SetConfig+0x24e>
 8002894:	2bc0      	cmp	r3, #192	; 0xc0
 8002896:	f000 80b0 	beq.w	80029fa <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 800289a:	4b7a      	ldr	r3, [pc, #488]	; (8002a84 <UART_SetConfig+0x304>)
 800289c:	429a      	cmp	r2, r3
 800289e:	d1c7      	bne.n	8002830 <UART_SetConfig+0xb0>
 80028a0:	e02f      	b.n	8002902 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028a2:	4b7f      	ldr	r3, [pc, #508]	; (8002aa0 <UART_SetConfig+0x320>)
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d111      	bne.n	80028cc <UART_SetConfig+0x14c>
 80028a8:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 80028ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028b8:	f000 8098 	beq.w	80029ec <UART_SetConfig+0x26c>
 80028bc:	d9dc      	bls.n	8002878 <UART_SetConfig+0xf8>
 80028be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028c2:	f000 8084 	beq.w	80029ce <UART_SetConfig+0x24e>
 80028c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028ca:	e7e4      	b.n	8002896 <UART_SetConfig+0x116>
 80028cc:	4b6d      	ldr	r3, [pc, #436]	; (8002a84 <UART_SetConfig+0x304>)
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d1ae      	bne.n	8002830 <UART_SetConfig+0xb0>
 80028d2:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 80028d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e2:	f000 8083 	beq.w	80029ec <UART_SetConfig+0x26c>
 80028e6:	d9c7      	bls.n	8002878 <UART_SetConfig+0xf8>
 80028e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ec:	d06f      	beq.n	80029ce <UART_SetConfig+0x24e>
 80028ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028f2:	e7d0      	b.n	8002896 <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80028f4:	486b      	ldr	r0, [pc, #428]	; (8002aa4 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 80028f6:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80028f8:	6862      	ldr	r2, [r4, #4]
 80028fa:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80028fe:	4281      	cmp	r1, r0
 8002900:	d905      	bls.n	800290e <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8002902:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002904:	2300      	movs	r3, #0
 8002906:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002908:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 800290a:	4610      	mov	r0, r2
 800290c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 800290e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002912:	d8f6      	bhi.n	8002902 <UART_SetConfig+0x182>
        switch (clocksource)
 8002914:	2b08      	cmp	r3, #8
 8002916:	d82e      	bhi.n	8002976 <UART_SetConfig+0x1f6>
 8002918:	e8df f003 	tbb	[pc, r3]
 800291c:	2d1c2d05 	.word	0x2d1c2d05
 8002920:	2d2d2d24 	.word	0x2d2d2d24
 8002924:	27          	.byte	0x27
 8002925:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002926:	f7ff fa05 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800292a:	6862      	ldr	r2, [r4, #4]
 800292c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002930:	0856      	lsrs	r6, r2, #1
 8002932:	2700      	movs	r7, #0
 8002934:	fbe1 6700 	umlal	r6, r7, r1, r0
 8002938:	2300      	movs	r3, #0
 800293a:	4630      	mov	r0, r6
 800293c:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800293e:	f7fd fc43 	bl	80001c8 <__aeabi_uldivmod>
            break;
 8002942:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002944:	4b58      	ldr	r3, [pc, #352]	; (8002aa8 <UART_SetConfig+0x328>)
 8002946:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800294a:	4299      	cmp	r1, r3
 800294c:	d8d9      	bhi.n	8002902 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 800294e:	6823      	ldr	r3, [r4, #0]
 8002950:	60d8      	str	r0, [r3, #12]
 8002952:	e7d7      	b.n	8002904 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002954:	4855      	ldr	r0, [pc, #340]	; (8002aac <UART_SetConfig+0x32c>)
 8002956:	0855      	lsrs	r5, r2, #1
 8002958:	2300      	movs	r3, #0
 800295a:	2100      	movs	r1, #0
 800295c:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800295e:	f141 0100 	adc.w	r1, r1, #0
 8002962:	e7ec      	b.n	800293e <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002964:	f7fe feda 	bl	800171c <HAL_RCC_GetSysClockFreq>
 8002968:	e7df      	b.n	800292a <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800296a:	0850      	lsrs	r0, r2, #1
 800296c:	2100      	movs	r1, #0
 800296e:	2300      	movs	r3, #0
 8002970:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8002974:	e7f3      	b.n	800295e <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8002976:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002978:	2000      	movs	r0, #0
 800297a:	e7e3      	b.n	8002944 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800297c:	f7ff f9ec 	bl	8001d58 <HAL_RCC_GetPCLK2Freq>
 8002980:	e04e      	b.n	8002a20 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002982:	f7ff f9d7 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002986:	6862      	ldr	r2, [r4, #4]
 8002988:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800298c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002990:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002992:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002994:	f1a3 0010 	sub.w	r0, r3, #16
 8002998:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800299c:	4288      	cmp	r0, r1
 800299e:	d8b0      	bhi.n	8002902 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 80029a0:	6821      	ldr	r1, [r4, #0]
 80029a2:	60cb      	str	r3, [r1, #12]
 80029a4:	e7ae      	b.n	8002904 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80029a6:	f7ff f9d7 	bl	8001d58 <HAL_RCC_GetPCLK2Freq>
 80029aa:	e7ec      	b.n	8002986 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80029ac:	6860      	ldr	r0, [r4, #4]
 80029ae:	0843      	lsrs	r3, r0, #1
 80029b0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80029b4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80029b8:	fbb3 f3f0 	udiv	r3, r3, r0
 80029bc:	e7e8      	b.n	8002990 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80029be:	f7fe fead 	bl	800171c <HAL_RCC_GetSysClockFreq>
 80029c2:	e7e0      	b.n	8002986 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80029c4:	6860      	ldr	r0, [r4, #4]
 80029c6:	0843      	lsrs	r3, r0, #1
 80029c8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80029cc:	e7f4      	b.n	80029b8 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 80029ce:	4b2d      	ldr	r3, [pc, #180]	; (8002a84 <UART_SetConfig+0x304>)
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d08f      	beq.n	80028f4 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029d4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80029d8:	d1e8      	bne.n	80029ac <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80029da:	6860      	ldr	r0, [r4, #4]
 80029dc:	0843      	lsrs	r3, r0, #1
 80029de:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80029e2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80029e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80029ea:	e01f      	b.n	8002a2c <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 80029ec:	4b25      	ldr	r3, [pc, #148]	; (8002a84 <UART_SetConfig+0x304>)
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d10b      	bne.n	8002a0a <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80029f2:	f7fe fe93 	bl	800171c <HAL_RCC_GetSysClockFreq>
        break;
 80029f6:	2304      	movs	r3, #4
 80029f8:	e746      	b.n	8002888 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 80029fa:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <UART_SetConfig+0x304>)
 80029fc:	429a      	cmp	r2, r3
 80029fe:	f47f af25 	bne.w	800284c <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002a02:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a06:	2308      	movs	r3, #8
 8002a08:	e776      	b.n	80028f8 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a0a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002a0e:	d1d6      	bne.n	80029be <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a10:	f7fe fe84 	bl	800171c <HAL_RCC_GetSysClockFreq>
 8002a14:	e004      	b.n	8002a20 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a16:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002a1a:	d1b2      	bne.n	8002982 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a1c:	f7ff f98a 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a20:	6861      	ldr	r1, [r4, #4]
 8002a22:	084a      	lsrs	r2, r1, #1
 8002a24:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002a28:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a2c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a2e:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a30:	f1a3 0010 	sub.w	r0, r3, #16
 8002a34:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002a38:	4288      	cmp	r0, r1
 8002a3a:	f63f af62 	bhi.w	8002902 <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8002a3e:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8002a42:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a44:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	60c3      	str	r3, [r0, #12]
 8002a4c:	e75a      	b.n	8002904 <UART_SetConfig+0x184>
    switch (clocksource)
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	f63f af57 	bhi.w	8002902 <UART_SetConfig+0x182>
 8002a54:	a201      	add	r2, pc, #4	; (adr r2, 8002a5c <UART_SetConfig+0x2dc>)
 8002a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5a:	bf00      	nop
 8002a5c:	08002983 	.word	0x08002983
 8002a60:	080029a7 	.word	0x080029a7
 8002a64:	080029ad 	.word	0x080029ad
 8002a68:	08002903 	.word	0x08002903
 8002a6c:	080029bf 	.word	0x080029bf
 8002a70:	08002903 	.word	0x08002903
 8002a74:	08002903 	.word	0x08002903
 8002a78:	08002903 	.word	0x08002903
 8002a7c:	080029c5 	.word	0x080029c5
 8002a80:	efff69f3 	.word	0xefff69f3
 8002a84:	40008000 	.word	0x40008000
 8002a88:	40013800 	.word	0x40013800
 8002a8c:	080034c0 	.word	0x080034c0
 8002a90:	40004400 	.word	0x40004400
 8002a94:	080034c4 	.word	0x080034c4
 8002a98:	40004800 	.word	0x40004800
 8002a9c:	40004c00 	.word	0x40004c00
 8002aa0:	40005000 	.word	0x40005000
 8002aa4:	00f42400 	.word	0x00f42400
 8002aa8:	000ffcff 	.word	0x000ffcff
 8002aac:	f4240000 	.word	0xf4240000

08002ab0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ab0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ab2:	07da      	lsls	r2, r3, #31
{
 8002ab4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ab6:	d506      	bpl.n	8002ac6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ab8:	6801      	ldr	r1, [r0, #0]
 8002aba:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002abc:	684a      	ldr	r2, [r1, #4]
 8002abe:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002ac2:	4322      	orrs	r2, r4
 8002ac4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ac6:	079c      	lsls	r4, r3, #30
 8002ac8:	d506      	bpl.n	8002ad8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002aca:	6801      	ldr	r1, [r0, #0]
 8002acc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002ace:	684a      	ldr	r2, [r1, #4]
 8002ad0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ad4:	4322      	orrs	r2, r4
 8002ad6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ad8:	0759      	lsls	r1, r3, #29
 8002ada:	d506      	bpl.n	8002aea <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002adc:	6801      	ldr	r1, [r0, #0]
 8002ade:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002ae0:	684a      	ldr	r2, [r1, #4]
 8002ae2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ae6:	4322      	orrs	r2, r4
 8002ae8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002aea:	071a      	lsls	r2, r3, #28
 8002aec:	d506      	bpl.n	8002afc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002aee:	6801      	ldr	r1, [r0, #0]
 8002af0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002af2:	684a      	ldr	r2, [r1, #4]
 8002af4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002af8:	4322      	orrs	r2, r4
 8002afa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002afc:	06dc      	lsls	r4, r3, #27
 8002afe:	d506      	bpl.n	8002b0e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b00:	6801      	ldr	r1, [r0, #0]
 8002b02:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002b04:	688a      	ldr	r2, [r1, #8]
 8002b06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b0a:	4322      	orrs	r2, r4
 8002b0c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b0e:	0699      	lsls	r1, r3, #26
 8002b10:	d506      	bpl.n	8002b20 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b12:	6801      	ldr	r1, [r0, #0]
 8002b14:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002b16:	688a      	ldr	r2, [r1, #8]
 8002b18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b1c:	4322      	orrs	r2, r4
 8002b1e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b20:	065a      	lsls	r2, r3, #25
 8002b22:	d50f      	bpl.n	8002b44 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b24:	6801      	ldr	r1, [r0, #0]
 8002b26:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002b28:	684a      	ldr	r2, [r1, #4]
 8002b2a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002b2e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b30:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b34:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b36:	d105      	bne.n	8002b44 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b38:	684a      	ldr	r2, [r1, #4]
 8002b3a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002b3c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002b40:	4322      	orrs	r2, r4
 8002b42:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b44:	061b      	lsls	r3, r3, #24
 8002b46:	d506      	bpl.n	8002b56 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b48:	6802      	ldr	r2, [r0, #0]
 8002b4a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002b4c:	6853      	ldr	r3, [r2, #4]
 8002b4e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002b52:	430b      	orrs	r3, r1
 8002b54:	6053      	str	r3, [r2, #4]
 8002b56:	bd10      	pop	{r4, pc}

08002b58 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b5c:	9d06      	ldr	r5, [sp, #24]
 8002b5e:	4604      	mov	r4, r0
 8002b60:	460f      	mov	r7, r1
 8002b62:	4616      	mov	r6, r2
 8002b64:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b66:	6821      	ldr	r1, [r4, #0]
 8002b68:	69ca      	ldr	r2, [r1, #28]
 8002b6a:	ea37 0302 	bics.w	r3, r7, r2
 8002b6e:	bf0c      	ite	eq
 8002b70:	2201      	moveq	r2, #1
 8002b72:	2200      	movne	r2, #0
 8002b74:	42b2      	cmp	r2, r6
 8002b76:	d002      	beq.n	8002b7e <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002b78:	2000      	movs	r0, #0
}
 8002b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002b7e:	1c6b      	adds	r3, r5, #1
 8002b80:	d0f2      	beq.n	8002b68 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b82:	b99d      	cbnz	r5, 8002bac <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b84:	6823      	ldr	r3, [r4, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b8c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	f022 0201 	bic.w	r2, r2, #1
 8002b94:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002b96:	2320      	movs	r3, #32
 8002b98:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8002b9c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8002ba6:	2003      	movs	r0, #3
 8002ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bac:	f7fd fcac 	bl	8000508 <HAL_GetTick>
 8002bb0:	eba0 0008 	sub.w	r0, r0, r8
 8002bb4:	4285      	cmp	r5, r0
 8002bb6:	d2d6      	bcs.n	8002b66 <UART_WaitOnFlagUntilTimeout+0xe>
 8002bb8:	e7e4      	b.n	8002b84 <UART_WaitOnFlagUntilTimeout+0x2c>

08002bba <HAL_UART_Transmit>:
{
 8002bba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002bbe:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002bc0:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002bc4:	2b20      	cmp	r3, #32
{
 8002bc6:	4604      	mov	r4, r0
 8002bc8:	460d      	mov	r5, r1
 8002bca:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002bcc:	d14a      	bne.n	8002c64 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8002bce:	2900      	cmp	r1, #0
 8002bd0:	d046      	beq.n	8002c60 <HAL_UART_Transmit+0xa6>
 8002bd2:	2a00      	cmp	r2, #0
 8002bd4:	d044      	beq.n	8002c60 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8002bd6:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d042      	beq.n	8002c64 <HAL_UART_Transmit+0xaa>
 8002bde:	2301      	movs	r3, #1
 8002be0:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be4:	2300      	movs	r3, #0
 8002be6:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002be8:	2321      	movs	r3, #33	; 0x21
 8002bea:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8002bee:	f7fd fc8b 	bl	8000508 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8002bf2:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8002bf6:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002bf8:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002bfc:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c00:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 8002c02:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c04:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 8002c06:	b952      	cbnz	r2, 8002c1e <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c08:	2140      	movs	r1, #64	; 0x40
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	f7ff ffa4 	bl	8002b58 <UART_WaitOnFlagUntilTimeout>
 8002c10:	b958      	cbnz	r0, 8002c2a <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8002c12:	2320      	movs	r3, #32
 8002c14:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8002c18:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8002c1c:	e006      	b.n	8002c2c <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2180      	movs	r1, #128	; 0x80
 8002c22:	4620      	mov	r0, r4
 8002c24:	f7ff ff98 	bl	8002b58 <UART_WaitOnFlagUntilTimeout>
 8002c28:	b118      	cbz	r0, 8002c32 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8002c2a:	2003      	movs	r0, #3
}
 8002c2c:	b002      	add	sp, #8
 8002c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c32:	68a3      	ldr	r3, [r4, #8]
 8002c34:	6822      	ldr	r2, [r4, #0]
 8002c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c3a:	d10d      	bne.n	8002c58 <HAL_UART_Transmit+0x9e>
 8002c3c:	6923      	ldr	r3, [r4, #16]
 8002c3e:	b95b      	cbnz	r3, 8002c58 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002c40:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c48:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002c4a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8002c56:	e7d1      	b.n	8002bfc <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002c58:	782b      	ldrb	r3, [r5, #0]
 8002c5a:	8513      	strh	r3, [r2, #40]	; 0x28
 8002c5c:	3501      	adds	r5, #1
 8002c5e:	e7f4      	b.n	8002c4a <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8002c60:	2001      	movs	r0, #1
 8002c62:	e7e3      	b.n	8002c2c <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8002c64:	2002      	movs	r0, #2
 8002c66:	e7e1      	b.n	8002c2c <HAL_UART_Transmit+0x72>

08002c68 <UART_CheckIdleState>:
{
 8002c68:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c6a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6c:	2600      	movs	r6, #0
 8002c6e:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8002c70:	f7fd fc4a 	bl	8000508 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c74:	6823      	ldr	r3, [r4, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002c7a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c7c:	d417      	bmi.n	8002cae <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c7e:	6823      	ldr	r3, [r4, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	075b      	lsls	r3, r3, #29
 8002c84:	d50a      	bpl.n	8002c9c <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	462b      	mov	r3, r5
 8002c90:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c94:	4620      	mov	r0, r4
 8002c96:	f7ff ff5f 	bl	8002b58 <UART_WaitOnFlagUntilTimeout>
 8002c9a:	b9a0      	cbnz	r0, 8002cc6 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8002c9c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002c9e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002ca0:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8002ca4:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8002ca8:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8002cac:	e00c      	b.n	8002cc8 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	4632      	mov	r2, r6
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002cbc:	4620      	mov	r0, r4
 8002cbe:	f7ff ff4b 	bl	8002b58 <UART_WaitOnFlagUntilTimeout>
 8002cc2:	2800      	cmp	r0, #0
 8002cc4:	d0db      	beq.n	8002c7e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002cc6:	2003      	movs	r0, #3
}
 8002cc8:	b002      	add	sp, #8
 8002cca:	bd70      	pop	{r4, r5, r6, pc}

08002ccc <HAL_UART_Init>:
{
 8002ccc:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002cce:	4604      	mov	r4, r0
 8002cd0:	b360      	cbz	r0, 8002d2c <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002cd2:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002cd6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002cda:	b91b      	cbnz	r3, 8002ce4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002cdc:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002ce0:	f000 fa9a 	bl	8003218 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002ce4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002ce6:	2324      	movs	r3, #36	; 0x24
 8002ce8:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8002cec:	6813      	ldr	r3, [r2, #0]
 8002cee:	f023 0301 	bic.w	r3, r3, #1
 8002cf2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f7ff fd43 	bl	8002780 <UART_SetConfig>
 8002cfa:	2801      	cmp	r0, #1
 8002cfc:	d016      	beq.n	8002d2c <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d00:	b113      	cbz	r3, 8002d08 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002d02:	4620      	mov	r0, r4
 8002d04:	f7ff fed4 	bl	8002ab0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d08:	6823      	ldr	r3, [r4, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d18:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002d20:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002d22:	601a      	str	r2, [r3, #0]
}
 8002d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002d28:	f7ff bf9e 	b.w	8002c68 <UART_CheckIdleState>
}
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	bd10      	pop	{r4, pc}

08002d30 <BMP280_read8b>:




uint8_t BMP280_read8b(uint8_t address)
{
 8002d30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t tmp;

	HAL_I2C_Mem_Read(BMP280_I2C_handler, BMP280_IC2ADDRESS, address, 1, &tmp, 1, 10);
 8002d32:	230a      	movs	r3, #10
 8002d34:	f10d 0217 	add.w	r2, sp, #23
 8002d38:	9302      	str	r3, [sp, #8]
 8002d3a:	9200      	str	r2, [sp, #0]
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	4602      	mov	r2, r0
 8002d40:	4805      	ldr	r0, [pc, #20]	; (8002d58 <BMP280_read8b+0x28>)
 8002d42:	9301      	str	r3, [sp, #4]
 8002d44:	21ec      	movs	r1, #236	; 0xec
 8002d46:	6800      	ldr	r0, [r0, #0]
 8002d48:	f7fe f87a 	bl	8000e40 <HAL_I2C_Mem_Read>

	return tmp;
}
 8002d4c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8002d50:	b007      	add	sp, #28
 8002d52:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d56:	bf00      	nop
 8002d58:	2000002c 	.word	0x2000002c

08002d5c <BMP280_read16b>:

uint16_t BMP280_read16b(uint8_t address)
{
 8002d5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t tmp[2];
	// tmp without dereferece bc tmp is a table
	HAL_I2C_Mem_Read(BMP280_I2C_handler, BMP280_IC2ADDRESS, address, 1, tmp, 2, 10);
 8002d5e:	230a      	movs	r3, #10
 8002d60:	9302      	str	r3, [sp, #8]
 8002d62:	2302      	movs	r3, #2
 8002d64:	9301      	str	r3, [sp, #4]
 8002d66:	4602      	mov	r2, r0
 8002d68:	ab05      	add	r3, sp, #20
 8002d6a:	4808      	ldr	r0, [pc, #32]	; (8002d8c <BMP280_read16b+0x30>)
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	21ec      	movs	r1, #236	; 0xec
 8002d70:	2301      	movs	r3, #1
 8002d72:	6800      	ldr	r0, [r0, #0]
 8002d74:	f7fe f864 	bl	8000e40 <HAL_I2C_Mem_Read>

	return (tmp[0]<<8 | tmp[1]); // combines two 8b into one 16b
 8002d78:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8002d7c:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
 8002d80:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8002d84:	b007      	add	sp, #28
 8002d86:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d8a:	bf00      	nop
 8002d8c:	2000002c 	.word	0x2000002c

08002d90 <BMP280_write8b>:

	return (tmp[0]<<16 | tmp[1]<<8 | tmp[2]); // combines three 8b into one 24b
}

void BMP280_write8b(uint8_t address, uint8_t data)
{
 8002d90:	b530      	push	{r4, r5, lr}
	if(HAL_I2C_IsDeviceReady(BMP280_I2C_handler,BMP280_IC2ADDRESS, 10, 100)==HAL_OK)
 8002d92:	4c0d      	ldr	r4, [pc, #52]	; (8002dc8 <BMP280_write8b+0x38>)
{
 8002d94:	b087      	sub	sp, #28
 8002d96:	4605      	mov	r5, r0
 8002d98:	f88d 1017 	strb.w	r1, [sp, #23]
	if(HAL_I2C_IsDeviceReady(BMP280_I2C_handler,BMP280_IC2ADDRESS, 10, 100)==HAL_OK)
 8002d9c:	2364      	movs	r3, #100	; 0x64
 8002d9e:	220a      	movs	r2, #10
 8002da0:	21ec      	movs	r1, #236	; 0xec
 8002da2:	6820      	ldr	r0, [r4, #0]
 8002da4:	f7fe f90a 	bl	8000fbc <HAL_I2C_IsDeviceReady>
 8002da8:	b958      	cbnz	r0, 8002dc2 <BMP280_write8b+0x32>
	{
		HAL_I2C_Mem_Write(BMP280_I2C_handler, BMP280_IC2ADDRESS, address, 1, &data, 1, 10);
 8002daa:	230a      	movs	r3, #10
 8002dac:	f10d 0217 	add.w	r2, sp, #23
 8002db0:	9302      	str	r3, [sp, #8]
 8002db2:	2301      	movs	r3, #1
 8002db4:	9200      	str	r2, [sp, #0]
 8002db6:	9301      	str	r3, [sp, #4]
 8002db8:	462a      	mov	r2, r5
 8002dba:	21ec      	movs	r1, #236	; 0xec
 8002dbc:	6820      	ldr	r0, [r4, #0]
 8002dbe:	f7fd ff87 	bl	8000cd0 <HAL_I2C_Mem_Write>
	}
}
 8002dc2:	b007      	add	sp, #28
 8002dc4:	bd30      	pop	{r4, r5, pc}
 8002dc6:	bf00      	nop
 8002dc8:	2000002c 	.word	0x2000002c

08002dcc <BMP280_init>:
	BMP280_write8b(BMP280_CONFIG,((standbyTime & 0x7) << 5  | (filter & 0x7) << 2 ) & 0xFC);
}


void BMP280_init(I2C_HandleTypeDef *i2c_hndlr, uint8_t pOversamp, uint8_t tempRes, uint8_t mode)
{
 8002dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dce:	4617      	mov	r7, r2
	BMP280_I2C_handler=i2c_hndlr;
	BMP280->powerMode=mode;
 8002dd0:	4c2c      	ldr	r4, [pc, #176]	; (8002e84 <BMP280_init+0xb8>)
	BMP280_I2C_handler=i2c_hndlr;
 8002dd2:	4a2d      	ldr	r2, [pc, #180]	; (8002e88 <BMP280_init+0xbc>)
 8002dd4:	6010      	str	r0, [r2, #0]
	BMP280->powerMode=mode;
 8002dd6:	6822      	ldr	r2, [r4, #0]
	if(BMP280->powerMode == BMP280_MODE_STANDARD)
 8002dd8:	2b03      	cmp	r3, #3
{
 8002dda:	460e      	mov	r6, r1
	BMP280->powerMode=mode;
 8002ddc:	7093      	strb	r3, [r2, #2]
	if(BMP280->powerMode == BMP280_MODE_STANDARD)
 8002dde:	d103      	bne.n	8002de8 <BMP280_init+0x1c>
	BMP280_write8b(BMP280_CONFIG,((standbyTime & 0x7) << 5  | (filter & 0x7) << 2 ) & 0xFC);
 8002de0:	2184      	movs	r1, #132	; 0x84
 8002de2:	20f5      	movs	r0, #245	; 0xf5
 8002de4:	f7ff ffd4 	bl	8002d90 <BMP280_write8b>
	{
		BMP280_setConfig(BMP280_STNDBY_500,BMP280_FILTER_2);
	}
	BMP280->temperatureResolution=tempRes;
 8002de8:	6825      	ldr	r5, [r4, #0]
	BMP280->pressureOversampling=pOversamp;


	/* read calibration data */

	BMP280->t1=BMP280_read16b(BMP280_DIG_T1);
 8002dea:	2088      	movs	r0, #136	; 0x88
	BMP280->temperatureResolution=tempRes;
 8002dec:	702f      	strb	r7, [r5, #0]
	BMP280->pressureOversampling=pOversamp;
 8002dee:	706e      	strb	r6, [r5, #1]
	BMP280->t1=BMP280_read16b(BMP280_DIG_T1);
 8002df0:	f7ff ffb4 	bl	8002d5c <BMP280_read16b>
 8002df4:	81e8      	strh	r0, [r5, #14]
	BMP280->t2=BMP280_read16b(BMP280_DIG_T2);
 8002df6:	208a      	movs	r0, #138	; 0x8a
 8002df8:	6825      	ldr	r5, [r4, #0]
 8002dfa:	f7ff ffaf 	bl	8002d5c <BMP280_read16b>
 8002dfe:	8228      	strh	r0, [r5, #16]
	BMP280->t3=BMP280_read16b(BMP280_DIG_T3);
 8002e00:	208c      	movs	r0, #140	; 0x8c
 8002e02:	6825      	ldr	r5, [r4, #0]
 8002e04:	f7ff ffaa 	bl	8002d5c <BMP280_read16b>
 8002e08:	8268      	strh	r0, [r5, #18]

	BMP280->p1=BMP280_read16b(BMP280_DIG_P1);
 8002e0a:	208e      	movs	r0, #142	; 0x8e
 8002e0c:	6825      	ldr	r5, [r4, #0]
 8002e0e:	f7ff ffa5 	bl	8002d5c <BMP280_read16b>
 8002e12:	82a8      	strh	r0, [r5, #20]
	BMP280->p2=BMP280_read16b(BMP280_DIG_P2);
 8002e14:	2090      	movs	r0, #144	; 0x90
 8002e16:	6825      	ldr	r5, [r4, #0]
 8002e18:	f7ff ffa0 	bl	8002d5c <BMP280_read16b>
 8002e1c:	82e8      	strh	r0, [r5, #22]
	BMP280->p3=BMP280_read16b(BMP280_DIG_P3);
 8002e1e:	2092      	movs	r0, #146	; 0x92
 8002e20:	6825      	ldr	r5, [r4, #0]
 8002e22:	f7ff ff9b 	bl	8002d5c <BMP280_read16b>
 8002e26:	8328      	strh	r0, [r5, #24]
	BMP280->p4=BMP280_read16b(BMP280_DIG_P4);
 8002e28:	2094      	movs	r0, #148	; 0x94
 8002e2a:	6825      	ldr	r5, [r4, #0]
 8002e2c:	f7ff ff96 	bl	8002d5c <BMP280_read16b>
 8002e30:	8368      	strh	r0, [r5, #26]
	BMP280->p5=BMP280_read16b(BMP280_DIG_P5);
 8002e32:	2096      	movs	r0, #150	; 0x96
 8002e34:	6825      	ldr	r5, [r4, #0]
 8002e36:	f7ff ff91 	bl	8002d5c <BMP280_read16b>
 8002e3a:	83a8      	strh	r0, [r5, #28]
	BMP280->p6=BMP280_read16b(BMP280_DIG_P6);
 8002e3c:	2098      	movs	r0, #152	; 0x98
 8002e3e:	6825      	ldr	r5, [r4, #0]
 8002e40:	f7ff ff8c 	bl	8002d5c <BMP280_read16b>
 8002e44:	83e8      	strh	r0, [r5, #30]
	BMP280->p7=BMP280_read16b(BMP280_DIG_P7);
 8002e46:	209a      	movs	r0, #154	; 0x9a
 8002e48:	6825      	ldr	r5, [r4, #0]
 8002e4a:	f7ff ff87 	bl	8002d5c <BMP280_read16b>
 8002e4e:	8428      	strh	r0, [r5, #32]
	BMP280->p9=BMP280_read16b(BMP280_DIG_P8);
 8002e50:	209c      	movs	r0, #156	; 0x9c
 8002e52:	6825      	ldr	r5, [r4, #0]
 8002e54:	f7ff ff82 	bl	8002d5c <BMP280_read16b>
 8002e58:	84a8      	strh	r0, [r5, #36]	; 0x24
	BMP280->p9=BMP280_read16b(BMP280_DIG_P9);
 8002e5a:	209e      	movs	r0, #158	; 0x9e
 8002e5c:	6825      	ldr	r5, [r4, #0]
 8002e5e:	f7ff ff7d 	bl	8002d5c <BMP280_read16b>

	BMP280_write8b(BMP280_CTRL_MEASUREMENTS,((BMP280->temperatureResolution & 0x7)<<5) |
 8002e62:	6823      	ldr	r3, [r4, #0]
	BMP280->p9=BMP280_read16b(BMP280_DIG_P9);
 8002e64:	84a8      	strh	r0, [r5, #36]	; 0x24
	BMP280_write8b(BMP280_CTRL_MEASUREMENTS,((BMP280->temperatureResolution & 0x7)<<5) |
 8002e66:	781a      	ldrb	r2, [r3, #0]
			((BMP280->pressureOversampling & 0x7)<<2) | BMP280->powerMode);
 8002e68:	7899      	ldrb	r1, [r3, #2]
 8002e6a:	785b      	ldrb	r3, [r3, #1]
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	f003 031c 	and.w	r3, r3, #28
 8002e72:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
 8002e76:	4319      	orrs	r1, r3
	BMP280_write8b(BMP280_CTRL_MEASUREMENTS,((BMP280->temperatureResolution & 0x7)<<5) |
 8002e78:	b2c9      	uxtb	r1, r1
 8002e7a:	20f4      	movs	r0, #244	; 0xf4
}
 8002e7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	BMP280_write8b(BMP280_CTRL_MEASUREMENTS,((BMP280->temperatureResolution & 0x7)<<5) |
 8002e80:	f7ff bf86 	b.w	8002d90 <BMP280_write8b>
 8002e84:	20000028 	.word	0x20000028
 8002e88:	2000002c 	.word	0x2000002c

08002e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e8c:	b530      	push	{r4, r5, lr}
 8002e8e:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e90:	2514      	movs	r5, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e92:	2244      	movs	r2, #68	; 0x44
 8002e94:	2100      	movs	r1, #0
 8002e96:	a805      	add	r0, sp, #20
 8002e98:	f000 fafe 	bl	8003498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e9c:	462a      	mov	r2, r5
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4668      	mov	r0, sp
 8002ea2:	f000 faf9 	bl	8003498 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	2288      	movs	r2, #136	; 0x88
 8002eaa:	a816      	add	r0, sp, #88	; 0x58
 8002eac:	f000 faf4 	bl	8003498 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002eb0:	2309      	movs	r3, #9
 8002eb2:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002eb4:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002eb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eba:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002ebc:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ebe:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ec0:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002ec2:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ec4:	eb0d 0005 	add.w	r0, sp, r5
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002ec8:	2207      	movs	r2, #7
 8002eca:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ecc:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ece:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002ed0:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002ed2:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 20;
 8002ed4:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ed6:	f7fe fc75 	bl	80017c4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002eda:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002edc:	2104      	movs	r1, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ede:	e88d 0018 	stmia.w	sp, {r3, r4}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002ee2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ee4:	2400      	movs	r4, #0
 8002ee6:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ee8:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002eea:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002eec:	f7fe fe90 	bl	8001c10 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8002ef0:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <SystemClock_Config+0x88>)
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ef2:	9425      	str	r4, [sp, #148]	; 0x94
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002ef4:	942a      	str	r4, [sp, #168]	; 0xa8
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ef6:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002ef8:	f44f 7400 	mov.w	r4, #512	; 0x200
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8002efc:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002efe:	9437      	str	r4, [sp, #220]	; 0xdc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f00:	f7ff f87e 	bl	8002000 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /**Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 8002f04:	f7fe ff58 	bl	8001db8 <HAL_RCC_EnableCSS>
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002f08:	4620      	mov	r0, r4
 8002f0a:	f7fe fb8f 	bl	800162c <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 8002f0e:	b039      	add	sp, #228	; 0xe4
 8002f10:	bd30      	pop	{r4, r5, pc}
 8002f12:	bf00      	nop
 8002f14:	00020042 	.word	0x00020042

08002f18 <main>:
{
 8002f18:	b580      	push	{r7, lr}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f1a:	4d72      	ldr	r5, [pc, #456]	; (80030e4 <main+0x1cc>)
  hi2c1.Instance = I2C1;
 8002f1c:	4e72      	ldr	r6, [pc, #456]	; (80030e8 <main+0x1d0>)
{
 8002f1e:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8002f20:	f7fd fada 	bl	80004d8 <HAL_Init>
  SystemClock_Config();
 8002f24:	f7ff ffb2 	bl	8002e8c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f28:	2214      	movs	r2, #20
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	a807      	add	r0, sp, #28
 8002f2e:	f000 fab3 	bl	8003498 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f32:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8002f34:	486d      	ldr	r0, [pc, #436]	; (80030ec <main+0x1d4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f36:	f043 0304 	orr.w	r3, r3, #4
 8002f3a:	64eb      	str	r3, [r5, #76]	; 0x4c
 8002f3c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	9302      	str	r3, [sp, #8]
 8002f44:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f46:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f4c:	64eb      	str	r3, [r5, #76]	; 0x4c
 8002f4e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f54:	9303      	str	r3, [sp, #12]
 8002f56:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f58:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8002f60:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	9304      	str	r3, [sp, #16]
 8002f68:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f6a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002f6c:	f043 0302 	orr.w	r3, r3, #2
 8002f70:	64eb      	str	r3, [r5, #76]	; 0x4c
 8002f72:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	9305      	str	r3, [sp, #20]
 8002f7a:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f7c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002f7e:	f043 0310 	orr.w	r3, r3, #16
 8002f82:	64eb      	str	r3, [r5, #76]	; 0x4c
 8002f84:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2104      	movs	r1, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f90:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8002f92:	f7fd fccd 	bl	8000930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8002f96:	2200      	movs	r2, #0
 8002f98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f9c:	4854      	ldr	r0, [pc, #336]	; (80030f0 <main+0x1d8>)

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9e:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8002fa0:	f7fd fcc6 	bl	8000930 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002fa4:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fa6:	4b53      	ldr	r3, [pc, #332]	; (80030f4 <main+0x1dc>)
 8002fa8:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002faa:	a907      	add	r1, sp, #28
 8002fac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002fb0:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb2:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002fb4:	f7fd fbe0 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8002fb8:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8002fba:	a907      	add	r1, sp, #28
 8002fbc:	484b      	ldr	r0, [pc, #300]	; (80030ec <main+0x1d4>)
  GPIO_InitStruct.Pin = LD4_Pin;
 8002fbe:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc0:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8002fc6:	f7fd fbd7 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD5_Pin */
  GPIO_InitStruct.Pin = LD5_Pin;
 8002fca:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD5_GPIO_Port, &GPIO_InitStruct);
 8002fce:	a907      	add	r1, sp, #28
 8002fd0:	4847      	ldr	r0, [pc, #284]	; (80030f0 <main+0x1d8>)
  GPIO_InitStruct.Pin = LD5_Pin;
 8002fd2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd4:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LD5_GPIO_Port, &GPIO_InitStruct);
 8002fda:	f7fd fbcd 	bl	8000778 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002fde:	4622      	mov	r2, r4
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	2006      	movs	r0, #6
 8002fe4:	f7fd fab6 	bl	8000554 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002fe8:	2006      	movs	r0, #6
 8002fea:	f7fd fae7 	bl	80005bc <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fee:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8002ff0:	433b      	orrs	r3, r7
 8002ff2:	64ab      	str	r3, [r5, #72]	; 0x48
 8002ff4:	6cab      	ldr	r3, [r5, #72]	; 0x48
  huart2.Instance = USART2;
 8002ff6:	4d40      	ldr	r5, [pc, #256]	; (80030f8 <main+0x1e0>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ff8:	403b      	ands	r3, r7
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002ffa:	4622      	mov	r2, r4
 8002ffc:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ffe:	9307      	str	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8003000:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003002:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8003004:	f7fd faa6 	bl	8000554 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003008:	2010      	movs	r0, #16
 800300a:	f7fd fad7 	bl	80005bc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800300e:	4621      	mov	r1, r4
 8003010:	4622      	mov	r2, r4
 8003012:	2011      	movs	r0, #17
 8003014:	f7fd fa9e 	bl	8000554 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003018:	2011      	movs	r0, #17
 800301a:	f7fd facf 	bl	80005bc <HAL_NVIC_EnableIRQ>
  hrtc.Instance = RTC;
 800301e:	4837      	ldr	r0, [pc, #220]	; (80030fc <main+0x1e4>)
 8003020:	4b37      	ldr	r3, [pc, #220]	; (8003100 <main+0x1e8>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003022:	6104      	str	r4, [r0, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003024:	e880 0018 	stmia.w	r0, {r3, r4}
  hrtc.Init.AsynchPrediv = 127;
 8003028:	237f      	movs	r3, #127	; 0x7f
 800302a:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 800302c:	23ff      	movs	r3, #255	; 0xff
 800302e:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003030:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003032:	6184      	str	r4, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003034:	61c4      	str	r4, [r0, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003036:	f7ff f9fd 	bl	8002434 <HAL_RTC_Init>
  hi2c1.Init.Timing = 0x10909CEC;
 800303a:	4a32      	ldr	r2, [pc, #200]	; (8003104 <main+0x1ec>)
 800303c:	4b32      	ldr	r3, [pc, #200]	; (8003108 <main+0x1f0>)
  hi2c1.Init.OwnAddress1 = 0;
 800303e:	60b4      	str	r4, [r6, #8]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003040:	4630      	mov	r0, r6
  hi2c1.Init.Timing = 0x10909CEC;
 8003042:	e886 000c 	stmia.w	r6, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003046:	60f7      	str	r7, [r6, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003048:	6134      	str	r4, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800304a:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800304c:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800304e:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003050:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003052:	f7fd fdec 	bl	8000c2e <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003056:	4621      	mov	r1, r4
 8003058:	4630      	mov	r0, r6
 800305a:	f7fe fa93 	bl	8001584 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800305e:	4621      	mov	r1, r4
 8003060:	4630      	mov	r0, r6
 8003062:	f7fe fab5 	bl	80015d0 <HAL_I2CEx_ConfigDigitalFilter>
  huart2.Init.BaudRate = 9600;
 8003066:	4929      	ldr	r1, [pc, #164]	; (800310c <main+0x1f4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003068:	60ac      	str	r4, [r5, #8]
  huart2.Init.BaudRate = 9600;
 800306a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800306e:	e885 000a 	stmia.w	r5, {r1, r3}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003072:	4628      	mov	r0, r5
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003074:	230c      	movs	r3, #12
 8003076:	616b      	str	r3, [r5, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003078:	60ec      	str	r4, [r5, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800307a:	612c      	str	r4, [r5, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800307c:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800307e:	61ec      	str	r4, [r5, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003080:	622c      	str	r4, [r5, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003082:	626c      	str	r4, [r5, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003084:	f7ff fe22 	bl	8002ccc <HAL_UART_Init>
  BMP280_init(&hi2c1,BMP280_PRESSURE_STANDARD,BMP280_TEMPERATURE_16B,BMP280_MODE_FORCED);
 8003088:	463b      	mov	r3, r7
 800308a:	463a      	mov	r2, r7
 800308c:	2103      	movs	r1, #3
 800308e:	4630      	mov	r0, r6
 8003090:	f7ff fe9c 	bl	8002dcc <BMP280_init>
  uint8_t ctrl=(((BMP280_TEMPERATURE_16B & 0x7)<<5) | ((BMP280_PRESSURE_STANDARD & 0x7)<<2) |
 8003094:	232d      	movs	r3, #45	; 0x2d
 8003096:	f88d 3007 	strb.w	r3, [sp, #7]
	  id=BMP280_read8b(0xD0);
 800309a:	20d0      	movs	r0, #208	; 0xd0
 800309c:	f7ff fe48 	bl	8002d30 <BMP280_read8b>
 80030a0:	f88d 0005 	strb.w	r0, [sp, #5]
	  config=BMP280_read8b(BMP280_CTRL_MEASUREMENTS);
 80030a4:	20f4      	movs	r0, #244	; 0xf4
 80030a6:	f7ff fe43 	bl	8002d30 <BMP280_read8b>
	  HAL_UART_Transmit(&huart2,&id,8,10);
 80030aa:	f10d 0105 	add.w	r1, sp, #5
	  config=BMP280_read8b(BMP280_CTRL_MEASUREMENTS);
 80030ae:	f88d 0006 	strb.w	r0, [sp, #6]
	  HAL_UART_Transmit(&huart2,&id,8,10);
 80030b2:	230a      	movs	r3, #10
 80030b4:	2208      	movs	r2, #8
 80030b6:	4628      	mov	r0, r5
 80030b8:	f7ff fd7f 	bl	8002bba <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2,&config,8,10);
 80030bc:	f10d 0106 	add.w	r1, sp, #6
 80030c0:	230a      	movs	r3, #10
 80030c2:	2208      	movs	r2, #8
 80030c4:	4628      	mov	r0, r5
 80030c6:	f7ff fd78 	bl	8002bba <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2,&ctrl,8,10);
 80030ca:	230a      	movs	r3, #10
 80030cc:	2208      	movs	r2, #8
 80030ce:	f10d 0107 	add.w	r1, sp, #7
 80030d2:	4628      	mov	r0, r5
 80030d4:	f7ff fd71 	bl	8002bba <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80030d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030dc:	f7fd fa1a 	bl	8000514 <HAL_Delay>
 80030e0:	e7db      	b.n	800309a <main+0x182>
 80030e2:	bf00      	nop
 80030e4:	40021000 	.word	0x40021000
 80030e8:	20000078 	.word	0x20000078
 80030ec:	48000400 	.word	0x48000400
 80030f0:	48001000 	.word	0x48001000
 80030f4:	10110000 	.word	0x10110000
 80030f8:	20000130 	.word	0x20000130
 80030fc:	2000010c 	.word	0x2000010c
 8003100:	40002800 	.word	0x40002800
 8003104:	40005400 	.word	0x40005400
 8003108:	10909cec 	.word	0x10909cec
 800310c:	40004400 	.word	0x40004400

08003110 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003110:	6802      	ldr	r2, [r0, #0]
 8003112:	4b03      	ldr	r3, [pc, #12]	; (8003120 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8003114:	429a      	cmp	r2, r3
 8003116:	d101      	bne.n	800311c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003118:	f7fd b9ee 	b.w	80004f8 <HAL_IncTick>
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40012c00 	.word	0x40012c00

08003124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003124:	4770      	bx	lr
	...

08003128 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003128:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <HAL_MspInit+0x40>)
{
 800312a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800312c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	661a      	str	r2, [r3, #96]	; 0x60
 8003134:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003136:	f002 0201 	and.w	r2, r2, #1
 800313a:	9200      	str	r2, [sp, #0]
 800313c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800313e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003140:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003144:	659a      	str	r2, [r3, #88]	; 0x58
 8003146:	6d9b      	ldr	r3, [r3, #88]	; 0x58

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003148:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 800314a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314e:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003150:	4611      	mov	r1, r2
 8003152:	2005      	movs	r0, #5
  __HAL_RCC_PWR_CLK_ENABLE();
 8003154:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003156:	f7fd f9fd 	bl	8000554 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800315a:	2005      	movs	r0, #5
 800315c:	f7fd fa2e 	bl	80005bc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003160:	b003      	add	sp, #12
 8003162:	f85d fb04 	ldr.w	pc, [sp], #4
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000

0800316c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800316c:	b510      	push	{r4, lr}
 800316e:	4604      	mov	r4, r0
 8003170:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003172:	2214      	movs	r2, #20
 8003174:	2100      	movs	r1, #0
 8003176:	a803      	add	r0, sp, #12
 8003178:	f000 f98e 	bl	8003498 <memset>
  if(hi2c->Instance==I2C1)
 800317c:	6822      	ldr	r2, [r4, #0]
 800317e:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <HAL_I2C_MspInit+0x80>)
 8003180:	429a      	cmp	r2, r3
 8003182:	d130      	bne.n	80031e6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003184:	4c1a      	ldr	r4, [pc, #104]	; (80031f0 <HAL_I2C_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003186:	481b      	ldr	r0, [pc, #108]	; (80031f4 <HAL_I2C_MspInit+0x88>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003188:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800318a:	f043 0302 	orr.w	r3, r3, #2
 800318e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003190:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	9301      	str	r3, [sp, #4]
 8003198:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800319a:	23c0      	movs	r3, #192	; 0xc0
 800319c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800319e:	2312      	movs	r3, #18
 80031a0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031a2:	2301      	movs	r3, #1
 80031a4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a6:	2303      	movs	r3, #3
 80031a8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031aa:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031ac:	2304      	movs	r3, #4
 80031ae:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b0:	f7fd fae2 	bl	8000778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80031b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031ba:	65a3      	str	r3, [r4, #88]	; 0x58
 80031bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80031be:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80031c4:	4611      	mov	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031c6:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80031c8:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031ca:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80031cc:	f7fd f9c2 	bl	8000554 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80031d0:	201f      	movs	r0, #31
 80031d2:	f7fd f9f3 	bl	80005bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2020      	movs	r0, #32
 80031da:	4611      	mov	r1, r2
 80031dc:	f7fd f9ba 	bl	8000554 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80031e0:	2020      	movs	r0, #32
 80031e2:	f7fd f9eb 	bl	80005bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031e6:	b008      	add	sp, #32
 80031e8:	bd10      	pop	{r4, pc}
 80031ea:	bf00      	nop
 80031ec:	40005400 	.word	0x40005400
 80031f0:	40021000 	.word	0x40021000
 80031f4:	48000400 	.word	0x48000400

080031f8 <HAL_RTC_MspInit>:
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 80031f8:	6802      	ldr	r2, [r0, #0]
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <HAL_RTC_MspInit+0x18>)
 80031fc:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80031fe:	bf01      	itttt	eq
 8003200:	4a04      	ldreq	r2, [pc, #16]	; (8003214 <HAL_RTC_MspInit+0x1c>)
 8003202:	f8d2 3090 	ldreq.w	r3, [r2, #144]	; 0x90
 8003206:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 800320a:	f8c2 3090 	streq.w	r3, [r2, #144]	; 0x90
 800320e:	4770      	bx	lr
 8003210:	40002800 	.word	0x40002800
 8003214:	40021000 	.word	0x40021000

08003218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003218:	b570      	push	{r4, r5, r6, lr}
 800321a:	4605      	mov	r5, r0
 800321c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321e:	2214      	movs	r2, #20
 8003220:	2100      	movs	r1, #0
 8003222:	a803      	add	r0, sp, #12
 8003224:	f000 f938 	bl	8003498 <memset>
  if(huart->Instance==USART2)
 8003228:	682a      	ldr	r2, [r5, #0]
 800322a:	4b29      	ldr	r3, [pc, #164]	; (80032d0 <HAL_UART_MspInit+0xb8>)
 800322c:	429a      	cmp	r2, r3
 800322e:	d14c      	bne.n	80032ca <HAL_UART_MspInit+0xb2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003230:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003234:	2602      	movs	r6, #2
    __HAL_RCC_USART2_CLK_ENABLE();
 8003236:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003238:	4c26      	ldr	r4, [pc, #152]	; (80032d4 <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800323a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800323e:	659a      	str	r2, [r3, #88]	; 0x58
 8003240:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003242:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003246:	9201      	str	r2, [sp, #4]
 8003248:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800324c:	f042 0201 	orr.w	r2, r2, #1
 8003250:	64da      	str	r2, [r3, #76]	; 0x4c
 8003252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003254:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	9302      	str	r3, [sp, #8]
 800325c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800325e:	230c      	movs	r3, #12
 8003260:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003262:	2303      	movs	r3, #3
 8003264:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800326a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800326c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800326e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003270:	f7fd fa82 	bl	8000778 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003274:	4b18      	ldr	r3, [pc, #96]	; (80032d8 <HAL_UART_MspInit+0xc0>)
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003276:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8003278:	e884 0048 	stmia.w	r4, {r3, r6}
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800327c:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800327e:	2300      	movs	r3, #0
 8003280:	60a3      	str	r3, [r4, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003282:	60e3      	str	r3, [r4, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003284:	6122      	str	r2, [r4, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003286:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003288:	61a3      	str	r3, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800328a:	61e3      	str	r3, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800328c:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800328e:	f7fd f9a1 	bl	80005d4 <HAL_DMA_Init>
 8003292:	b108      	cbz	r0, 8003298 <HAL_UART_MspInit+0x80>
    {
      Error_Handler();
 8003294:	f7ff ff46 	bl	8003124 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003298:	4b10      	ldr	r3, [pc, #64]	; (80032dc <HAL_UART_MspInit+0xc4>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800329a:	66ec      	str	r4, [r5, #108]	; 0x6c
 800329c:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800329e:	4c10      	ldr	r4, [pc, #64]	; (80032e0 <HAL_UART_MspInit+0xc8>)
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032a0:	2602      	movs	r6, #2
 80032a2:	f04f 0e10 	mov.w	lr, #16
 80032a6:	e884 4048 	stmia.w	r4, {r3, r6, lr}
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032aa:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032ac:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80032ae:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032b0:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032b2:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032b4:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032b6:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80032b8:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032ba:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80032bc:	f7fd f98a 	bl	80005d4 <HAL_DMA_Init>
 80032c0:	b108      	cbz	r0, 80032c6 <HAL_UART_MspInit+0xae>
    {
      Error_Handler();
 80032c2:	f7ff ff2f 	bl	8003124 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80032c6:	66ac      	str	r4, [r5, #104]	; 0x68
 80032c8:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80032ca:	b008      	add	sp, #32
 80032cc:	bd70      	pop	{r4, r5, r6, pc}
 80032ce:	bf00      	nop
 80032d0:	40004400 	.word	0x40004400
 80032d4:	20000030 	.word	0x20000030
 80032d8:	4002006c 	.word	0x4002006c
 80032dc:	40020080 	.word	0x40020080
 80032e0:	200000c4 	.word	0x200000c4

080032e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e4:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 80032e6:	4601      	mov	r1, r0
{
 80032e8:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 80032ea:	2200      	movs	r2, #0
 80032ec:	2019      	movs	r0, #25
 80032ee:	f7fd f931 	bl	8000554 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 80032f2:	2019      	movs	r0, #25
 80032f4:	f7fd f962 	bl	80005bc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80032f8:	4b14      	ldr	r3, [pc, #80]	; (800334c <HAL_InitTick+0x68>)
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80032fa:	4c15      	ldr	r4, [pc, #84]	; (8003350 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 80032fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003302:	661a      	str	r2, [r3, #96]	; 0x60
 8003304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800330a:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800330c:	a901      	add	r1, sp, #4
 800330e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003310:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003312:	f7fe fd33 	bl	8001d7c <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003316:	f7fe fd1f 	bl	8001d58 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 800331a:	4b0e      	ldr	r3, [pc, #56]	; (8003354 <HAL_InitTick+0x70>)
 800331c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800331e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003322:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <HAL_InitTick+0x74>)
 8003326:	fbb0 f0f3 	udiv	r0, r0, r3
 800332a:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 800332c:	2300      	movs	r3, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 800332e:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003330:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8003332:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003334:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003336:	f7ff fa05 	bl	8002744 <HAL_TIM_Base_Init>
 800333a:	b920      	cbnz	r0, 8003346 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800333c:	4620      	mov	r0, r4
 800333e:	f7ff f8cf 	bl	80024e0 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8003342:	b008      	add	sp, #32
 8003344:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8003346:	2001      	movs	r0, #1
 8003348:	e7fb      	b.n	8003342 <HAL_InitTick+0x5e>
 800334a:	bf00      	nop
 800334c:	40021000 	.word	0x40021000
 8003350:	200001a8 	.word	0x200001a8
 8003354:	40012c00 	.word	0x40012c00
 8003358:	000f4240 	.word	0x000f4240

0800335c <NMI_Handler>:
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800335c:	f7fe bd36 	b.w	8001dcc <HAL_RCC_NMI_IRQHandler>

08003360 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003360:	e7fe      	b.n	8003360 <HardFault_Handler>

08003362 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003362:	e7fe      	b.n	8003362 <MemManage_Handler>

08003364 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003364:	e7fe      	b.n	8003364 <BusFault_Handler>

08003366 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003366:	e7fe      	b.n	8003366 <UsageFault_Handler>

08003368 <SVC_Handler>:
 8003368:	4770      	bx	lr

0800336a <DebugMon_Handler>:
 800336a:	4770      	bx	lr

0800336c <PendSV_Handler>:
 800336c:	4770      	bx	lr

0800336e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800336e:	4770      	bx	lr

08003370 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003370:	2001      	movs	r0, #1
 8003372:	f7fd bae3 	b.w	800093c <HAL_GPIO_EXTI_IRQHandler>
	...

08003378 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003378:	4801      	ldr	r0, [pc, #4]	; (8003380 <DMA1_Channel6_IRQHandler+0x8>)
 800337a:	f7fd b9b3 	b.w	80006e4 <HAL_DMA_IRQHandler>
 800337e:	bf00      	nop
 8003380:	20000030 	.word	0x20000030

08003384 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003384:	4801      	ldr	r0, [pc, #4]	; (800338c <DMA1_Channel7_IRQHandler+0x8>)
 8003386:	f7fd b9ad 	b.w	80006e4 <HAL_DMA_IRQHandler>
 800338a:	bf00      	nop
 800338c:	200000c4 	.word	0x200000c4

08003390 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003390:	4801      	ldr	r0, [pc, #4]	; (8003398 <TIM1_UP_TIM16_IRQHandler+0x8>)
 8003392:	f7ff b8c1 	b.w	8002518 <HAL_TIM_IRQHandler>
 8003396:	bf00      	nop
 8003398:	200001a8 	.word	0x200001a8

0800339c <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800339c:	4801      	ldr	r0, [pc, #4]	; (80033a4 <I2C1_EV_IRQHandler+0x8>)
 800339e:	f7fd be98 	b.w	80010d2 <HAL_I2C_EV_IRQHandler>
 80033a2:	bf00      	nop
 80033a4:	20000078 	.word	0x20000078

080033a8 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80033a8:	4801      	ldr	r0, [pc, #4]	; (80033b0 <I2C1_ER_IRQHandler+0x8>)
 80033aa:	f7fe b8a7 	b.w	80014fc <HAL_I2C_ER_IRQHandler>
 80033ae:	bf00      	nop
 80033b0:	20000078 	.word	0x20000078

080033b4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033b4:	490f      	ldr	r1, [pc, #60]	; (80033f4 <SystemInit+0x40>)
 80033b6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80033ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80033c2:	4b0d      	ldr	r3, [pc, #52]	; (80033f8 <SystemInit+0x44>)
 80033c4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80033c6:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80033c8:	f042 0201 	orr.w	r2, r2, #1
 80033cc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80033ce:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80033d6:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80033da:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80033dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033e0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033e8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80033ea:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80033f0:	608b      	str	r3, [r1, #8]
 80033f2:	4770      	bx	lr
 80033f4:	e000ed00 	.word	0xe000ed00
 80033f8:	40021000 	.word	0x40021000

080033fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80033fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003434 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003400:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003402:	e003      	b.n	800340c <LoopCopyDataInit>

08003404 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003406:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003408:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800340a:	3104      	adds	r1, #4

0800340c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800340c:	480b      	ldr	r0, [pc, #44]	; (800343c <LoopForever+0xa>)
	ldr	r3, =_edata
 800340e:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003410:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003412:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003414:	d3f6      	bcc.n	8003404 <CopyDataInit>
	ldr	r2, =_sbss
 8003416:	4a0b      	ldr	r2, [pc, #44]	; (8003444 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003418:	e002      	b.n	8003420 <LoopFillZerobss>

0800341a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800341a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800341c:	f842 3b04 	str.w	r3, [r2], #4

08003420 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003420:	4b09      	ldr	r3, [pc, #36]	; (8003448 <LoopForever+0x16>)
	cmp	r2, r3
 8003422:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003424:	d3f9      	bcc.n	800341a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003426:	f7ff ffc5 	bl	80033b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800342a:	f000 f811 	bl	8003450 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800342e:	f7ff fd73 	bl	8002f18 <main>

08003432 <LoopForever>:

LoopForever:
    b LoopForever
 8003432:	e7fe      	b.n	8003432 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003434:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003438:	0800352c 	.word	0x0800352c
	ldr	r0, =_sdata
 800343c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003440:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8003444:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8003448:	200001e8 	.word	0x200001e8

0800344c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800344c:	e7fe      	b.n	800344c <ADC1_2_IRQHandler>
	...

08003450 <__libc_init_array>:
 8003450:	b570      	push	{r4, r5, r6, lr}
 8003452:	4e0d      	ldr	r6, [pc, #52]	; (8003488 <__libc_init_array+0x38>)
 8003454:	4c0d      	ldr	r4, [pc, #52]	; (800348c <__libc_init_array+0x3c>)
 8003456:	1ba4      	subs	r4, r4, r6
 8003458:	10a4      	asrs	r4, r4, #2
 800345a:	2500      	movs	r5, #0
 800345c:	42a5      	cmp	r5, r4
 800345e:	d109      	bne.n	8003474 <__libc_init_array+0x24>
 8003460:	4e0b      	ldr	r6, [pc, #44]	; (8003490 <__libc_init_array+0x40>)
 8003462:	4c0c      	ldr	r4, [pc, #48]	; (8003494 <__libc_init_array+0x44>)
 8003464:	f000 f820 	bl	80034a8 <_init>
 8003468:	1ba4      	subs	r4, r4, r6
 800346a:	10a4      	asrs	r4, r4, #2
 800346c:	2500      	movs	r5, #0
 800346e:	42a5      	cmp	r5, r4
 8003470:	d105      	bne.n	800347e <__libc_init_array+0x2e>
 8003472:	bd70      	pop	{r4, r5, r6, pc}
 8003474:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003478:	4798      	blx	r3
 800347a:	3501      	adds	r5, #1
 800347c:	e7ee      	b.n	800345c <__libc_init_array+0xc>
 800347e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003482:	4798      	blx	r3
 8003484:	3501      	adds	r5, #1
 8003486:	e7f2      	b.n	800346e <__libc_init_array+0x1e>
 8003488:	08003524 	.word	0x08003524
 800348c:	08003524 	.word	0x08003524
 8003490:	08003524 	.word	0x08003524
 8003494:	08003528 	.word	0x08003528

08003498 <memset>:
 8003498:	4402      	add	r2, r0
 800349a:	4603      	mov	r3, r0
 800349c:	4293      	cmp	r3, r2
 800349e:	d100      	bne.n	80034a2 <memset+0xa>
 80034a0:	4770      	bx	lr
 80034a2:	f803 1b01 	strb.w	r1, [r3], #1
 80034a6:	e7f9      	b.n	800349c <memset+0x4>

080034a8 <_init>:
 80034a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034aa:	bf00      	nop
 80034ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ae:	bc08      	pop	{r3}
 80034b0:	469e      	mov	lr, r3
 80034b2:	4770      	bx	lr

080034b4 <_fini>:
 80034b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b6:	bf00      	nop
 80034b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ba:	bc08      	pop	{r3}
 80034bc:	469e      	mov	lr, r3
 80034be:	4770      	bx	lr
