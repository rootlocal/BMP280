
BMP280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000229c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002424  08002424  00012424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002480  08002480  00012480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002488  08002488  00012488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800248c  0800248c  0001248c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08002490  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000148  20000004  08002494  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000014c  08002494  0002014c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014e89  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002871  00000000  00000000  00034ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000bce0  00000000  00000000  0003772e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e10  00000000  00000000  00043410  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001038  00000000  00000000  00044220  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000077ee  00000000  00000000  00045258  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000053f1  00000000  00000000  0004ca46  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00051e37  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002a4c  00000000  00000000  00051eb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800240c 	.word	0x0800240c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800240c 	.word	0x0800240c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004da:	2003      	movs	r0, #3
 80004dc:	f000 f81a 	bl	8000514 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004e0:	2000      	movs	r0, #0
 80004e2:	f001 fec9 	bl	8002278 <HAL_InitTick>
 80004e6:	4604      	mov	r4, r0
 80004e8:	b918      	cbnz	r0, 80004f2 <HAL_Init+0x1a>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004ea:	f001 fe2b 	bl	8002144 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 80004ee:	4620      	mov	r0, r4
 80004f0:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80004f2:	2401      	movs	r4, #1
 80004f4:	e7fb      	b.n	80004ee <HAL_Init+0x16>
	...

080004f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80004f8:	4a02      	ldr	r2, [pc, #8]	; (8000504 <HAL_IncTick+0xc>)
 80004fa:	6813      	ldr	r3, [r2, #0]
 80004fc:	3301      	adds	r3, #1
 80004fe:	6013      	str	r3, [r2, #0]
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20000020 	.word	0x20000020

08000508 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000508:	4b01      	ldr	r3, [pc, #4]	; (8000510 <HAL_GetTick+0x8>)
 800050a:	6818      	ldr	r0, [r3, #0]
}
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000020 	.word	0x20000020

08000514 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000514:	4a07      	ldr	r2, [pc, #28]	; (8000534 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000516:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000518:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800051c:	041b      	lsls	r3, r3, #16
 800051e:	0c1b      	lsrs	r3, r3, #16
 8000520:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000524:	0200      	lsls	r0, r0, #8
 8000526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800052a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800052e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000530:	60d3      	str	r3, [r2, #12]
 8000532:	4770      	bx	lr
 8000534:	e000ed00 	.word	0xe000ed00

08000538 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000538:	4b17      	ldr	r3, [pc, #92]	; (8000598 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	68dc      	ldr	r4, [r3, #12]
 800053e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000542:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000546:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000548:	2b04      	cmp	r3, #4
 800054a:	bf28      	it	cs
 800054c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800054e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000550:	f04f 0501 	mov.w	r5, #1
 8000554:	fa05 f303 	lsl.w	r3, r5, r3
 8000558:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800055c:	bf8c      	ite	hi
 800055e:	3c03      	subhi	r4, #3
 8000560:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000562:	4019      	ands	r1, r3
 8000564:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000566:	fa05 f404 	lsl.w	r4, r5, r4
 800056a:	3c01      	subs	r4, #1
 800056c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800056e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000570:	ea42 0201 	orr.w	r2, r2, r1
 8000574:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000578:	bfaf      	iteee	ge
 800057a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800057e:	f000 000f 	andlt.w	r0, r0, #15
 8000582:	4b06      	ldrlt	r3, [pc, #24]	; (800059c <HAL_NVIC_SetPriority+0x64>)
 8000584:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000586:	bfa5      	ittet	ge
 8000588:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800058c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800058e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000590:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	bf00      	nop
 8000598:	e000ed00 	.word	0xe000ed00
 800059c:	e000ed14 	.word	0xe000ed14

080005a0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005a0:	0942      	lsrs	r2, r0, #5
 80005a2:	2301      	movs	r3, #1
 80005a4:	f000 001f 	and.w	r0, r0, #31
 80005a8:	fa03 f000 	lsl.w	r0, r3, r0
 80005ac:	4b01      	ldr	r3, [pc, #4]	; (80005b4 <HAL_NVIC_EnableIRQ+0x14>)
 80005ae:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005b2:	4770      	bx	lr
 80005b4:	e000e100 	.word	0xe000e100

080005b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005bc:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80005be:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005c0:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800076c <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80005c4:	4c67      	ldr	r4, [pc, #412]	; (8000764 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80005c6:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 80005c8:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80005ca:	9a01      	ldr	r2, [sp, #4]
 80005cc:	40da      	lsrs	r2, r3
 80005ce:	d102      	bne.n	80005d6 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 80005d0:	b005      	add	sp, #20
 80005d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80005d6:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 80005d8:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80005da:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 80005dc:	ea12 0e06 	ands.w	lr, r2, r6
 80005e0:	f000 80b1 	beq.w	8000746 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005e4:	684a      	ldr	r2, [r1, #4]
 80005e6:	f022 0710 	bic.w	r7, r2, #16
 80005ea:	2f02      	cmp	r7, #2
 80005ec:	d116      	bne.n	800061c <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 80005ee:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80005f2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80005f6:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80005fa:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80005fe:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000602:	f04f 0c0f 	mov.w	ip, #15
 8000606:	fa0c fc0a 	lsl.w	ip, ip, sl
 800060a:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800060e:	690d      	ldr	r5, [r1, #16]
 8000610:	fa05 f50a 	lsl.w	r5, r5, sl
 8000614:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8000618:	f8c9 5020 	str.w	r5, [r9, #32]
 800061c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000620:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000622:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000626:	fa05 f50c 	lsl.w	r5, r5, ip
 800062a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800062c:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000630:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000634:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000638:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800063a:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800063e:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000640:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000644:	d811      	bhi.n	800066a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000646:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000648:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800064c:	68cf      	ldr	r7, [r1, #12]
 800064e:	fa07 f70c 	lsl.w	r7, r7, ip
 8000652:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8000656:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000658:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800065a:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800065e:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8000662:	409f      	lsls	r7, r3
 8000664:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8000668:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800066a:	f1ba 0f03 	cmp.w	sl, #3
 800066e:	d107      	bne.n	8000680 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8000670:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000672:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000676:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 800067a:	409f      	lsls	r7, r3
 800067c:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 800067e:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8000680:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000682:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000684:	688e      	ldr	r6, [r1, #8]
 8000686:	fa06 f60c 	lsl.w	r6, r6, ip
 800068a:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 800068c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800068e:	00d5      	lsls	r5, r2, #3
 8000690:	d559      	bpl.n	8000746 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000692:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000696:	f045 0501 	orr.w	r5, r5, #1
 800069a:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 800069e:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80006a2:	f023 0603 	bic.w	r6, r3, #3
 80006a6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80006aa:	f005 0501 	and.w	r5, r5, #1
 80006ae:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80006b2:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006b4:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b8:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80006ba:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006bc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80006c0:	270f      	movs	r7, #15
 80006c2:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80006c6:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006ca:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80006ce:	d03c      	beq.n	800074a <HAL_GPIO_Init+0x192>
 80006d0:	4d25      	ldr	r5, [pc, #148]	; (8000768 <HAL_GPIO_Init+0x1b0>)
 80006d2:	42a8      	cmp	r0, r5
 80006d4:	d03b      	beq.n	800074e <HAL_GPIO_Init+0x196>
 80006d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006da:	42a8      	cmp	r0, r5
 80006dc:	d039      	beq.n	8000752 <HAL_GPIO_Init+0x19a>
 80006de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006e2:	42a8      	cmp	r0, r5
 80006e4:	d037      	beq.n	8000756 <HAL_GPIO_Init+0x19e>
 80006e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006ea:	42a8      	cmp	r0, r5
 80006ec:	d035      	beq.n	800075a <HAL_GPIO_Init+0x1a2>
 80006ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006f2:	42a8      	cmp	r0, r5
 80006f4:	d033      	beq.n	800075e <HAL_GPIO_Init+0x1a6>
 80006f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006fa:	42a8      	cmp	r0, r5
 80006fc:	bf14      	ite	ne
 80006fe:	2507      	movne	r5, #7
 8000700:	2506      	moveq	r5, #6
 8000702:	fa05 f50c 	lsl.w	r5, r5, ip
 8000706:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000708:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 800070a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800070c:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000710:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8000712:	bf54      	ite	pl
 8000714:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000716:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 800071a:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 800071c:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800071e:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8000720:	bf54      	ite	pl
 8000722:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000724:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8000728:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 800072a:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800072c:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 800072e:	bf54      	ite	pl
 8000730:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000732:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8000736:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8000738:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800073a:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 800073c:	bf54      	ite	pl
 800073e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000740:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8000744:	60e5      	str	r5, [r4, #12]
    position++;
 8000746:	3301      	adds	r3, #1
 8000748:	e73f      	b.n	80005ca <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800074a:	2500      	movs	r5, #0
 800074c:	e7d9      	b.n	8000702 <HAL_GPIO_Init+0x14a>
 800074e:	2501      	movs	r5, #1
 8000750:	e7d7      	b.n	8000702 <HAL_GPIO_Init+0x14a>
 8000752:	2502      	movs	r5, #2
 8000754:	e7d5      	b.n	8000702 <HAL_GPIO_Init+0x14a>
 8000756:	2503      	movs	r5, #3
 8000758:	e7d3      	b.n	8000702 <HAL_GPIO_Init+0x14a>
 800075a:	2504      	movs	r5, #4
 800075c:	e7d1      	b.n	8000702 <HAL_GPIO_Init+0x14a>
 800075e:	2505      	movs	r5, #5
 8000760:	e7cf      	b.n	8000702 <HAL_GPIO_Init+0x14a>
 8000762:	bf00      	nop
 8000764:	40010400 	.word	0x40010400
 8000768:	48000400 	.word	0x48000400
 800076c:	40021000 	.word	0x40021000

08000770 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000770:	b10a      	cbz	r2, 8000776 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000772:	6181      	str	r1, [r0, #24]
 8000774:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000776:	6281      	str	r1, [r0, #40]	; 0x28
 8000778:	4770      	bx	lr

0800077a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800077a:	4770      	bx	lr

0800077c <HAL_GPIO_EXTI_IRQHandler>:
{
 800077c:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000780:	6959      	ldr	r1, [r3, #20]
 8000782:	4201      	tst	r1, r0
 8000784:	d002      	beq.n	800078c <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000786:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000788:	f7ff fff7 	bl	800077a <HAL_GPIO_EXTI_Callback>
 800078c:	bd08      	pop	{r3, pc}
 800078e:	bf00      	nop
 8000790:	40010400 	.word	0x40010400

08000794 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000794:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000796:	4604      	mov	r4, r0
 8000798:	2800      	cmp	r0, #0
 800079a:	d04a      	beq.n	8000832 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800079c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80007a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80007a4:	b91b      	cbnz	r3, 80007ae <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80007a6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80007aa:	f001 fced 	bl	8002188 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80007ae:	2324      	movs	r3, #36	; 0x24
 80007b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80007b4:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80007b6:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	f022 0201 	bic.w	r2, r2, #1
 80007be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80007c0:	6862      	ldr	r2, [r4, #4]
 80007c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80007c6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80007c8:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80007ca:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80007cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80007d4:	d124      	bne.n	8000820 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80007d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80007da:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80007dc:	685a      	ldr	r2, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80007de:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80007e0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80007e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80007e8:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80007ea:	68da      	ldr	r2, [r3, #12]
 80007ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80007f0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80007f2:	6922      	ldr	r2, [r4, #16]
 80007f4:	430a      	orrs	r2, r1
 80007f6:	69a1      	ldr	r1, [r4, #24]
 80007f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80007fc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80007fe:	6a21      	ldr	r1, [r4, #32]
 8000800:	69e2      	ldr	r2, [r4, #28]
 8000802:	430a      	orrs	r2, r1
 8000804:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	f042 0201 	orr.w	r2, r2, #1
 800080c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800080e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000810:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000812:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000814:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000818:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800081a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 800081e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000820:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000824:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000826:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000828:	bf04      	itt	eq
 800082a:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800082e:	605a      	streq	r2, [r3, #4]
 8000830:	e7d4      	b.n	80007dc <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000832:	2001      	movs	r0, #1
}
 8000834:	bd10      	pop	{r4, pc}

08000836 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000836:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800083a:	b2d2      	uxtb	r2, r2
 800083c:	2a20      	cmp	r2, #32
{
 800083e:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000840:	d11d      	bne.n	800087e <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000842:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000846:	2b01      	cmp	r3, #1
 8000848:	d019      	beq.n	800087e <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800084a:	2324      	movs	r3, #36	; 0x24
 800084c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000850:	6803      	ldr	r3, [r0, #0]
 8000852:	681c      	ldr	r4, [r3, #0]
 8000854:	f024 0401 	bic.w	r4, r4, #1
 8000858:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800085a:	681c      	ldr	r4, [r3, #0]
 800085c:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8000860:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000862:	681c      	ldr	r4, [r3, #0]
 8000864:	4321      	orrs	r1, r4
 8000866:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000868:	6819      	ldr	r1, [r3, #0]
 800086a:	f041 0101 	orr.w	r1, r1, #1
 800086e:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000870:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000872:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000876:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800087a:	4618      	mov	r0, r3
 800087c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800087e:	2002      	movs	r0, #2
  }
}
 8000880:	bd10      	pop	{r4, pc}

08000882 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000882:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000884:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8000888:	b2e4      	uxtb	r4, r4
 800088a:	2c20      	cmp	r4, #32
 800088c:	d11c      	bne.n	80008c8 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800088e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000892:	2b01      	cmp	r3, #1
 8000894:	d018      	beq.n	80008c8 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000896:	2324      	movs	r3, #36	; 0x24
 8000898:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800089c:	6803      	ldr	r3, [r0, #0]
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	f022 0201 	bic.w	r2, r2, #1
 80008a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80008a6:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80008a8:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80008ac:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80008b0:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	f042 0201 	orr.w	r2, r2, #1
 80008b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80008ba:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80008bc:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80008c0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80008c4:	4618      	mov	r0, r3
 80008c6:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80008c8:	2002      	movs	r0, #2
  }
}
 80008ca:	bd10      	pop	{r4, pc}

080008cc <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80008cc:	4b02      	ldr	r3, [pc, #8]	; (80008d8 <HAL_PWREx_GetVoltageRange+0xc>)
 80008ce:	6818      	ldr	r0, [r3, #0]
#endif
}
 80008d0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40007000 	.word	0x40007000

080008dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80008de:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80008e0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80008e4:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80008e8:	d11c      	bne.n	8000924 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80008ea:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80008ee:	d015      	beq.n	800091c <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80008f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80008fa:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80008fc:	4a10      	ldr	r2, [pc, #64]	; (8000940 <HAL_PWREx_ControlVoltageScaling+0x64>)
 80008fe:	6811      	ldr	r1, [r2, #0]
 8000900:	2232      	movs	r2, #50	; 0x32
 8000902:	434a      	muls	r2, r1
 8000904:	490f      	ldr	r1, [pc, #60]	; (8000944 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8000906:	fbb2 f2f1 	udiv	r2, r2, r1
 800090a:	4619      	mov	r1, r3
 800090c:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800090e:	6958      	ldr	r0, [r3, #20]
 8000910:	0540      	lsls	r0, r0, #21
 8000912:	d500      	bpl.n	8000916 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8000914:	b922      	cbnz	r2, 8000920 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000916:	694b      	ldr	r3, [r1, #20]
 8000918:	055b      	lsls	r3, r3, #21
 800091a:	d40d      	bmi.n	8000938 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800091c:	2000      	movs	r0, #0
 800091e:	4770      	bx	lr
        wait_loop_index--;
 8000920:	3a01      	subs	r2, #1
 8000922:	e7f4      	b.n	800090e <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000924:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000928:	bf1f      	itttt	ne
 800092a:	681a      	ldrne	r2, [r3, #0]
 800092c:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000930:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000934:	601a      	strne	r2, [r3, #0]
 8000936:	e7f1      	b.n	800091c <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8000938:	2003      	movs	r0, #3
}
 800093a:	4770      	bx	lr
 800093c:	40007000 	.word	0x40007000
 8000940:	20000000 	.word	0x20000000
 8000944:	000f4240 	.word	0x000f4240

08000948 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000948:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800094a:	4d1e      	ldr	r5, [pc, #120]	; (80009c4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800094c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800094e:	00da      	lsls	r2, r3, #3
{
 8000950:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000952:	d518      	bpl.n	8000986 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000954:	f7ff ffba 	bl	80008cc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000958:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800095c:	d123      	bne.n	80009a6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800095e:	2c80      	cmp	r4, #128	; 0x80
 8000960:	d929      	bls.n	80009b6 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000962:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000964:	bf8c      	ite	hi
 8000966:	2002      	movhi	r0, #2
 8000968:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800096a:	4a17      	ldr	r2, [pc, #92]	; (80009c8 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800096c:	6813      	ldr	r3, [r2, #0]
 800096e:	f023 0307 	bic.w	r3, r3, #7
 8000972:	4303      	orrs	r3, r0
 8000974:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000976:	6813      	ldr	r3, [r2, #0]
 8000978:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800097c:	1a18      	subs	r0, r3, r0
 800097e:	bf18      	it	ne
 8000980:	2001      	movne	r0, #1
 8000982:	b003      	add	sp, #12
 8000984:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098c:	65ab      	str	r3, [r5, #88]	; 0x58
 800098e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	9301      	str	r3, [sp, #4]
 8000996:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000998:	f7ff ff98 	bl	80008cc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800099c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800099e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009a2:	65ab      	str	r3, [r5, #88]	; 0x58
 80009a4:	e7d8      	b.n	8000958 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80009a6:	2c80      	cmp	r4, #128	; 0x80
 80009a8:	d807      	bhi.n	80009ba <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80009aa:	d008      	beq.n	80009be <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80009ac:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80009b0:	4258      	negs	r0, r3
 80009b2:	4158      	adcs	r0, r3
 80009b4:	e7d9      	b.n	800096a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80009b6:	2000      	movs	r0, #0
 80009b8:	e7d7      	b.n	800096a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80009ba:	2003      	movs	r0, #3
 80009bc:	e7d5      	b.n	800096a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80009be:	2002      	movs	r0, #2
 80009c0:	e7d3      	b.n	800096a <RCC_SetFlashLatencyFromMSIRange+0x22>
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000
 80009c8:	40022000 	.word	0x40022000

080009cc <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009cc:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <HAL_RCC_GetSysClockFreq+0x98>)
 80009ce:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80009d0:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80009d2:	f012 020c 	ands.w	r2, r2, #12
 80009d6:	d005      	beq.n	80009e4 <HAL_RCC_GetSysClockFreq+0x18>
 80009d8:	2a0c      	cmp	r2, #12
 80009da:	d115      	bne.n	8000a08 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80009dc:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80009e0:	2901      	cmp	r1, #1
 80009e2:	d118      	bne.n	8000a16 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80009e4:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80009e6:	4820      	ldr	r0, [pc, #128]	; (8000a68 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80009e8:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80009ea:	bf55      	itete	pl
 80009ec:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80009f0:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80009f2:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80009f6:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80009fa:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80009fe:	b382      	cbz	r2, 8000a62 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000a00:	2a0c      	cmp	r2, #12
 8000a02:	d009      	beq.n	8000a18 <HAL_RCC_GetSysClockFreq+0x4c>
 8000a04:	2000      	movs	r0, #0
  return sysclockfreq;
 8000a06:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000a08:	2a04      	cmp	r2, #4
 8000a0a:	d029      	beq.n	8000a60 <HAL_RCC_GetSysClockFreq+0x94>
 8000a0c:	2a08      	cmp	r2, #8
 8000a0e:	4817      	ldr	r0, [pc, #92]	; (8000a6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8000a10:	bf18      	it	ne
 8000a12:	2000      	movne	r0, #0
 8000a14:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000a16:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000a18:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000a1a:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000a1c:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000a20:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8000a24:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000a26:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8000a2a:	d005      	beq.n	8000a38 <HAL_RCC_GetSysClockFreq+0x6c>
 8000a2c:	2903      	cmp	r1, #3
 8000a2e:	d012      	beq.n	8000a56 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000a30:	68d9      	ldr	r1, [r3, #12]
 8000a32:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000a36:	e003      	b.n	8000a40 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000a38:	68d9      	ldr	r1, [r3, #12]
 8000a3a:	480d      	ldr	r0, [pc, #52]	; (8000a70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000a3c:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000a40:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000a42:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000a46:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8000a4a:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000a4c:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000a4e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8000a50:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a54:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000a56:	68d9      	ldr	r1, [r3, #12]
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8000a5a:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000a5e:	e7ef      	b.n	8000a40 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8000a60:	4803      	ldr	r0, [pc, #12]	; (8000a70 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8000a62:	4770      	bx	lr
 8000a64:	40021000 	.word	0x40021000
 8000a68:	08002450 	.word	0x08002450
 8000a6c:	007a1200 	.word	0x007a1200
 8000a70:	00f42400 	.word	0x00f42400

08000a74 <HAL_RCC_OscConfig>:
{
 8000a74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8000a78:	4605      	mov	r5, r0
 8000a7a:	b918      	cbnz	r0, 8000a84 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000a7c:	2001      	movs	r0, #1
}
 8000a7e:	b003      	add	sp, #12
 8000a80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a84:	4ca5      	ldr	r4, [pc, #660]	; (8000d1c <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000a86:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a88:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a8a:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000a8c:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a8e:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a92:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000a96:	d53c      	bpl.n	8000b12 <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000a98:	b11e      	cbz	r6, 8000aa2 <HAL_RCC_OscConfig+0x2e>
 8000a9a:	2e0c      	cmp	r6, #12
 8000a9c:	d163      	bne.n	8000b66 <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000a9e:	2f01      	cmp	r7, #1
 8000aa0:	d161      	bne.n	8000b66 <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000aa2:	6823      	ldr	r3, [r4, #0]
 8000aa4:	0798      	lsls	r0, r3, #30
 8000aa6:	d502      	bpl.n	8000aae <HAL_RCC_OscConfig+0x3a>
 8000aa8:	69ab      	ldr	r3, [r5, #24]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d0e6      	beq.n	8000a7c <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000aae:	6823      	ldr	r3, [r4, #0]
 8000ab0:	6a28      	ldr	r0, [r5, #32]
 8000ab2:	0719      	lsls	r1, r3, #28
 8000ab4:	bf56      	itet	pl
 8000ab6:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8000aba:	6823      	ldrmi	r3, [r4, #0]
 8000abc:	091b      	lsrpl	r3, r3, #4
 8000abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ac2:	4283      	cmp	r3, r0
 8000ac4:	d23a      	bcs.n	8000b3c <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ac6:	f7ff ff3f 	bl	8000948 <RCC_SetFlashLatencyFromMSIRange>
 8000aca:	2800      	cmp	r0, #0
 8000acc:	d1d6      	bne.n	8000a7c <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ace:	6823      	ldr	r3, [r4, #0]
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	6023      	str	r3, [r4, #0]
 8000ad6:	6823      	ldr	r3, [r4, #0]
 8000ad8:	6a2a      	ldr	r2, [r5, #32]
 8000ada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ae2:	6863      	ldr	r3, [r4, #4]
 8000ae4:	69ea      	ldr	r2, [r5, #28]
 8000ae6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000aea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000aee:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000af0:	f7ff ff6c 	bl	80009cc <HAL_RCC_GetSysClockFreq>
 8000af4:	68a3      	ldr	r3, [r4, #8]
 8000af6:	4a8a      	ldr	r2, [pc, #552]	; (8000d20 <HAL_RCC_OscConfig+0x2ac>)
 8000af8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000afc:	5cd3      	ldrb	r3, [r2, r3]
 8000afe:	f003 031f 	and.w	r3, r3, #31
 8000b02:	40d8      	lsrs	r0, r3
 8000b04:	4b87      	ldr	r3, [pc, #540]	; (8000d24 <HAL_RCC_OscConfig+0x2b0>)
 8000b06:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f001 fbb5 	bl	8002278 <HAL_InitTick>
        if(status != HAL_OK)
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	d1b5      	bne.n	8000a7e <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b12:	682b      	ldr	r3, [r5, #0]
 8000b14:	07d8      	lsls	r0, r3, #31
 8000b16:	d45d      	bmi.n	8000bd4 <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b18:	682b      	ldr	r3, [r5, #0]
 8000b1a:	0799      	lsls	r1, r3, #30
 8000b1c:	f100 809c 	bmi.w	8000c58 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b20:	682b      	ldr	r3, [r5, #0]
 8000b22:	0718      	lsls	r0, r3, #28
 8000b24:	f100 80d0 	bmi.w	8000cc8 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b28:	682b      	ldr	r3, [r5, #0]
 8000b2a:	0759      	lsls	r1, r3, #29
 8000b2c:	f100 80fc 	bmi.w	8000d28 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000b30:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f040 8165 	bne.w	8000e02 <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 8000b38:	2000      	movs	r0, #0
 8000b3a:	e7a0      	b.n	8000a7e <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b3c:	6823      	ldr	r3, [r4, #0]
 8000b3e:	f043 0308 	orr.w	r3, r3, #8
 8000b42:	6023      	str	r3, [r4, #0]
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b4a:	4303      	orrs	r3, r0
 8000b4c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b4e:	6863      	ldr	r3, [r4, #4]
 8000b50:	69ea      	ldr	r2, [r5, #28]
 8000b52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b5a:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b5c:	f7ff fef4 	bl	8000948 <RCC_SetFlashLatencyFromMSIRange>
 8000b60:	2800      	cmp	r0, #0
 8000b62:	d0c5      	beq.n	8000af0 <HAL_RCC_OscConfig+0x7c>
 8000b64:	e78a      	b.n	8000a7c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000b66:	69ab      	ldr	r3, [r5, #24]
 8000b68:	b31b      	cbz	r3, 8000bb2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 8000b6a:	6823      	ldr	r3, [r4, #0]
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b72:	f7ff fcc9 	bl	8000508 <HAL_GetTick>
 8000b76:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000b78:	6823      	ldr	r3, [r4, #0]
 8000b7a:	079a      	lsls	r2, r3, #30
 8000b7c:	d511      	bpl.n	8000ba2 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b7e:	6823      	ldr	r3, [r4, #0]
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	6023      	str	r3, [r4, #0]
 8000b86:	6823      	ldr	r3, [r4, #0]
 8000b88:	6a2a      	ldr	r2, [r5, #32]
 8000b8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b92:	6863      	ldr	r3, [r4, #4]
 8000b94:	69ea      	ldr	r2, [r5, #28]
 8000b96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b9e:	6063      	str	r3, [r4, #4]
 8000ba0:	e7b7      	b.n	8000b12 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ba2:	f7ff fcb1 	bl	8000508 <HAL_GetTick>
 8000ba6:	eba0 0008 	sub.w	r0, r0, r8
 8000baa:	2802      	cmp	r0, #2
 8000bac:	d9e4      	bls.n	8000b78 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8000bae:	2003      	movs	r0, #3
 8000bb0:	e765      	b.n	8000a7e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8000bb2:	6823      	ldr	r3, [r4, #0]
 8000bb4:	f023 0301 	bic.w	r3, r3, #1
 8000bb8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000bba:	f7ff fca5 	bl	8000508 <HAL_GetTick>
 8000bbe:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000bc0:	6823      	ldr	r3, [r4, #0]
 8000bc2:	079b      	lsls	r3, r3, #30
 8000bc4:	d5a5      	bpl.n	8000b12 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000bc6:	f7ff fc9f 	bl	8000508 <HAL_GetTick>
 8000bca:	eba0 0008 	sub.w	r0, r0, r8
 8000bce:	2802      	cmp	r0, #2
 8000bd0:	d9f6      	bls.n	8000bc0 <HAL_RCC_OscConfig+0x14c>
 8000bd2:	e7ec      	b.n	8000bae <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000bd4:	2e08      	cmp	r6, #8
 8000bd6:	d003      	beq.n	8000be0 <HAL_RCC_OscConfig+0x16c>
 8000bd8:	2e0c      	cmp	r6, #12
 8000bda:	d108      	bne.n	8000bee <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8000bdc:	2f03      	cmp	r7, #3
 8000bde:	d106      	bne.n	8000bee <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be0:	6823      	ldr	r3, [r4, #0]
 8000be2:	039a      	lsls	r2, r3, #14
 8000be4:	d598      	bpl.n	8000b18 <HAL_RCC_OscConfig+0xa4>
 8000be6:	686b      	ldr	r3, [r5, #4]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d195      	bne.n	8000b18 <HAL_RCC_OscConfig+0xa4>
 8000bec:	e746      	b.n	8000a7c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bee:	686b      	ldr	r3, [r5, #4]
 8000bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf4:	d110      	bne.n	8000c18 <HAL_RCC_OscConfig+0x1a4>
 8000bf6:	6823      	ldr	r3, [r4, #0]
 8000bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bfc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000bfe:	f7ff fc83 	bl	8000508 <HAL_GetTick>
 8000c02:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c04:	6823      	ldr	r3, [r4, #0]
 8000c06:	039b      	lsls	r3, r3, #14
 8000c08:	d486      	bmi.n	8000b18 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c0a:	f7ff fc7d 	bl	8000508 <HAL_GetTick>
 8000c0e:	eba0 0008 	sub.w	r0, r0, r8
 8000c12:	2864      	cmp	r0, #100	; 0x64
 8000c14:	d9f6      	bls.n	8000c04 <HAL_RCC_OscConfig+0x190>
 8000c16:	e7ca      	b.n	8000bae <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c1c:	d104      	bne.n	8000c28 <HAL_RCC_OscConfig+0x1b4>
 8000c1e:	6823      	ldr	r3, [r4, #0]
 8000c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c24:	6023      	str	r3, [r4, #0]
 8000c26:	e7e6      	b.n	8000bf6 <HAL_RCC_OscConfig+0x182>
 8000c28:	6822      	ldr	r2, [r4, #0]
 8000c2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c2e:	6022      	str	r2, [r4, #0]
 8000c30:	6822      	ldr	r2, [r4, #0]
 8000c32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c36:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d1e0      	bne.n	8000bfe <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 8000c3c:	f7ff fc64 	bl	8000508 <HAL_GetTick>
 8000c40:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c42:	6823      	ldr	r3, [r4, #0]
 8000c44:	0398      	lsls	r0, r3, #14
 8000c46:	f57f af67 	bpl.w	8000b18 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c4a:	f7ff fc5d 	bl	8000508 <HAL_GetTick>
 8000c4e:	eba0 0008 	sub.w	r0, r0, r8
 8000c52:	2864      	cmp	r0, #100	; 0x64
 8000c54:	d9f5      	bls.n	8000c42 <HAL_RCC_OscConfig+0x1ce>
 8000c56:	e7aa      	b.n	8000bae <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000c58:	2e04      	cmp	r6, #4
 8000c5a:	d003      	beq.n	8000c64 <HAL_RCC_OscConfig+0x1f0>
 8000c5c:	2e0c      	cmp	r6, #12
 8000c5e:	d110      	bne.n	8000c82 <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8000c60:	2f02      	cmp	r7, #2
 8000c62:	d10e      	bne.n	8000c82 <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c64:	6823      	ldr	r3, [r4, #0]
 8000c66:	0559      	lsls	r1, r3, #21
 8000c68:	d503      	bpl.n	8000c72 <HAL_RCC_OscConfig+0x1fe>
 8000c6a:	68eb      	ldr	r3, [r5, #12]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	f43f af05 	beq.w	8000a7c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c72:	6863      	ldr	r3, [r4, #4]
 8000c74:	692a      	ldr	r2, [r5, #16]
 8000c76:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000c7a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000c7e:	6063      	str	r3, [r4, #4]
 8000c80:	e74e      	b.n	8000b20 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c82:	68eb      	ldr	r3, [r5, #12]
 8000c84:	b17b      	cbz	r3, 8000ca6 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8000c86:	6823      	ldr	r3, [r4, #0]
 8000c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c8e:	f7ff fc3b 	bl	8000508 <HAL_GetTick>
 8000c92:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000c94:	6823      	ldr	r3, [r4, #0]
 8000c96:	055a      	lsls	r2, r3, #21
 8000c98:	d4eb      	bmi.n	8000c72 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c9a:	f7ff fc35 	bl	8000508 <HAL_GetTick>
 8000c9e:	1bc0      	subs	r0, r0, r7
 8000ca0:	2802      	cmp	r0, #2
 8000ca2:	d9f7      	bls.n	8000c94 <HAL_RCC_OscConfig+0x220>
 8000ca4:	e783      	b.n	8000bae <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 8000ca6:	6823      	ldr	r3, [r4, #0]
 8000ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cac:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cae:	f7ff fc2b 	bl	8000508 <HAL_GetTick>
 8000cb2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000cb4:	6823      	ldr	r3, [r4, #0]
 8000cb6:	055b      	lsls	r3, r3, #21
 8000cb8:	f57f af32 	bpl.w	8000b20 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cbc:	f7ff fc24 	bl	8000508 <HAL_GetTick>
 8000cc0:	1bc0      	subs	r0, r0, r7
 8000cc2:	2802      	cmp	r0, #2
 8000cc4:	d9f6      	bls.n	8000cb4 <HAL_RCC_OscConfig+0x240>
 8000cc6:	e772      	b.n	8000bae <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cc8:	696b      	ldr	r3, [r5, #20]
 8000cca:	b19b      	cbz	r3, 8000cf4 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8000ccc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000cd8:	f7ff fc16 	bl	8000508 <HAL_GetTick>
 8000cdc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000cde:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000ce2:	079a      	lsls	r2, r3, #30
 8000ce4:	f53f af20 	bmi.w	8000b28 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ce8:	f7ff fc0e 	bl	8000508 <HAL_GetTick>
 8000cec:	1bc0      	subs	r0, r0, r7
 8000cee:	2802      	cmp	r0, #2
 8000cf0:	d9f5      	bls.n	8000cde <HAL_RCC_OscConfig+0x26a>
 8000cf2:	e75c      	b.n	8000bae <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 8000cf4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000cf8:	f023 0301 	bic.w	r3, r3, #1
 8000cfc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000d00:	f7ff fc02 	bl	8000508 <HAL_GetTick>
 8000d04:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d06:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000d0a:	079b      	lsls	r3, r3, #30
 8000d0c:	f57f af0c 	bpl.w	8000b28 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d10:	f7ff fbfa 	bl	8000508 <HAL_GetTick>
 8000d14:	1bc0      	subs	r0, r0, r7
 8000d16:	2802      	cmp	r0, #2
 8000d18:	d9f5      	bls.n	8000d06 <HAL_RCC_OscConfig+0x292>
 8000d1a:	e748      	b.n	8000bae <HAL_RCC_OscConfig+0x13a>
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	08002435 	.word	0x08002435
 8000d24:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000d28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d2a:	00d8      	lsls	r0, r3, #3
 8000d2c:	d429      	bmi.n	8000d82 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d34:	65a3      	str	r3, [r4, #88]	; 0x58
 8000d36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	9301      	str	r3, [sp, #4]
 8000d3e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d40:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d44:	4f5d      	ldr	r7, [pc, #372]	; (8000ebc <HAL_RCC_OscConfig+0x448>)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	05d9      	lsls	r1, r3, #23
 8000d4a:	d51d      	bpl.n	8000d88 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d4c:	68ab      	ldr	r3, [r5, #8]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d12b      	bne.n	8000daa <HAL_RCC_OscConfig+0x336>
 8000d52:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000d5e:	f7ff fbd3 	bl	8000508 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d62:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d66:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000d68:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000d6c:	079b      	lsls	r3, r3, #30
 8000d6e:	d542      	bpl.n	8000df6 <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 8000d70:	f1b8 0f00 	cmp.w	r8, #0
 8000d74:	f43f aedc 	beq.w	8000b30 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	65a3      	str	r3, [r4, #88]	; 0x58
 8000d80:	e6d6      	b.n	8000b30 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 8000d82:	f04f 0800 	mov.w	r8, #0
 8000d86:	e7dd      	b.n	8000d44 <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000d90:	f7ff fbba 	bl	8000508 <HAL_GetTick>
 8000d94:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	05da      	lsls	r2, r3, #23
 8000d9a:	d4d7      	bmi.n	8000d4c <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d9c:	f7ff fbb4 	bl	8000508 <HAL_GetTick>
 8000da0:	eba0 0009 	sub.w	r0, r0, r9
 8000da4:	2802      	cmp	r0, #2
 8000da6:	d9f6      	bls.n	8000d96 <HAL_RCC_OscConfig+0x322>
 8000da8:	e701      	b.n	8000bae <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000daa:	2b05      	cmp	r3, #5
 8000dac:	d106      	bne.n	8000dbc <HAL_RCC_OscConfig+0x348>
 8000dae:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8000dba:	e7ca      	b.n	8000d52 <HAL_RCC_OscConfig+0x2de>
 8000dbc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000dc0:	f022 0201 	bic.w	r2, r2, #1
 8000dc4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000dc8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000dcc:	f022 0204 	bic.w	r2, r2, #4
 8000dd0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1c2      	bne.n	8000d5e <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 8000dd8:	f7ff fb96 	bl	8000508 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ddc:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000de0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000de2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000de6:	0798      	lsls	r0, r3, #30
 8000de8:	d5c2      	bpl.n	8000d70 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dea:	f7ff fb8d 	bl	8000508 <HAL_GetTick>
 8000dee:	1bc0      	subs	r0, r0, r7
 8000df0:	4548      	cmp	r0, r9
 8000df2:	d9f6      	bls.n	8000de2 <HAL_RCC_OscConfig+0x36e>
 8000df4:	e6db      	b.n	8000bae <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000df6:	f7ff fb87 	bl	8000508 <HAL_GetTick>
 8000dfa:	1bc0      	subs	r0, r0, r7
 8000dfc:	4548      	cmp	r0, r9
 8000dfe:	d9b3      	bls.n	8000d68 <HAL_RCC_OscConfig+0x2f4>
 8000e00:	e6d5      	b.n	8000bae <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000e02:	2e0c      	cmp	r6, #12
 8000e04:	f43f ae3a 	beq.w	8000a7c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000e08:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8000e0a:	6823      	ldr	r3, [r4, #0]
 8000e0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e10:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000e12:	d137      	bne.n	8000e84 <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 8000e14:	f7ff fb78 	bl	8000508 <HAL_GetTick>
 8000e18:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e1a:	6823      	ldr	r3, [r4, #0]
 8000e1c:	0199      	lsls	r1, r3, #6
 8000e1e:	d42b      	bmi.n	8000e78 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e20:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000e22:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000e24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000e28:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000e2a:	3a01      	subs	r2, #1
 8000e2c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000e30:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000e32:	0912      	lsrs	r2, r2, #4
 8000e34:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000e38:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000e3a:	0852      	lsrs	r2, r2, #1
 8000e3c:	3a01      	subs	r2, #1
 8000e3e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8000e42:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000e44:	0852      	lsrs	r2, r2, #1
 8000e46:	3a01      	subs	r2, #1
 8000e48:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000e4c:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000e4e:	6823      	ldr	r3, [r4, #0]
 8000e50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e54:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000e56:	68e3      	ldr	r3, [r4, #12]
 8000e58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e5c:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000e5e:	f7ff fb53 	bl	8000508 <HAL_GetTick>
 8000e62:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e64:	6823      	ldr	r3, [r4, #0]
 8000e66:	019a      	lsls	r2, r3, #6
 8000e68:	f53f ae66 	bmi.w	8000b38 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e6c:	f7ff fb4c 	bl	8000508 <HAL_GetTick>
 8000e70:	1b40      	subs	r0, r0, r5
 8000e72:	2802      	cmp	r0, #2
 8000e74:	d9f6      	bls.n	8000e64 <HAL_RCC_OscConfig+0x3f0>
 8000e76:	e69a      	b.n	8000bae <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e78:	f7ff fb46 	bl	8000508 <HAL_GetTick>
 8000e7c:	1b80      	subs	r0, r0, r6
 8000e7e:	2802      	cmp	r0, #2
 8000e80:	d9cb      	bls.n	8000e1a <HAL_RCC_OscConfig+0x3a6>
 8000e82:	e694      	b.n	8000bae <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8000e84:	6823      	ldr	r3, [r4, #0]
 8000e86:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000e8a:	bf02      	ittt	eq
 8000e8c:	68e3      	ldreq	r3, [r4, #12]
 8000e8e:	f023 0303 	biceq.w	r3, r3, #3
 8000e92:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000e94:	68e3      	ldr	r3, [r4, #12]
 8000e96:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e9e:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000ea0:	f7ff fb32 	bl	8000508 <HAL_GetTick>
 8000ea4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000ea6:	6823      	ldr	r3, [r4, #0]
 8000ea8:	019b      	lsls	r3, r3, #6
 8000eaa:	f57f ae45 	bpl.w	8000b38 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eae:	f7ff fb2b 	bl	8000508 <HAL_GetTick>
 8000eb2:	1b40      	subs	r0, r0, r5
 8000eb4:	2802      	cmp	r0, #2
 8000eb6:	d9f6      	bls.n	8000ea6 <HAL_RCC_OscConfig+0x432>
 8000eb8:	e679      	b.n	8000bae <HAL_RCC_OscConfig+0x13a>
 8000eba:	bf00      	nop
 8000ebc:	40007000 	.word	0x40007000

08000ec0 <HAL_RCC_ClockConfig>:
{
 8000ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ec4:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	b910      	cbnz	r0, 8000ed0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000eca:	2001      	movs	r0, #1
 8000ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ed0:	4a40      	ldr	r2, [pc, #256]	; (8000fd4 <HAL_RCC_ClockConfig+0x114>)
 8000ed2:	6813      	ldr	r3, [r2, #0]
 8000ed4:	f003 0307 	and.w	r3, r3, #7
 8000ed8:	428b      	cmp	r3, r1
 8000eda:	d329      	bcc.n	8000f30 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000edc:	6823      	ldr	r3, [r4, #0]
 8000ede:	07d9      	lsls	r1, r3, #31
 8000ee0:	d431      	bmi.n	8000f46 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ee2:	6821      	ldr	r1, [r4, #0]
 8000ee4:	078a      	lsls	r2, r1, #30
 8000ee6:	d45b      	bmi.n	8000fa0 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ee8:	4a3a      	ldr	r2, [pc, #232]	; (8000fd4 <HAL_RCC_ClockConfig+0x114>)
 8000eea:	6813      	ldr	r3, [r2, #0]
 8000eec:	f003 0307 	and.w	r3, r3, #7
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d35d      	bcc.n	8000fb0 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ef4:	f011 0f04 	tst.w	r1, #4
 8000ef8:	4d37      	ldr	r5, [pc, #220]	; (8000fd8 <HAL_RCC_ClockConfig+0x118>)
 8000efa:	d164      	bne.n	8000fc6 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000efc:	070b      	lsls	r3, r1, #28
 8000efe:	d506      	bpl.n	8000f0e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f00:	68ab      	ldr	r3, [r5, #8]
 8000f02:	6922      	ldr	r2, [r4, #16]
 8000f04:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000f08:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f0c:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f0e:	f7ff fd5d 	bl	80009cc <HAL_RCC_GetSysClockFreq>
 8000f12:	68ab      	ldr	r3, [r5, #8]
 8000f14:	4a31      	ldr	r2, [pc, #196]	; (8000fdc <HAL_RCC_ClockConfig+0x11c>)
 8000f16:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8000f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f1e:	5cd3      	ldrb	r3, [r2, r3]
 8000f20:	f003 031f 	and.w	r3, r3, #31
 8000f24:	40d8      	lsrs	r0, r3
 8000f26:	4b2e      	ldr	r3, [pc, #184]	; (8000fe0 <HAL_RCC_ClockConfig+0x120>)
 8000f28:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f001 b9a4 	b.w	8002278 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f30:	6813      	ldr	r3, [r2, #0]
 8000f32:	f023 0307 	bic.w	r3, r3, #7
 8000f36:	430b      	orrs	r3, r1
 8000f38:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f3a:	6813      	ldr	r3, [r2, #0]
 8000f3c:	f003 0307 	and.w	r3, r3, #7
 8000f40:	4299      	cmp	r1, r3
 8000f42:	d1c2      	bne.n	8000eca <HAL_RCC_ClockConfig+0xa>
 8000f44:	e7ca      	b.n	8000edc <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f46:	6862      	ldr	r2, [r4, #4]
 8000f48:	4d23      	ldr	r5, [pc, #140]	; (8000fd8 <HAL_RCC_ClockConfig+0x118>)
 8000f4a:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f4c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f4e:	d11b      	bne.n	8000f88 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f50:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f54:	d0b9      	beq.n	8000eca <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000f56:	68ab      	ldr	r3, [r5, #8]
 8000f58:	f023 0303 	bic.w	r3, r3, #3
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8000f60:	f7ff fad2 	bl	8000508 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f64:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000f68:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f6a:	68ab      	ldr	r3, [r5, #8]
 8000f6c:	6862      	ldr	r2, [r4, #4]
 8000f6e:	f003 030c 	and.w	r3, r3, #12
 8000f72:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000f76:	d0b4      	beq.n	8000ee2 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f78:	f7ff fac6 	bl	8000508 <HAL_GetTick>
 8000f7c:	1bc0      	subs	r0, r0, r7
 8000f7e:	4540      	cmp	r0, r8
 8000f80:	d9f3      	bls.n	8000f6a <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8000f82:	2003      	movs	r0, #3
}
 8000f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f88:	2a02      	cmp	r2, #2
 8000f8a:	d102      	bne.n	8000f92 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f8c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f90:	e7e0      	b.n	8000f54 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000f92:	b912      	cbnz	r2, 8000f9a <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f94:	f013 0f02 	tst.w	r3, #2
 8000f98:	e7dc      	b.n	8000f54 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f9a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000f9e:	e7d9      	b.n	8000f54 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <HAL_RCC_ClockConfig+0x118>)
 8000fa2:	68a0      	ldr	r0, [r4, #8]
 8000fa4:	6893      	ldr	r3, [r2, #8]
 8000fa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000faa:	4303      	orrs	r3, r0
 8000fac:	6093      	str	r3, [r2, #8]
 8000fae:	e79b      	b.n	8000ee8 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fb0:	6813      	ldr	r3, [r2, #0]
 8000fb2:	f023 0307 	bic.w	r3, r3, #7
 8000fb6:	4333      	orrs	r3, r6
 8000fb8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fba:	6813      	ldr	r3, [r2, #0]
 8000fbc:	f003 0307 	and.w	r3, r3, #7
 8000fc0:	429e      	cmp	r6, r3
 8000fc2:	d182      	bne.n	8000eca <HAL_RCC_ClockConfig+0xa>
 8000fc4:	e796      	b.n	8000ef4 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fc6:	68ab      	ldr	r3, [r5, #8]
 8000fc8:	68e2      	ldr	r2, [r4, #12]
 8000fca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	60ab      	str	r3, [r5, #8]
 8000fd2:	e793      	b.n	8000efc <HAL_RCC_ClockConfig+0x3c>
 8000fd4:	40022000 	.word	0x40022000
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	08002435 	.word	0x08002435
 8000fe0:	20000000 	.word	0x20000000

08000fe4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <HAL_RCC_GetPCLK1Freq+0x18>)
 8000fe6:	4a06      	ldr	r2, [pc, #24]	; (8001000 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000fee:	5cd3      	ldrb	r3, [r2, r3]
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000ff2:	6810      	ldr	r0, [r2, #0]
 8000ff4:	f003 031f 	and.w	r3, r3, #31
}
 8000ff8:	40d8      	lsrs	r0, r3
 8000ffa:	4770      	bx	lr
 8000ffc:	40021000 	.word	0x40021000
 8001000:	08002445 	.word	0x08002445
 8001004:	20000000 	.word	0x20000000

08001008 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <HAL_RCC_GetPCLK2Freq+0x18>)
 800100a:	4a06      	ldr	r2, [pc, #24]	; (8001024 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001012:	5cd3      	ldrb	r3, [r2, r3]
 8001014:	4a04      	ldr	r2, [pc, #16]	; (8001028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001016:	6810      	ldr	r0, [r2, #0]
 8001018:	f003 031f 	and.w	r3, r3, #31
}
 800101c:	40d8      	lsrs	r0, r3
 800101e:	4770      	bx	lr
 8001020:	40021000 	.word	0x40021000
 8001024:	08002445 	.word	0x08002445
 8001028:	20000000 	.word	0x20000000

0800102c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800102c:	230f      	movs	r3, #15
 800102e:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <HAL_RCC_GetClockConfig+0x34>)
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	f002 0203 	and.w	r2, r2, #3
 8001038:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001040:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001048:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	08db      	lsrs	r3, r3, #3
 800104e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001052:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <HAL_RCC_GetClockConfig+0x38>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	600b      	str	r3, [r1, #0]
 800105e:	4770      	bx	lr
 8001060:	40021000 	.word	0x40021000
 8001064:	40022000 	.word	0x40022000

08001068 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8001068:	4a02      	ldr	r2, [pc, #8]	; (8001074 <HAL_RCC_EnableCSS+0xc>)
 800106a:	6813      	ldr	r3, [r2, #0]
 800106c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	4770      	bx	lr
 8001074:	40021000 	.word	0x40021000

08001078 <HAL_RCC_CSSCallback>:
{
 8001078:	4770      	bx	lr
	...

0800107c <HAL_RCC_NMI_IRQHandler>:
{
 800107c:	b510      	push	{r4, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800107e:	4c05      	ldr	r4, [pc, #20]	; (8001094 <HAL_RCC_NMI_IRQHandler+0x18>)
 8001080:	69e3      	ldr	r3, [r4, #28]
 8001082:	05db      	lsls	r3, r3, #23
 8001084:	d504      	bpl.n	8001090 <HAL_RCC_NMI_IRQHandler+0x14>
    HAL_RCC_CSSCallback();
 8001086:	f7ff fff7 	bl	8001078 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800108a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800108e:	6223      	str	r3, [r4, #32]
 8001090:	bd10      	pop	{r4, pc}
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000

08001098 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800109a:	4b45      	ldr	r3, [pc, #276]	; (80011b0 <RCCEx_PLLSAI1_Config+0x118>)
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	f012 0f03 	tst.w	r2, #3
{
 80010a2:	4605      	mov	r5, r0
 80010a4:	460e      	mov	r6, r1
 80010a6:	461c      	mov	r4, r3
 80010a8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80010aa:	d02a      	beq.n	8001102 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	f002 0203 	and.w	r2, r2, #3
 80010b2:	4282      	cmp	r2, r0
 80010b4:	d13c      	bne.n	8001130 <RCCEx_PLLSAI1_Config+0x98>
       ||
 80010b6:	2a00      	cmp	r2, #0
 80010b8:	d03a      	beq.n	8001130 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80010ba:	68db      	ldr	r3, [r3, #12]
       ||
 80010bc:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80010be:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80010c2:	3301      	adds	r3, #1
       ||
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d133      	bne.n	8001130 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80010c8:	6823      	ldr	r3, [r4, #0]
 80010ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80010ce:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80010d0:	f7ff fa1a 	bl	8000508 <HAL_GetTick>
 80010d4:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80010d6:	6823      	ldr	r3, [r4, #0]
 80010d8:	011a      	lsls	r2, r3, #4
 80010da:	d432      	bmi.n	8001142 <RCCEx_PLLSAI1_Config+0xaa>
 80010dc:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80010de:	2e00      	cmp	r6, #0
 80010e0:	d036      	beq.n	8001150 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80010e2:	2e01      	cmp	r6, #1
 80010e4:	d150      	bne.n	8001188 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80010e6:	6922      	ldr	r2, [r4, #16]
 80010e8:	6928      	ldr	r0, [r5, #16]
 80010ea:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80010ee:	0840      	lsrs	r0, r0, #1
 80010f0:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80010f4:	3801      	subs	r0, #1
 80010f6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80010fa:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 80010fe:	6122      	str	r2, [r4, #16]
 8001100:	e032      	b.n	8001168 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8001102:	2802      	cmp	r0, #2
 8001104:	d010      	beq.n	8001128 <RCCEx_PLLSAI1_Config+0x90>
 8001106:	2803      	cmp	r0, #3
 8001108:	d014      	beq.n	8001134 <RCCEx_PLLSAI1_Config+0x9c>
 800110a:	2801      	cmp	r0, #1
 800110c:	d110      	bne.n	8001130 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	079f      	lsls	r7, r3, #30
 8001112:	d538      	bpl.n	8001186 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001114:	68e3      	ldr	r3, [r4, #12]
 8001116:	686a      	ldr	r2, [r5, #4]
 8001118:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800111c:	3a01      	subs	r2, #1
 800111e:	4318      	orrs	r0, r3
 8001120:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001124:	60e0      	str	r0, [r4, #12]
 8001126:	e7cf      	b.n	80010c8 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800112e:	d1f1      	bne.n	8001114 <RCCEx_PLLSAI1_Config+0x7c>
 8001130:	2001      	movs	r0, #1
 8001132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	0391      	lsls	r1, r2, #14
 8001138:	d4ec      	bmi.n	8001114 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001140:	e7f5      	b.n	800112e <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001142:	f7ff f9e1 	bl	8000508 <HAL_GetTick>
 8001146:	1bc0      	subs	r0, r0, r7
 8001148:	2802      	cmp	r0, #2
 800114a:	d9c4      	bls.n	80010d6 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 800114c:	2003      	movs	r0, #3
 800114e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001150:	6921      	ldr	r1, [r4, #16]
 8001152:	68eb      	ldr	r3, [r5, #12]
 8001154:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8001158:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800115c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8001160:	091b      	lsrs	r3, r3, #4
 8001162:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8001166:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001168:	6823      	ldr	r3, [r4, #0]
 800116a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800116e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001170:	f7ff f9ca 	bl	8000508 <HAL_GetTick>
 8001174:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001176:	6823      	ldr	r3, [r4, #0]
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	d513      	bpl.n	80011a4 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800117c:	6923      	ldr	r3, [r4, #16]
 800117e:	69aa      	ldr	r2, [r5, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	6123      	str	r3, [r4, #16]
 8001184:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001188:	6923      	ldr	r3, [r4, #16]
 800118a:	6968      	ldr	r0, [r5, #20]
 800118c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001190:	0840      	lsrs	r0, r0, #1
 8001192:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001196:	3801      	subs	r0, #1
 8001198:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800119c:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80011a0:	6123      	str	r3, [r4, #16]
 80011a2:	e7e1      	b.n	8001168 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80011a4:	f7ff f9b0 	bl	8000508 <HAL_GetTick>
 80011a8:	1b80      	subs	r0, r0, r6
 80011aa:	2802      	cmp	r0, #2
 80011ac:	d9e3      	bls.n	8001176 <RCCEx_PLLSAI1_Config+0xde>
 80011ae:	e7cd      	b.n	800114c <RCCEx_PLLSAI1_Config+0xb4>
 80011b0:	40021000 	.word	0x40021000

080011b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80011b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80011b6:	4b3d      	ldr	r3, [pc, #244]	; (80012ac <RCCEx_PLLSAI2_Config+0xf8>)
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	f012 0f03 	tst.w	r2, #3
{
 80011be:	4605      	mov	r5, r0
 80011c0:	460e      	mov	r6, r1
 80011c2:	461c      	mov	r4, r3
 80011c4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80011c6:	d028      	beq.n	800121a <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	f002 0203 	and.w	r2, r2, #3
 80011ce:	4282      	cmp	r2, r0
 80011d0:	d13a      	bne.n	8001248 <RCCEx_PLLSAI2_Config+0x94>
       ||
 80011d2:	2a00      	cmp	r2, #0
 80011d4:	d038      	beq.n	8001248 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80011d6:	68db      	ldr	r3, [r3, #12]
       ||
 80011d8:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80011da:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80011de:	3301      	adds	r3, #1
       ||
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d131      	bne.n	8001248 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80011e4:	6823      	ldr	r3, [r4, #0]
 80011e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011ea:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80011ec:	f7ff f98c 	bl	8000508 <HAL_GetTick>
 80011f0:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80011f2:	6823      	ldr	r3, [r4, #0]
 80011f4:	009a      	lsls	r2, r3, #2
 80011f6:	d430      	bmi.n	800125a <RCCEx_PLLSAI2_Config+0xa6>
 80011f8:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80011fa:	2e00      	cmp	r6, #0
 80011fc:	d034      	beq.n	8001268 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80011fe:	6963      	ldr	r3, [r4, #20]
 8001200:	6929      	ldr	r1, [r5, #16]
 8001202:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001206:	0849      	lsrs	r1, r1, #1
 8001208:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800120c:	3901      	subs	r1, #1
 800120e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001212:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001216:	6163      	str	r3, [r4, #20]
 8001218:	e032      	b.n	8001280 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 800121a:	2802      	cmp	r0, #2
 800121c:	d010      	beq.n	8001240 <RCCEx_PLLSAI2_Config+0x8c>
 800121e:	2803      	cmp	r0, #3
 8001220:	d014      	beq.n	800124c <RCCEx_PLLSAI2_Config+0x98>
 8001222:	2801      	cmp	r0, #1
 8001224:	d110      	bne.n	8001248 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	079f      	lsls	r7, r3, #30
 800122a:	d538      	bpl.n	800129e <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800122c:	68e3      	ldr	r3, [r4, #12]
 800122e:	686a      	ldr	r2, [r5, #4]
 8001230:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001234:	3a01      	subs	r2, #1
 8001236:	4318      	orrs	r0, r3
 8001238:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800123c:	60e0      	str	r0, [r4, #12]
 800123e:	e7d1      	b.n	80011e4 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001246:	d1f1      	bne.n	800122c <RCCEx_PLLSAI2_Config+0x78>
 8001248:	2001      	movs	r0, #1
 800124a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	0391      	lsls	r1, r2, #14
 8001250:	d4ec      	bmi.n	800122c <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001258:	e7f5      	b.n	8001246 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800125a:	f7ff f955 	bl	8000508 <HAL_GetTick>
 800125e:	1bc0      	subs	r0, r0, r7
 8001260:	2802      	cmp	r0, #2
 8001262:	d9c6      	bls.n	80011f2 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8001264:	2003      	movs	r0, #3
 8001266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001268:	6962      	ldr	r2, [r4, #20]
 800126a:	68eb      	ldr	r3, [r5, #12]
 800126c:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8001270:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001274:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 800127e:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001286:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001288:	f7ff f93e 	bl	8000508 <HAL_GetTick>
 800128c:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800128e:	6823      	ldr	r3, [r4, #0]
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	d505      	bpl.n	80012a0 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8001294:	6963      	ldr	r3, [r4, #20]
 8001296:	696a      	ldr	r2, [r5, #20]
 8001298:	4313      	orrs	r3, r2
 800129a:	6163      	str	r3, [r4, #20]
 800129c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800129e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80012a0:	f7ff f932 	bl	8000508 <HAL_GetTick>
 80012a4:	1b80      	subs	r0, r0, r6
 80012a6:	2802      	cmp	r0, #2
 80012a8:	d9f1      	bls.n	800128e <RCCEx_PLLSAI2_Config+0xda>
 80012aa:	e7db      	b.n	8001264 <RCCEx_PLLSAI2_Config+0xb0>
 80012ac:	40021000 	.word	0x40021000

080012b0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80012b0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80012b4:	6806      	ldr	r6, [r0, #0]
 80012b6:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80012ba:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80012bc:	d024      	beq.n	8001308 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80012be:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80012c0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80012c4:	d02c      	beq.n	8001320 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80012c6:	d802      	bhi.n	80012ce <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80012c8:	b1c1      	cbz	r1, 80012fc <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 80012ca:	2601      	movs	r6, #1
 80012cc:	e01c      	b.n	8001308 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80012ce:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80012d2:	d00d      	beq.n	80012f0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80012d4:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80012d8:	d1f7      	bne.n	80012ca <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80012da:	4a4d      	ldr	r2, [pc, #308]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80012dc:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80012de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80012e2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80012e6:	430b      	orrs	r3, r1
 80012e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80012ec:	2600      	movs	r6, #0
 80012ee:	e00b      	b.n	8001308 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80012f0:	4a47      	ldr	r2, [pc, #284]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80012f2:	68d3      	ldr	r3, [r2, #12]
 80012f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f8:	60d3      	str	r3, [r2, #12]
      break;
 80012fa:	e7ee      	b.n	80012da <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80012fc:	3004      	adds	r0, #4
 80012fe:	f7ff fecb 	bl	8001098 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001302:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001304:	2800      	cmp	r0, #0
 8001306:	d0e8      	beq.n	80012da <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001308:	6823      	ldr	r3, [r4, #0]
 800130a:	04d8      	lsls	r0, r3, #19
 800130c:	d506      	bpl.n	800131c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 800130e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001310:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8001314:	d074      	beq.n	8001400 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8001316:	d808      	bhi.n	800132a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001318:	b1a9      	cbz	r1, 8001346 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 800131a:	2601      	movs	r6, #1
 800131c:	4635      	mov	r5, r6
 800131e:	e021      	b.n	8001364 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001320:	2100      	movs	r1, #0
 8001322:	3020      	adds	r0, #32
 8001324:	f7ff ff46 	bl	80011b4 <RCCEx_PLLSAI2_Config>
 8001328:	e7eb      	b.n	8001302 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 800132a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800132e:	d004      	beq.n	800133a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001330:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8001334:	d1f1      	bne.n	800131a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8001336:	4635      	mov	r5, r6
 8001338:	e009      	b.n	800134e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800133a:	4a35      	ldr	r2, [pc, #212]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800133c:	68d3      	ldr	r3, [r2, #12]
 800133e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001342:	60d3      	str	r3, [r2, #12]
 8001344:	e7f7      	b.n	8001336 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001346:	1d20      	adds	r0, r4, #4
 8001348:	f7ff fea6 	bl	8001098 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800134c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800134e:	2d00      	cmp	r5, #0
 8001350:	d15c      	bne.n	800140c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001352:	4a2f      	ldr	r2, [pc, #188]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001354:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001356:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800135a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800135e:	430b      	orrs	r3, r1
 8001360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001364:	6823      	ldr	r3, [r4, #0]
 8001366:	0399      	lsls	r1, r3, #14
 8001368:	f140 814f 	bpl.w	800160a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800136c:	4f28      	ldr	r7, [pc, #160]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800136e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001370:	00da      	lsls	r2, r3, #3
 8001372:	f140 8176 	bpl.w	8001662 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8001376:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800137a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8001414 <HAL_RCCEx_PeriphCLKConfig+0x164>
 800137e:	f8d9 3000 	ldr.w	r3, [r9]
 8001382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001386:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800138a:	f7ff f8bd 	bl	8000508 <HAL_GetTick>
 800138e:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001390:	f8d9 3000 	ldr.w	r3, [r9]
 8001394:	05db      	lsls	r3, r3, #23
 8001396:	d53f      	bpl.n	8001418 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8001398:	2d00      	cmp	r5, #0
 800139a:	d144      	bne.n	8001426 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800139c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80013a0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80013a4:	d015      	beq.n	80013d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
 80013a6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d011      	beq.n	80013d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80013ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80013b2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80013b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80013ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80013be:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80013c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80013c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80013ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80013d2:	07d8      	lsls	r0, r3, #31
 80013d4:	d509      	bpl.n	80013ea <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 80013d6:	f7ff f897 	bl	8000508 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013da:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80013de:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013e4:	0799      	lsls	r1, r3, #30
 80013e6:	f140 8109 	bpl.w	80015fc <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80013ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013ee:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80013f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013f6:	4313      	orrs	r3, r2
 80013f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80013fc:	4635      	mov	r5, r6
 80013fe:	e012      	b.n	8001426 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001400:	2100      	movs	r1, #0
 8001402:	f104 0020 	add.w	r0, r4, #32
 8001406:	f7ff fed5 	bl	80011b4 <RCCEx_PLLSAI2_Config>
 800140a:	e79f      	b.n	800134c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800140c:	462e      	mov	r6, r5
 800140e:	e7a9      	b.n	8001364 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8001410:	40021000 	.word	0x40021000
 8001414:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001418:	f7ff f876 	bl	8000508 <HAL_GetTick>
 800141c:	eba0 000a 	sub.w	r0, r0, sl
 8001420:	2802      	cmp	r0, #2
 8001422:	d9b5      	bls.n	8001390 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8001424:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001426:	f1b8 0f00 	cmp.w	r8, #0
 800142a:	d003      	beq.n	8001434 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 800142c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800142e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001432:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001434:	6823      	ldr	r3, [r4, #0]
 8001436:	07da      	lsls	r2, r3, #31
 8001438:	d508      	bpl.n	800144c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800143a:	4990      	ldr	r1, [pc, #576]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800143c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800143e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001442:	f022 0203 	bic.w	r2, r2, #3
 8001446:	4302      	orrs	r2, r0
 8001448:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800144c:	079f      	lsls	r7, r3, #30
 800144e:	d508      	bpl.n	8001462 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001450:	498a      	ldr	r1, [pc, #552]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001452:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001454:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001458:	f022 020c 	bic.w	r2, r2, #12
 800145c:	4302      	orrs	r2, r0
 800145e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001462:	075e      	lsls	r6, r3, #29
 8001464:	d508      	bpl.n	8001478 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001466:	4985      	ldr	r1, [pc, #532]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001468:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800146a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800146e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001472:	4302      	orrs	r2, r0
 8001474:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001478:	0718      	lsls	r0, r3, #28
 800147a:	d508      	bpl.n	800148e <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800147c:	497f      	ldr	r1, [pc, #508]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800147e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001480:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001484:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001488:	4302      	orrs	r2, r0
 800148a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800148e:	06d9      	lsls	r1, r3, #27
 8001490:	d508      	bpl.n	80014a4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001492:	497a      	ldr	r1, [pc, #488]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001494:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001496:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800149a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800149e:	4302      	orrs	r2, r0
 80014a0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80014a4:	069a      	lsls	r2, r3, #26
 80014a6:	d508      	bpl.n	80014ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80014a8:	4974      	ldr	r1, [pc, #464]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80014aa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80014ac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80014b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80014b4:	4302      	orrs	r2, r0
 80014b6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80014ba:	059f      	lsls	r7, r3, #22
 80014bc:	d508      	bpl.n	80014d0 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80014be:	496f      	ldr	r1, [pc, #444]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80014c0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80014c2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80014c6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80014ca:	4302      	orrs	r2, r0
 80014cc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80014d0:	055e      	lsls	r6, r3, #21
 80014d2:	d508      	bpl.n	80014e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80014d4:	4969      	ldr	r1, [pc, #420]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80014d6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80014d8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80014dc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80014e0:	4302      	orrs	r2, r0
 80014e2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80014e6:	0658      	lsls	r0, r3, #25
 80014e8:	d508      	bpl.n	80014fc <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80014ea:	4964      	ldr	r1, [pc, #400]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80014ec:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80014ee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80014f2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80014f6:	4302      	orrs	r2, r0
 80014f8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80014fc:	0619      	lsls	r1, r3, #24
 80014fe:	d508      	bpl.n	8001512 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001500:	495e      	ldr	r1, [pc, #376]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001502:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001504:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001508:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800150c:	4302      	orrs	r2, r0
 800150e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001512:	05da      	lsls	r2, r3, #23
 8001514:	d508      	bpl.n	8001528 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001516:	4959      	ldr	r1, [pc, #356]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800151a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800151e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001522:	4302      	orrs	r2, r0
 8001524:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001528:	049b      	lsls	r3, r3, #18
 800152a:	d50f      	bpl.n	800154c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800152c:	4a53      	ldr	r2, [pc, #332]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800152e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001530:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001534:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001538:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800153a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800153e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001542:	d164      	bne.n	800160e <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001544:	68d3      	ldr	r3, [r2, #12]
 8001546:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800154a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800154c:	6823      	ldr	r3, [r4, #0]
 800154e:	031f      	lsls	r7, r3, #12
 8001550:	d50f      	bpl.n	8001572 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001552:	4a4a      	ldr	r2, [pc, #296]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001554:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8001556:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800155a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800155e:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001560:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001568:	d15c      	bne.n	8001624 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800156a:	68d3      	ldr	r3, [r2, #12]
 800156c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001570:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001572:	6823      	ldr	r3, [r4, #0]
 8001574:	035e      	lsls	r6, r3, #13
 8001576:	d50f      	bpl.n	8001598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001578:	4a40      	ldr	r2, [pc, #256]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800157a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800157c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001580:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001584:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001586:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800158a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800158e:	d154      	bne.n	800163a <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001590:	68d3      	ldr	r3, [r2, #12]
 8001592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001596:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001598:	6823      	ldr	r3, [r4, #0]
 800159a:	0458      	lsls	r0, r3, #17
 800159c:	d512      	bpl.n	80015c4 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800159e:	4937      	ldr	r1, [pc, #220]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80015a0:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80015a2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80015a6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80015aa:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80015ac:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80015b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80015b4:	d14c      	bne.n	8001650 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80015b6:	2102      	movs	r1, #2
 80015b8:	1d20      	adds	r0, r4, #4
 80015ba:	f7ff fd6d 	bl	8001098 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80015be:	2800      	cmp	r0, #0
 80015c0:	bf18      	it	ne
 80015c2:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80015c4:	6822      	ldr	r2, [r4, #0]
 80015c6:	0411      	lsls	r1, r2, #16
 80015c8:	d508      	bpl.n	80015dc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80015ca:	492c      	ldr	r1, [pc, #176]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80015cc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80015ce:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80015d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80015d6:	4303      	orrs	r3, r0
 80015d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80015dc:	03d3      	lsls	r3, r2, #15
 80015de:	d509      	bpl.n	80015f4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80015e0:	4a26      	ldr	r2, [pc, #152]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80015e2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80015e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80015ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015ee:	430b      	orrs	r3, r1
 80015f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80015f4:	4628      	mov	r0, r5
 80015f6:	b002      	add	sp, #8
 80015f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015fc:	f7fe ff84 	bl	8000508 <HAL_GetTick>
 8001600:	1b40      	subs	r0, r0, r5
 8001602:	4548      	cmp	r0, r9
 8001604:	f67f aeec 	bls.w	80013e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8001608:	e70c      	b.n	8001424 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800160a:	4635      	mov	r5, r6
 800160c:	e712      	b.n	8001434 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800160e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001612:	d19b      	bne.n	800154c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001614:	2101      	movs	r1, #1
 8001616:	1d20      	adds	r0, r4, #4
 8001618:	f7ff fd3e 	bl	8001098 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800161c:	2800      	cmp	r0, #0
 800161e:	bf18      	it	ne
 8001620:	4605      	movne	r5, r0
 8001622:	e793      	b.n	800154c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001624:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001628:	d1a3      	bne.n	8001572 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800162a:	2101      	movs	r1, #1
 800162c:	1d20      	adds	r0, r4, #4
 800162e:	f7ff fd33 	bl	8001098 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001632:	2800      	cmp	r0, #0
 8001634:	bf18      	it	ne
 8001636:	4605      	movne	r5, r0
 8001638:	e79b      	b.n	8001572 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800163a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800163e:	d1ab      	bne.n	8001598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001640:	2101      	movs	r1, #1
 8001642:	1d20      	adds	r0, r4, #4
 8001644:	f7ff fd28 	bl	8001098 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001648:	2800      	cmp	r0, #0
 800164a:	bf18      	it	ne
 800164c:	4605      	movne	r5, r0
 800164e:	e7a3      	b.n	8001598 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001650:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8001654:	d1b6      	bne.n	80015c4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001656:	2102      	movs	r1, #2
 8001658:	f104 0020 	add.w	r0, r4, #32
 800165c:	f7ff fdaa 	bl	80011b4 <RCCEx_PLLSAI2_Config>
 8001660:	e7ad      	b.n	80015be <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001668:	65bb      	str	r3, [r7, #88]	; 0x58
 800166a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800166c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001674:	f04f 0801 	mov.w	r8, #1
 8001678:	e67f      	b.n	800137a <HAL_RCCEx_PeriphCLKConfig+0xca>
 800167a:	bf00      	nop
 800167c:	40021000 	.word	0x40021000

08001680 <HAL_RTC_WaitForSynchro>:

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001680:	6802      	ldr	r2, [r0, #0]
{
 8001682:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001684:	68d3      	ldr	r3, [r2, #12]
 8001686:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800168a:	60d3      	str	r3, [r2, #12]
{
 800168c:	4604      	mov	r4, r0
#endif

  tickstart = HAL_GetTick();
 800168e:	f7fe ff3b 	bl	8000508 <HAL_GetTick>
 8001692:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001694:	6823      	ldr	r3, [r4, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	069b      	lsls	r3, r3, #26
 800169a:	d501      	bpl.n	80016a0 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800169c:	2000      	movs	r0, #0
 800169e:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80016a0:	f7fe ff32 	bl	8000508 <HAL_GetTick>
 80016a4:	1b40      	subs	r0, r0, r5
 80016a6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80016aa:	d9f3      	bls.n	8001694 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 80016ac:	2003      	movs	r0, #3
}
 80016ae:	bd38      	pop	{r3, r4, r5, pc}

080016b0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80016b0:	b538      	push	{r3, r4, r5, lr}
        return HAL_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80016b2:	6803      	ldr	r3, [r0, #0]
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	0652      	lsls	r2, r2, #25
{
 80016b8:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80016ba:	d501      	bpl.n	80016c0 <RTC_EnterInitMode+0x10>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return HAL_OK;
 80016bc:	2000      	movs	r0, #0
 80016be:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80016c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016c4:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80016c6:	f7fe ff1f 	bl	8000508 <HAL_GetTick>
 80016ca:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	065b      	lsls	r3, r3, #25
 80016d2:	d4f3      	bmi.n	80016bc <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80016d4:	f7fe ff18 	bl	8000508 <HAL_GetTick>
 80016d8:	1b40      	subs	r0, r0, r5
 80016da:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80016de:	d9f5      	bls.n	80016cc <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 80016e0:	2003      	movs	r0, #3
}
 80016e2:	bd38      	pop	{r3, r4, r5, pc}

080016e4 <HAL_RTC_Init>:
{
 80016e4:	b538      	push	{r3, r4, r5, lr}
  if(hrtc != NULL)
 80016e6:	4604      	mov	r4, r0
 80016e8:	b1d8      	cbz	r0, 8001722 <HAL_RTC_Init+0x3e>
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80016ea:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80016ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016f2:	b91b      	cbnz	r3, 80016fc <HAL_RTC_Init+0x18>
      hrtc->Lock = HAL_UNLOCKED;
 80016f4:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 80016f8:	f000 fd7c 	bl	80021f4 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 80016fc:	2302      	movs	r3, #2
 80016fe:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	22ca      	movs	r2, #202	; 0xca
 8001706:	625a      	str	r2, [r3, #36]	; 0x24
 8001708:	2253      	movs	r2, #83	; 0x53
 800170a:	625a      	str	r2, [r3, #36]	; 0x24
    if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800170c:	4620      	mov	r0, r4
 800170e:	f7ff ffcf 	bl	80016b0 <RTC_EnterInitMode>
 8001712:	6823      	ldr	r3, [r4, #0]
 8001714:	4605      	mov	r5, r0
 8001716:	b138      	cbz	r0, 8001728 <HAL_RTC_Init+0x44>
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001718:	22ff      	movs	r2, #255	; 0xff
 800171a:	625a      	str	r2, [r3, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_ERROR;
 800171c:	2304      	movs	r3, #4
 800171e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  HAL_StatusTypeDef status = HAL_ERROR;
 8001722:	2501      	movs	r5, #1
}
 8001724:	4628      	mov	r0, r5
 8001726:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8001728:	689a      	ldr	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800172a:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800172c:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8001730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001734:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001736:	6862      	ldr	r2, [r4, #4]
 8001738:	6899      	ldr	r1, [r3, #8]
 800173a:	4302      	orrs	r2, r0
 800173c:	69a0      	ldr	r0, [r4, #24]
 800173e:	4302      	orrs	r2, r0
 8001740:	430a      	orrs	r2, r1
 8001742:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8001744:	68e2      	ldr	r2, [r4, #12]
 8001746:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001748:	691a      	ldr	r2, [r3, #16]
 800174a:	68a1      	ldr	r1, [r4, #8]
 800174c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001750:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001758:	60da      	str	r2, [r3, #12]
      if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	069b      	lsls	r3, r3, #26
 800175e:	d405      	bmi.n	800176c <HAL_RTC_Init+0x88>
        if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001760:	4620      	mov	r0, r4
 8001762:	f7ff ff8d 	bl	8001680 <HAL_RTC_WaitForSynchro>
 8001766:	b108      	cbz	r0, 800176c <HAL_RTC_Init+0x88>
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001768:	6823      	ldr	r3, [r4, #0]
 800176a:	e7d5      	b.n	8001718 <HAL_RTC_Init+0x34>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800176c:	6823      	ldr	r3, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800176e:	6960      	ldr	r0, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8001770:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001772:	f022 0203 	bic.w	r2, r2, #3
 8001776:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001778:	69e2      	ldr	r2, [r4, #28]
 800177a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800177c:	4302      	orrs	r2, r0
 800177e:	430a      	orrs	r2, r1
 8001780:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001782:	22ff      	movs	r2, #255	; 0xff
 8001784:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_READY;
 8001786:	2301      	movs	r3, #1
 8001788:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  return status;
 800178c:	e7ca      	b.n	8001724 <HAL_RTC_Init+0x40>

0800178e <HAL_TIM_Base_MspInit>:
 800178e:	4770      	bx	lr

08001790 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001790:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8001792:	480a      	ldr	r0, [pc, #40]	; (80017bc <HAL_TIM_Base_Start_IT+0x2c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	f042 0201 	orr.w	r2, r2, #1
 800179a:	60da      	str	r2, [r3, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 800179c:	6899      	ldr	r1, [r3, #8]
 800179e:	4001      	ands	r1, r0
 80017a0:	2906      	cmp	r1, #6
 80017a2:	d008      	beq.n	80017b6 <HAL_TIM_Base_Start_IT+0x26>
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	4002      	ands	r2, r0
 80017a8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 80017ac:	bf1e      	ittt	ne
 80017ae:	681a      	ldrne	r2, [r3, #0]
 80017b0:	f042 0201 	orrne.w	r2, r2, #1
 80017b4:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80017b6:	2000      	movs	r0, #0
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	00010007 	.word	0x00010007

080017c0 <HAL_TIM_OC_DelayElapsedCallback>:
 80017c0:	4770      	bx	lr

080017c2 <HAL_TIM_IC_CaptureCallback>:
 80017c2:	4770      	bx	lr

080017c4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80017c4:	4770      	bx	lr

080017c6 <HAL_TIM_TriggerCallback>:
 80017c6:	4770      	bx	lr

080017c8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017c8:	6803      	ldr	r3, [r0, #0]
 80017ca:	691a      	ldr	r2, [r3, #16]
 80017cc:	0791      	lsls	r1, r2, #30
{
 80017ce:	b510      	push	{r4, lr}
 80017d0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017d2:	d50f      	bpl.n	80017f4 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	0792      	lsls	r2, r2, #30
 80017d8:	d50c      	bpl.n	80017f4 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017da:	f06f 0202 	mvn.w	r2, #2
 80017de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017e0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017e2:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017e4:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017e6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017e8:	f000 8085 	beq.w	80018f6 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017ec:	f7ff ffe9 	bl	80017c2 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017f0:	2300      	movs	r3, #0
 80017f2:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017f4:	6823      	ldr	r3, [r4, #0]
 80017f6:	691a      	ldr	r2, [r3, #16]
 80017f8:	0752      	lsls	r2, r2, #29
 80017fa:	d510      	bpl.n	800181e <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	0750      	lsls	r0, r2, #29
 8001800:	d50d      	bpl.n	800181e <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001802:	f06f 0204 	mvn.w	r2, #4
 8001806:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001808:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800180a:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800180c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001810:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001812:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001814:	d075      	beq.n	8001902 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001816:	f7ff ffd4 	bl	80017c2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800181a:	2300      	movs	r3, #0
 800181c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800181e:	6823      	ldr	r3, [r4, #0]
 8001820:	691a      	ldr	r2, [r3, #16]
 8001822:	0711      	lsls	r1, r2, #28
 8001824:	d50f      	bpl.n	8001846 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	0712      	lsls	r2, r2, #28
 800182a:	d50c      	bpl.n	8001846 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800182c:	f06f 0208 	mvn.w	r2, #8
 8001830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001832:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001834:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001836:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001838:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800183a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800183c:	d067      	beq.n	800190e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800183e:	f7ff ffc0 	bl	80017c2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001842:	2300      	movs	r3, #0
 8001844:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001846:	6823      	ldr	r3, [r4, #0]
 8001848:	691a      	ldr	r2, [r3, #16]
 800184a:	06d0      	lsls	r0, r2, #27
 800184c:	d510      	bpl.n	8001870 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800184e:	68da      	ldr	r2, [r3, #12]
 8001850:	06d1      	lsls	r1, r2, #27
 8001852:	d50d      	bpl.n	8001870 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001854:	f06f 0210 	mvn.w	r2, #16
 8001858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800185a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800185c:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800185e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001862:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001864:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001866:	d058      	beq.n	800191a <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001868:	f7ff ffab 	bl	80017c2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800186c:	2300      	movs	r3, #0
 800186e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001870:	6823      	ldr	r3, [r4, #0]
 8001872:	691a      	ldr	r2, [r3, #16]
 8001874:	07d2      	lsls	r2, r2, #31
 8001876:	d508      	bpl.n	800188a <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	07d0      	lsls	r0, r2, #31
 800187c:	d505      	bpl.n	800188a <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800187e:	f06f 0201 	mvn.w	r2, #1
 8001882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001884:	4620      	mov	r0, r4
 8001886:	f000 fc53 	bl	8002130 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800188a:	6823      	ldr	r3, [r4, #0]
 800188c:	691a      	ldr	r2, [r3, #16]
 800188e:	0611      	lsls	r1, r2, #24
 8001890:	d508      	bpl.n	80018a4 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	0612      	lsls	r2, r2, #24
 8001896:	d505      	bpl.n	80018a4 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001898:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800189c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800189e:	4620      	mov	r0, r4
 80018a0:	f000 f8c3 	bl	8001a2a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80018a4:	6823      	ldr	r3, [r4, #0]
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	05d0      	lsls	r0, r2, #23
 80018aa:	d508      	bpl.n	80018be <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	0611      	lsls	r1, r2, #24
 80018b0:	d505      	bpl.n	80018be <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80018b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80018b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80018b8:	4620      	mov	r0, r4
 80018ba:	f000 f8b7 	bl	8001a2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018be:	6823      	ldr	r3, [r4, #0]
 80018c0:	691a      	ldr	r2, [r3, #16]
 80018c2:	0652      	lsls	r2, r2, #25
 80018c4:	d508      	bpl.n	80018d8 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	0650      	lsls	r0, r2, #25
 80018ca:	d505      	bpl.n	80018d8 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018d2:	4620      	mov	r0, r4
 80018d4:	f7ff ff77 	bl	80017c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018d8:	6823      	ldr	r3, [r4, #0]
 80018da:	691a      	ldr	r2, [r3, #16]
 80018dc:	0691      	lsls	r1, r2, #26
 80018de:	d522      	bpl.n	8001926 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	0692      	lsls	r2, r2, #26
 80018e4:	d51f      	bpl.n	8001926 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018e6:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 80018ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018ec:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80018f2:	f000 b899 	b.w	8001a28 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018f6:	f7ff ff63 	bl	80017c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018fa:	4620      	mov	r0, r4
 80018fc:	f7ff ff62 	bl	80017c4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001900:	e776      	b.n	80017f0 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001902:	f7ff ff5d 	bl	80017c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001906:	4620      	mov	r0, r4
 8001908:	f7ff ff5c 	bl	80017c4 <HAL_TIM_PWM_PulseFinishedCallback>
 800190c:	e785      	b.n	800181a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800190e:	f7ff ff57 	bl	80017c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001912:	4620      	mov	r0, r4
 8001914:	f7ff ff56 	bl	80017c4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001918:	e793      	b.n	8001842 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800191a:	f7ff ff51 	bl	80017c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800191e:	4620      	mov	r0, r4
 8001920:	f7ff ff50 	bl	80017c4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001924:	e7a2      	b.n	800186c <HAL_TIM_IRQHandler+0xa4>
 8001926:	bd10      	pop	{r4, pc}

08001928 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001928:	4a30      	ldr	r2, [pc, #192]	; (80019ec <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800192a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800192c:	4290      	cmp	r0, r2
 800192e:	d012      	beq.n	8001956 <TIM_Base_SetConfig+0x2e>
 8001930:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001934:	d00f      	beq.n	8001956 <TIM_Base_SetConfig+0x2e>
 8001936:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800193a:	4290      	cmp	r0, r2
 800193c:	d00b      	beq.n	8001956 <TIM_Base_SetConfig+0x2e>
 800193e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001942:	4290      	cmp	r0, r2
 8001944:	d007      	beq.n	8001956 <TIM_Base_SetConfig+0x2e>
 8001946:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800194a:	4290      	cmp	r0, r2
 800194c:	d003      	beq.n	8001956 <TIM_Base_SetConfig+0x2e>
 800194e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8001952:	4290      	cmp	r0, r2
 8001954:	d119      	bne.n	800198a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001956:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800195c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800195e:	4a23      	ldr	r2, [pc, #140]	; (80019ec <TIM_Base_SetConfig+0xc4>)
 8001960:	4290      	cmp	r0, r2
 8001962:	d01d      	beq.n	80019a0 <TIM_Base_SetConfig+0x78>
 8001964:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001968:	d01a      	beq.n	80019a0 <TIM_Base_SetConfig+0x78>
 800196a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800196e:	4290      	cmp	r0, r2
 8001970:	d016      	beq.n	80019a0 <TIM_Base_SetConfig+0x78>
 8001972:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001976:	4290      	cmp	r0, r2
 8001978:	d012      	beq.n	80019a0 <TIM_Base_SetConfig+0x78>
 800197a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800197e:	4290      	cmp	r0, r2
 8001980:	d00e      	beq.n	80019a0 <TIM_Base_SetConfig+0x78>
 8001982:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8001986:	4290      	cmp	r0, r2
 8001988:	d00a      	beq.n	80019a0 <TIM_Base_SetConfig+0x78>
 800198a:	4a19      	ldr	r2, [pc, #100]	; (80019f0 <TIM_Base_SetConfig+0xc8>)
 800198c:	4290      	cmp	r0, r2
 800198e:	d007      	beq.n	80019a0 <TIM_Base_SetConfig+0x78>
 8001990:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001994:	4290      	cmp	r0, r2
 8001996:	d003      	beq.n	80019a0 <TIM_Base_SetConfig+0x78>
 8001998:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800199c:	4290      	cmp	r0, r2
 800199e:	d103      	bne.n	80019a8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019a0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80019a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019a6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019a8:	694a      	ldr	r2, [r1, #20]
 80019aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019ae:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80019b0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019b2:	688b      	ldr	r3, [r1, #8]
 80019b4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019b6:	680b      	ldr	r3, [r1, #0]
 80019b8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019ba:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <TIM_Base_SetConfig+0xc4>)
 80019bc:	4298      	cmp	r0, r3
 80019be:	d00f      	beq.n	80019e0 <TIM_Base_SetConfig+0xb8>
 80019c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019c4:	4298      	cmp	r0, r3
 80019c6:	d00b      	beq.n	80019e0 <TIM_Base_SetConfig+0xb8>
 80019c8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80019cc:	4298      	cmp	r0, r3
 80019ce:	d007      	beq.n	80019e0 <TIM_Base_SetConfig+0xb8>
 80019d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019d4:	4298      	cmp	r0, r3
 80019d6:	d003      	beq.n	80019e0 <TIM_Base_SetConfig+0xb8>
 80019d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019dc:	4298      	cmp	r0, r3
 80019de:	d101      	bne.n	80019e4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019e0:	690b      	ldr	r3, [r1, #16]
 80019e2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019e4:	2301      	movs	r3, #1
 80019e6:	6143      	str	r3, [r0, #20]
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40012c00 	.word	0x40012c00
 80019f0:	40014000 	.word	0x40014000

080019f4 <HAL_TIM_Base_Init>:
{
 80019f4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80019f6:	4604      	mov	r4, r0
 80019f8:	b1a0      	cbz	r0, 8001a24 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80019fa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a02:	b91b      	cbnz	r3, 8001a0c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001a04:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001a08:	f7ff fec1 	bl	800178e <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a12:	6820      	ldr	r0, [r4, #0]
 8001a14:	1d21      	adds	r1, r4, #4
 8001a16:	f7ff ff87 	bl	8001928 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001a20:	2000      	movs	r0, #0
 8001a22:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a24:	2001      	movs	r0, #1
}
 8001a26:	bd10      	pop	{r4, pc}

08001a28 <HAL_TIMEx_CommutationCallback>:
 8001a28:	4770      	bx	lr

08001a2a <HAL_TIMEx_BreakCallback>:
 8001a2a:	4770      	bx	lr

08001a2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001a2c:	4770      	bx	lr
	...

08001a30 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8001a30:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a32:	69c1      	ldr	r1, [r0, #28]
{
 8001a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a36:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a38:	6883      	ldr	r3, [r0, #8]
 8001a3a:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a3c:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a3e:	4303      	orrs	r3, r0
 8001a40:	6960      	ldr	r0, [r4, #20]
 8001a42:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a44:	48ba      	ldr	r0, [pc, #744]	; (8001d30 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a46:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a48:	4028      	ands	r0, r5
 8001a4a:	4303      	orrs	r3, r0
 8001a4c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a4e:	6853      	ldr	r3, [r2, #4]
 8001a50:	68e0      	ldr	r0, [r4, #12]
 8001a52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a56:	4303      	orrs	r3, r0
 8001a58:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001a5a:	4bb6      	ldr	r3, [pc, #728]	; (8001d34 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001a5c:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001a5e:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001a60:	bf1c      	itt	ne
 8001a62:	6a23      	ldrne	r3, [r4, #32]
 8001a64:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001a66:	6893      	ldr	r3, [r2, #8]
 8001a68:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001a6c:	4303      	orrs	r3, r0
 8001a6e:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a70:	4bb1      	ldr	r3, [pc, #708]	; (8001d38 <UART_SetConfig+0x308>)
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d119      	bne.n	8001aaa <UART_SetConfig+0x7a>
 8001a76:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001a7a:	4ab0      	ldr	r2, [pc, #704]	; (8001d3c <UART_SetConfig+0x30c>)
 8001a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a80:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a84:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001a88:	5cd3      	ldrb	r3, [r2, r3]
 8001a8a:	f040 8138 	bne.w	8001cfe <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	f200 808f 	bhi.w	8001bb2 <UART_SetConfig+0x182>
 8001a94:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001a98:	00ca011a 	.word	0x00ca011a
 8001a9c:	008d00f9 	.word	0x008d00f9
 8001aa0:	008d0114 	.word	0x008d0114
 8001aa4:	008d008d 	.word	0x008d008d
 8001aa8:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001aaa:	4ba5      	ldr	r3, [pc, #660]	; (8001d40 <UART_SetConfig+0x310>)
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d107      	bne.n	8001ac0 <UART_SetConfig+0x90>
 8001ab0:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001ab4:	4aa3      	ldr	r2, [pc, #652]	; (8001d44 <UART_SetConfig+0x314>)
 8001ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	e7e1      	b.n	8001a84 <UART_SetConfig+0x54>
 8001ac0:	4ba1      	ldr	r3, [pc, #644]	; (8001d48 <UART_SetConfig+0x318>)
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d123      	bne.n	8001b0e <UART_SetConfig+0xde>
 8001ac6:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ace:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001ad2:	2b10      	cmp	r3, #16
 8001ad4:	f000 80f1 	beq.w	8001cba <UART_SetConfig+0x28a>
 8001ad8:	d80b      	bhi.n	8001af2 <UART_SetConfig+0xc2>
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 80f3 	beq.w	8001cc6 <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ae0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001ae4:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001ae8:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001aec:	f000 80f8 	beq.w	8001ce0 <UART_SetConfig+0x2b0>
 8001af0:	e0a8      	b.n	8001c44 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001af2:	2b20      	cmp	r3, #32
 8001af4:	f000 80c6 	beq.w	8001c84 <UART_SetConfig+0x254>
 8001af8:	2b30      	cmp	r3, #48	; 0x30
 8001afa:	d1f1      	bne.n	8001ae0 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001afc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001b00:	f040 80b8 	bne.w	8001c74 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001b04:	6860      	ldr	r0, [r4, #4]
 8001b06:	0843      	lsrs	r3, r0, #1
 8001b08:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001b0c:	e0c3      	b.n	8001c96 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b0e:	4b8f      	ldr	r3, [pc, #572]	; (8001d4c <UART_SetConfig+0x31c>)
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d11e      	bne.n	8001b52 <UART_SetConfig+0x122>
 8001b14:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8001b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001b20:	2b40      	cmp	r3, #64	; 0x40
 8001b22:	f000 80bb 	beq.w	8001c9c <UART_SetConfig+0x26c>
 8001b26:	d80a      	bhi.n	8001b3e <UART_SetConfig+0x10e>
 8001b28:	b97b      	cbnz	r3, 8001b4a <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001b2a:	4b82      	ldr	r3, [pc, #520]	; (8001d34 <UART_SetConfig+0x304>)
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	f040 80ca 	bne.w	8001cc6 <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001b32:	f7ff fa57 	bl	8000fe4 <HAL_RCC_GetPCLK1Freq>
        break;
 8001b36:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8001b38:	bbb0      	cbnz	r0, 8001ba8 <UART_SetConfig+0x178>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	e03a      	b.n	8001bb4 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b3e:	2b80      	cmp	r3, #128	; 0x80
 8001b40:	f000 809d 	beq.w	8001c7e <UART_SetConfig+0x24e>
 8001b44:	2bc0      	cmp	r3, #192	; 0xc0
 8001b46:	f000 80b0 	beq.w	8001caa <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001b4a:	4b7a      	ldr	r3, [pc, #488]	; (8001d34 <UART_SetConfig+0x304>)
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d1c7      	bne.n	8001ae0 <UART_SetConfig+0xb0>
 8001b50:	e02f      	b.n	8001bb2 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b52:	4b7f      	ldr	r3, [pc, #508]	; (8001d50 <UART_SetConfig+0x320>)
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d111      	bne.n	8001b7c <UART_SetConfig+0x14c>
 8001b58:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8001b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b68:	f000 8098 	beq.w	8001c9c <UART_SetConfig+0x26c>
 8001b6c:	d9dc      	bls.n	8001b28 <UART_SetConfig+0xf8>
 8001b6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b72:	f000 8084 	beq.w	8001c7e <UART_SetConfig+0x24e>
 8001b76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b7a:	e7e4      	b.n	8001b46 <UART_SetConfig+0x116>
 8001b7c:	4b6d      	ldr	r3, [pc, #436]	; (8001d34 <UART_SetConfig+0x304>)
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d1ae      	bne.n	8001ae0 <UART_SetConfig+0xb0>
 8001b82:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8001b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b8a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b92:	f000 8083 	beq.w	8001c9c <UART_SetConfig+0x26c>
 8001b96:	d9c7      	bls.n	8001b28 <UART_SetConfig+0xf8>
 8001b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b9c:	d06f      	beq.n	8001c7e <UART_SetConfig+0x24e>
 8001b9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001ba2:	e7d0      	b.n	8001b46 <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001ba4:	486b      	ldr	r0, [pc, #428]	; (8001d54 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8001ba6:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8001ba8:	6862      	ldr	r2, [r4, #4]
 8001baa:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8001bae:	4281      	cmp	r1, r0
 8001bb0:	d905      	bls.n	8001bbe <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8001bb2:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001bb8:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001bba:	4610      	mov	r0, r2
 8001bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8001bbe:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001bc2:	d8f6      	bhi.n	8001bb2 <UART_SetConfig+0x182>
        switch (clocksource)
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d82e      	bhi.n	8001c26 <UART_SetConfig+0x1f6>
 8001bc8:	e8df f003 	tbb	[pc, r3]
 8001bcc:	2d1c2d05 	.word	0x2d1c2d05
 8001bd0:	2d2d2d24 	.word	0x2d2d2d24
 8001bd4:	27          	.byte	0x27
 8001bd5:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001bd6:	f7ff fa05 	bl	8000fe4 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001bda:	6862      	ldr	r2, [r4, #4]
 8001bdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001be0:	0856      	lsrs	r6, r2, #1
 8001be2:	2700      	movs	r7, #0
 8001be4:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001be8:	2300      	movs	r3, #0
 8001bea:	4630      	mov	r0, r6
 8001bec:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001bee:	f7fe faeb 	bl	80001c8 <__aeabi_uldivmod>
            break;
 8001bf2:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001bf4:	4b58      	ldr	r3, [pc, #352]	; (8001d58 <UART_SetConfig+0x328>)
 8001bf6:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001bfa:	4299      	cmp	r1, r3
 8001bfc:	d8d9      	bhi.n	8001bb2 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8001bfe:	6823      	ldr	r3, [r4, #0]
 8001c00:	60d8      	str	r0, [r3, #12]
 8001c02:	e7d7      	b.n	8001bb4 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001c04:	4855      	ldr	r0, [pc, #340]	; (8001d5c <UART_SetConfig+0x32c>)
 8001c06:	0855      	lsrs	r5, r2, #1
 8001c08:	2300      	movs	r3, #0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001c0e:	f141 0100 	adc.w	r1, r1, #0
 8001c12:	e7ec      	b.n	8001bee <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c14:	f7fe feda 	bl	80009cc <HAL_RCC_GetSysClockFreq>
 8001c18:	e7df      	b.n	8001bda <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001c1a:	0850      	lsrs	r0, r2, #1
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8001c24:	e7f3      	b.n	8001c0e <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8001c26:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001c28:	2000      	movs	r0, #0
 8001c2a:	e7e3      	b.n	8001bf4 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001c2c:	f7ff f9ec 	bl	8001008 <HAL_RCC_GetPCLK2Freq>
 8001c30:	e04e      	b.n	8001cd0 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001c32:	f7ff f9d7 	bl	8000fe4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c36:	6862      	ldr	r2, [r4, #4]
 8001c38:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001c3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c40:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c42:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001c44:	f1a3 0010 	sub.w	r0, r3, #16
 8001c48:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001c4c:	4288      	cmp	r0, r1
 8001c4e:	d8b0      	bhi.n	8001bb2 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8001c50:	6821      	ldr	r1, [r4, #0]
 8001c52:	60cb      	str	r3, [r1, #12]
 8001c54:	e7ae      	b.n	8001bb4 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001c56:	f7ff f9d7 	bl	8001008 <HAL_RCC_GetPCLK2Freq>
 8001c5a:	e7ec      	b.n	8001c36 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001c5c:	6860      	ldr	r0, [r4, #4]
 8001c5e:	0843      	lsrs	r3, r0, #1
 8001c60:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001c64:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001c68:	fbb3 f3f0 	udiv	r3, r3, r0
 8001c6c:	e7e8      	b.n	8001c40 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c6e:	f7fe fead 	bl	80009cc <HAL_RCC_GetSysClockFreq>
 8001c72:	e7e0      	b.n	8001c36 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001c74:	6860      	ldr	r0, [r4, #4]
 8001c76:	0843      	lsrs	r3, r0, #1
 8001c78:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c7c:	e7f4      	b.n	8001c68 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001c7e:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <UART_SetConfig+0x304>)
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d08f      	beq.n	8001ba4 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c84:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001c88:	d1e8      	bne.n	8001c5c <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001c8a:	6860      	ldr	r0, [r4, #4]
 8001c8c:	0843      	lsrs	r3, r0, #1
 8001c8e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001c92:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001c96:	fbb3 f3f0 	udiv	r3, r3, r0
 8001c9a:	e01f      	b.n	8001cdc <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001c9c:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <UART_SetConfig+0x304>)
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d10b      	bne.n	8001cba <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001ca2:	f7fe fe93 	bl	80009cc <HAL_RCC_GetSysClockFreq>
        break;
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	e746      	b.n	8001b38 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001caa:	4b22      	ldr	r3, [pc, #136]	; (8001d34 <UART_SetConfig+0x304>)
 8001cac:	429a      	cmp	r2, r3
 8001cae:	f47f af25 	bne.w	8001afc <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001cb2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8001cb6:	2308      	movs	r3, #8
 8001cb8:	e776      	b.n	8001ba8 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cba:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001cbe:	d1d6      	bne.n	8001c6e <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001cc0:	f7fe fe84 	bl	80009cc <HAL_RCC_GetSysClockFreq>
 8001cc4:	e004      	b.n	8001cd0 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cc6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001cca:	d1b2      	bne.n	8001c32 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001ccc:	f7ff f98a 	bl	8000fe4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001cd0:	6861      	ldr	r1, [r4, #4]
 8001cd2:	084a      	lsrs	r2, r1, #1
 8001cd4:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001cd8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cdc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001cde:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001ce0:	f1a3 0010 	sub.w	r0, r3, #16
 8001ce4:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001ce8:	4288      	cmp	r0, r1
 8001cea:	f63f af62 	bhi.w	8001bb2 <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8001cee:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001cf2:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001cf4:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	60c3      	str	r3, [r0, #12]
 8001cfc:	e75a      	b.n	8001bb4 <UART_SetConfig+0x184>
    switch (clocksource)
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	f63f af57 	bhi.w	8001bb2 <UART_SetConfig+0x182>
 8001d04:	a201      	add	r2, pc, #4	; (adr r2, 8001d0c <UART_SetConfig+0x2dc>)
 8001d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d0a:	bf00      	nop
 8001d0c:	08001c33 	.word	0x08001c33
 8001d10:	08001c57 	.word	0x08001c57
 8001d14:	08001c5d 	.word	0x08001c5d
 8001d18:	08001bb3 	.word	0x08001bb3
 8001d1c:	08001c6f 	.word	0x08001c6f
 8001d20:	08001bb3 	.word	0x08001bb3
 8001d24:	08001bb3 	.word	0x08001bb3
 8001d28:	08001bb3 	.word	0x08001bb3
 8001d2c:	08001c75 	.word	0x08001c75
 8001d30:	efff69f3 	.word	0xefff69f3
 8001d34:	40008000 	.word	0x40008000
 8001d38:	40013800 	.word	0x40013800
 8001d3c:	08002424 	.word	0x08002424
 8001d40:	40004400 	.word	0x40004400
 8001d44:	08002428 	.word	0x08002428
 8001d48:	40004800 	.word	0x40004800
 8001d4c:	40004c00 	.word	0x40004c00
 8001d50:	40005000 	.word	0x40005000
 8001d54:	00f42400 	.word	0x00f42400
 8001d58:	000ffcff 	.word	0x000ffcff
 8001d5c:	f4240000 	.word	0xf4240000

08001d60 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001d60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d62:	07da      	lsls	r2, r3, #31
{
 8001d64:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001d66:	d506      	bpl.n	8001d76 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001d68:	6801      	ldr	r1, [r0, #0]
 8001d6a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001d6c:	684a      	ldr	r2, [r1, #4]
 8001d6e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001d72:	4322      	orrs	r2, r4
 8001d74:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001d76:	079c      	lsls	r4, r3, #30
 8001d78:	d506      	bpl.n	8001d88 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001d7a:	6801      	ldr	r1, [r0, #0]
 8001d7c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001d7e:	684a      	ldr	r2, [r1, #4]
 8001d80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d84:	4322      	orrs	r2, r4
 8001d86:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001d88:	0759      	lsls	r1, r3, #29
 8001d8a:	d506      	bpl.n	8001d9a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001d8c:	6801      	ldr	r1, [r0, #0]
 8001d8e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001d90:	684a      	ldr	r2, [r1, #4]
 8001d92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d96:	4322      	orrs	r2, r4
 8001d98:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001d9a:	071a      	lsls	r2, r3, #28
 8001d9c:	d506      	bpl.n	8001dac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001d9e:	6801      	ldr	r1, [r0, #0]
 8001da0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001da2:	684a      	ldr	r2, [r1, #4]
 8001da4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001da8:	4322      	orrs	r2, r4
 8001daa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001dac:	06dc      	lsls	r4, r3, #27
 8001dae:	d506      	bpl.n	8001dbe <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001db0:	6801      	ldr	r1, [r0, #0]
 8001db2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001db4:	688a      	ldr	r2, [r1, #8]
 8001db6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dba:	4322      	orrs	r2, r4
 8001dbc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001dbe:	0699      	lsls	r1, r3, #26
 8001dc0:	d506      	bpl.n	8001dd0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001dc2:	6801      	ldr	r1, [r0, #0]
 8001dc4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001dc6:	688a      	ldr	r2, [r1, #8]
 8001dc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dcc:	4322      	orrs	r2, r4
 8001dce:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001dd0:	065a      	lsls	r2, r3, #25
 8001dd2:	d50f      	bpl.n	8001df4 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001dd4:	6801      	ldr	r1, [r0, #0]
 8001dd6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001dd8:	684a      	ldr	r2, [r1, #4]
 8001dda:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001dde:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001de0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001de4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001de6:	d105      	bne.n	8001df4 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001de8:	684a      	ldr	r2, [r1, #4]
 8001dea:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001dec:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001df0:	4322      	orrs	r2, r4
 8001df2:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001df4:	061b      	lsls	r3, r3, #24
 8001df6:	d506      	bpl.n	8001e06 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001df8:	6802      	ldr	r2, [r0, #0]
 8001dfa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001dfc:	6853      	ldr	r3, [r2, #4]
 8001dfe:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001e02:	430b      	orrs	r3, r1
 8001e04:	6053      	str	r3, [r2, #4]
 8001e06:	bd10      	pop	{r4, pc}

08001e08 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e0c:	9d06      	ldr	r5, [sp, #24]
 8001e0e:	4604      	mov	r4, r0
 8001e10:	460f      	mov	r7, r1
 8001e12:	4616      	mov	r6, r2
 8001e14:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e16:	6821      	ldr	r1, [r4, #0]
 8001e18:	69ca      	ldr	r2, [r1, #28]
 8001e1a:	ea37 0302 	bics.w	r3, r7, r2
 8001e1e:	bf0c      	ite	eq
 8001e20:	2201      	moveq	r2, #1
 8001e22:	2200      	movne	r2, #0
 8001e24:	42b2      	cmp	r2, r6
 8001e26:	d002      	beq.n	8001e2e <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001e28:	2000      	movs	r0, #0
}
 8001e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001e2e:	1c6b      	adds	r3, r5, #1
 8001e30:	d0f2      	beq.n	8001e18 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e32:	b99d      	cbnz	r5, 8001e5c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e34:	6823      	ldr	r3, [r4, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e3c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	f022 0201 	bic.w	r2, r2, #1
 8001e44:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001e46:	2320      	movs	r3, #32
 8001e48:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8001e4c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8001e50:	2300      	movs	r3, #0
 8001e52:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8001e56:	2003      	movs	r0, #3
 8001e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e5c:	f7fe fb54 	bl	8000508 <HAL_GetTick>
 8001e60:	eba0 0008 	sub.w	r0, r0, r8
 8001e64:	4285      	cmp	r5, r0
 8001e66:	d2d6      	bcs.n	8001e16 <UART_WaitOnFlagUntilTimeout+0xe>
 8001e68:	e7e4      	b.n	8001e34 <UART_WaitOnFlagUntilTimeout+0x2c>

08001e6a <UART_CheckIdleState>:
{
 8001e6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e6c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e6e:	2600      	movs	r6, #0
 8001e70:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8001e72:	f7fe fb49 	bl	8000508 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e76:	6823      	ldr	r3, [r4, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001e7c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e7e:	d417      	bmi.n	8001eb0 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001e80:	6823      	ldr	r3, [r4, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	075b      	lsls	r3, r3, #29
 8001e86:	d50a      	bpl.n	8001e9e <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	462b      	mov	r3, r5
 8001e92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001e96:	4620      	mov	r0, r4
 8001e98:	f7ff ffb6 	bl	8001e08 <UART_WaitOnFlagUntilTimeout>
 8001e9c:	b9a0      	cbnz	r0, 8001ec8 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8001e9e:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001ea0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001ea2:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8001ea6:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001eaa:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8001eae:	e00c      	b.n	8001eca <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001eb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	4632      	mov	r2, r6
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f7ff ffa2 	bl	8001e08 <UART_WaitOnFlagUntilTimeout>
 8001ec4:	2800      	cmp	r0, #0
 8001ec6:	d0db      	beq.n	8001e80 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001ec8:	2003      	movs	r0, #3
}
 8001eca:	b002      	add	sp, #8
 8001ecc:	bd70      	pop	{r4, r5, r6, pc}

08001ece <HAL_UART_Init>:
{
 8001ece:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001ed0:	4604      	mov	r4, r0
 8001ed2:	b360      	cbz	r0, 8001f2e <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001ed4:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001ed8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001edc:	b91b      	cbnz	r3, 8001ee6 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001ede:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001ee2:	f000 f997 	bl	8002214 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001ee6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001ee8:	2324      	movs	r3, #36	; 0x24
 8001eea:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8001eee:	6813      	ldr	r3, [r2, #0]
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	f7ff fd9a 	bl	8001a30 <UART_SetConfig>
 8001efc:	2801      	cmp	r0, #1
 8001efe:	d016      	beq.n	8001f2e <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f02:	b113      	cbz	r3, 8001f0a <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001f04:	4620      	mov	r0, r4
 8001f06:	f7ff ff2b 	bl	8001d60 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f0a:	6823      	ldr	r3, [r4, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f1a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001f22:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001f24:	601a      	str	r2, [r3, #0]
}
 8001f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001f2a:	f7ff bf9e 	b.w	8001e6a <UART_CheckIdleState>
}
 8001f2e:	2001      	movs	r0, #1
 8001f30:	bd10      	pop	{r4, pc}
	...

08001f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f34:	b530      	push	{r4, r5, lr}
 8001f36:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f38:	2514      	movs	r5, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f3a:	2244      	movs	r2, #68	; 0x44
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	a805      	add	r0, sp, #20
 8001f40:	f000 fa5c 	bl	80023fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f44:	462a      	mov	r2, r5
 8001f46:	2100      	movs	r1, #0
 8001f48:	4668      	mov	r0, sp
 8001f4a:	f000 fa57 	bl	80023fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f4e:	2100      	movs	r1, #0
 8001f50:	2288      	movs	r2, #136	; 0x88
 8001f52:	a816      	add	r0, sp, #88	; 0x58
 8001f54:	f000 fa52 	bl	80023fc <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001f58:	2309      	movs	r3, #9
 8001f5a:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f5c:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f62:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f64:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f66:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f68:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001f6a:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f6c:	eb0d 0005 	add.w	r0, sp, r5
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001f70:	2207      	movs	r2, #7
 8001f72:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f74:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f76:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f78:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f7a:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001f7c:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f7e:	f7fe fd79 	bl	8000a74 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f82:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f84:	2104      	movs	r1, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f86:	e88d 0018 	stmia.w	sp, {r3, r4}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f8a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f8c:	2400      	movs	r4, #0
 8001f8e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f90:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f92:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f94:	f7fe ff94 	bl	8000ec0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <SystemClock_Config+0x88>)
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f9a:	9425      	str	r4, [sp, #148]	; 0x94
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f9c:	942a      	str	r4, [sp, #168]	; 0xa8
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f9e:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001fa0:	f44f 7400 	mov.w	r4, #512	; 0x200
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8001fa4:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001fa6:	9437      	str	r4, [sp, #220]	; 0xdc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fa8:	f7ff f982 	bl	80012b0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /**Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 8001fac:	f7ff f85c 	bl	8001068 <HAL_RCC_EnableCSS>
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	f7fe fc93 	bl	80008dc <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 8001fb6:	b039      	add	sp, #228	; 0xe4
 8001fb8:	bd30      	pop	{r4, r5, pc}
 8001fba:	bf00      	nop
 8001fbc:	00020042 	.word	0x00020042

08001fc0 <main>:
{
 8001fc0:	b500      	push	{lr}
 8001fc2:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8001fc4:	f7fe fa88 	bl	80004d8 <HAL_Init>
  SystemClock_Config();
 8001fc8:	f7ff ffb4 	bl	8001f34 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	2214      	movs	r2, #20
 8001fce:	2100      	movs	r1, #0
 8001fd0:	eb0d 0002 	add.w	r0, sp, r2
 8001fd4:	f000 fa12 	bl	80023fc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd8:	4b4a      	ldr	r3, [pc, #296]	; (8002104 <main+0x144>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001fda:	484b      	ldr	r0, [pc, #300]	; (8002108 <main+0x148>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hi2c1.Instance = I2C1;
 8001fde:	4d4b      	ldr	r5, [pc, #300]	; (800210c <main+0x14c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe0:	f042 0204 	orr.w	r2, r2, #4
 8001fe4:	64da      	str	r2, [r3, #76]	; 0x4c
 8001fe6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fe8:	f002 0204 	and.w	r2, r2, #4
 8001fec:	9200      	str	r2, [sp, #0]
 8001fee:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ff0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ff2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ff6:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ff8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ffa:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001ffe:	9201      	str	r2, [sp, #4]
 8002000:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002004:	f042 0201 	orr.w	r2, r2, #1
 8002008:	64da      	str	r2, [r3, #76]	; 0x4c
 800200a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800200c:	f002 0201 	and.w	r2, r2, #1
 8002010:	9202      	str	r2, [sp, #8]
 8002012:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002014:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002016:	f042 0202 	orr.w	r2, r2, #2
 800201a:	64da      	str	r2, [r3, #76]	; 0x4c
 800201c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800201e:	f002 0202 	and.w	r2, r2, #2
 8002022:	9203      	str	r2, [sp, #12]
 8002024:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002026:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002028:	f042 0210 	orr.w	r2, r2, #16
 800202c:	64da      	str	r2, [r3, #76]	; 0x4c
 800202e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8002036:	2200      	movs	r2, #0
 8002038:	2104      	movs	r1, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800203a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800203c:	f7fe fb98 	bl	8000770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8002040:	2200      	movs	r2, #0
 8002042:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002046:	4832      	ldr	r0, [pc, #200]	; (8002110 <main+0x150>)

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 800204a:	f7fe fb91 	bl	8000770 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800204e:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002050:	4b30      	ldr	r3, [pc, #192]	; (8002114 <main+0x154>)
 8002052:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002054:	a905      	add	r1, sp, #20
 8002056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800205a:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800205e:	f7fe faab 	bl	80005b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8002062:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8002064:	a905      	add	r1, sp, #20
 8002066:	4828      	ldr	r0, [pc, #160]	; (8002108 <main+0x148>)
  GPIO_InitStruct.Pin = LD4_Pin;
 8002068:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206a:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8002070:	f7fe faa2 	bl	80005b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD5_Pin */
  GPIO_InitStruct.Pin = LD5_Pin;
 8002074:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD5_GPIO_Port, &GPIO_InitStruct);
 8002078:	a905      	add	r1, sp, #20
 800207a:	4825      	ldr	r0, [pc, #148]	; (8002110 <main+0x150>)
  GPIO_InitStruct.Pin = LD5_Pin;
 800207c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD5_GPIO_Port, &GPIO_InitStruct);
 8002084:	f7fe fa98 	bl	80005b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002088:	4621      	mov	r1, r4
 800208a:	4622      	mov	r2, r4
 800208c:	2006      	movs	r0, #6
 800208e:	f7fe fa53 	bl	8000538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002092:	2006      	movs	r0, #6
 8002094:	f7fe fa84 	bl	80005a0 <HAL_NVIC_EnableIRQ>
  hrtc.Instance = RTC;
 8002098:	481f      	ldr	r0, [pc, #124]	; (8002118 <main+0x158>)
 800209a:	4b20      	ldr	r3, [pc, #128]	; (800211c <main+0x15c>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800209c:	6104      	str	r4, [r0, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800209e:	e880 0018 	stmia.w	r0, {r3, r4}
  hrtc.Init.AsynchPrediv = 127;
 80020a2:	237f      	movs	r3, #127	; 0x7f
 80020a4:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80020a6:	23ff      	movs	r3, #255	; 0xff
 80020a8:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80020aa:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80020ac:	6184      	str	r4, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80020ae:	61c4      	str	r4, [r0, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80020b0:	f7ff fb18 	bl	80016e4 <HAL_RTC_Init>
  hi2c1.Init.Timing = 0x10909CEC;
 80020b4:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <main+0x160>)
 80020b6:	4a1b      	ldr	r2, [pc, #108]	; (8002124 <main+0x164>)
  hi2c1.Init.OwnAddress1 = 0;
 80020b8:	60ac      	str	r4, [r5, #8]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020ba:	4628      	mov	r0, r5
  hi2c1.Init.Timing = 0x10909CEC;
 80020bc:	e885 000c 	stmia.w	r5, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020c0:	60ee      	str	r6, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020c2:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80020c4:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020c6:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020c8:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020ca:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020cc:	f7fe fb62 	bl	8000794 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020d0:	4621      	mov	r1, r4
 80020d2:	4628      	mov	r0, r5
 80020d4:	f7fe fbaf 	bl	8000836 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020d8:	4621      	mov	r1, r4
 80020da:	4628      	mov	r0, r5
 80020dc:	f7fe fbd1 	bl	8000882 <HAL_I2CEx_ConfigDigitalFilter>
  huart2.Instance = USART2;
 80020e0:	4811      	ldr	r0, [pc, #68]	; (8002128 <main+0x168>)
  huart2.Init.BaudRate = 9600;
 80020e2:	4912      	ldr	r1, [pc, #72]	; (800212c <main+0x16c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020e4:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 9600;
 80020e6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80020ea:	e880 000a 	stmia.w	r0, {r1, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020ee:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020f0:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020f2:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020f4:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020f6:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f8:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020fa:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020fc:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020fe:	f7ff fee6 	bl	8001ece <HAL_UART_Init>
 8002102:	e7fe      	b.n	8002102 <main+0x142>
 8002104:	40021000 	.word	0x40021000
 8002108:	48000400 	.word	0x48000400
 800210c:	20000024 	.word	0x20000024
 8002110:	48001000 	.word	0x48001000
 8002114:	10110000 	.word	0x10110000
 8002118:	20000070 	.word	0x20000070
 800211c:	40002800 	.word	0x40002800
 8002120:	10909cec 	.word	0x10909cec
 8002124:	40005400 	.word	0x40005400
 8002128:	20000094 	.word	0x20000094
 800212c:	40004400 	.word	0x40004400

08002130 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002130:	6802      	ldr	r2, [r0, #0]
 8002132:	4b03      	ldr	r3, [pc, #12]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002134:	429a      	cmp	r2, r3
 8002136:	d101      	bne.n	800213c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002138:	f7fe b9de 	b.w	80004f8 <HAL_IncTick>
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40012c00 	.word	0x40012c00

08002144 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002144:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <HAL_MspInit+0x40>)
{
 8002146:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002148:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800214a:	f042 0201 	orr.w	r2, r2, #1
 800214e:	661a      	str	r2, [r3, #96]	; 0x60
 8002150:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002152:	f002 0201 	and.w	r2, r2, #1
 8002156:	9200      	str	r2, [sp, #0]
 8002158:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800215c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002160:	659a      	str	r2, [r3, #88]	; 0x58
 8002162:	6d9b      	ldr	r3, [r3, #88]	; 0x58

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002164:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8002166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800216c:	4611      	mov	r1, r2
 800216e:	2005      	movs	r0, #5
  __HAL_RCC_PWR_CLK_ENABLE();
 8002170:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002172:	f7fe f9e1 	bl	8000538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002176:	2005      	movs	r0, #5
 8002178:	f7fe fa12 	bl	80005a0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800217c:	b003      	add	sp, #12
 800217e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000

08002188 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002188:	b510      	push	{r4, lr}
 800218a:	4604      	mov	r4, r0
 800218c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218e:	2214      	movs	r2, #20
 8002190:	2100      	movs	r1, #0
 8002192:	a803      	add	r0, sp, #12
 8002194:	f000 f932 	bl	80023fc <memset>
  if(hi2c->Instance==I2C1)
 8002198:	6822      	ldr	r2, [r4, #0]
 800219a:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <HAL_I2C_MspInit+0x60>)
 800219c:	429a      	cmp	r2, r3
 800219e:	d120      	bne.n	80021e2 <HAL_I2C_MspInit+0x5a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a0:	4c12      	ldr	r4, [pc, #72]	; (80021ec <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a2:	4813      	ldr	r0, [pc, #76]	; (80021f0 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80021a6:	f043 0302 	orr.w	r3, r3, #2
 80021aa:	64e3      	str	r3, [r4, #76]	; 0x4c
 80021ac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	9301      	str	r3, [sp, #4]
 80021b4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021b6:	23c0      	movs	r3, #192	; 0xc0
 80021b8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ba:	2312      	movs	r3, #18
 80021bc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021be:	2301      	movs	r3, #1
 80021c0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c2:	2303      	movs	r3, #3
 80021c4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021c8:	2304      	movs	r3, #4
 80021ca:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021cc:	f7fe f9f4 	bl	80005b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80021d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021d6:	65a3      	str	r3, [r4, #88]	; 0x58
 80021d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80021da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021de:	9302      	str	r3, [sp, #8]
 80021e0:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021e2:	b008      	add	sp, #32
 80021e4:	bd10      	pop	{r4, pc}
 80021e6:	bf00      	nop
 80021e8:	40005400 	.word	0x40005400
 80021ec:	40021000 	.word	0x40021000
 80021f0:	48000400 	.word	0x48000400

080021f4 <HAL_RTC_MspInit>:
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 80021f4:	6802      	ldr	r2, [r0, #0]
 80021f6:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_RTC_MspInit+0x18>)
 80021f8:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021fa:	bf01      	itttt	eq
 80021fc:	4a04      	ldreq	r2, [pc, #16]	; (8002210 <HAL_RTC_MspInit+0x1c>)
 80021fe:	f8d2 3090 	ldreq.w	r3, [r2, #144]	; 0x90
 8002202:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 8002206:	f8c2 3090 	streq.w	r3, [r2, #144]	; 0x90
 800220a:	4770      	bx	lr
 800220c:	40002800 	.word	0x40002800
 8002210:	40021000 	.word	0x40021000

08002214 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002214:	b510      	push	{r4, lr}
 8002216:	4604      	mov	r4, r0
 8002218:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221a:	2214      	movs	r2, #20
 800221c:	2100      	movs	r1, #0
 800221e:	a803      	add	r0, sp, #12
 8002220:	f000 f8ec 	bl	80023fc <memset>
  if(huart->Instance==USART2)
 8002224:	6822      	ldr	r2, [r4, #0]
 8002226:	4b13      	ldr	r3, [pc, #76]	; (8002274 <HAL_UART_MspInit+0x60>)
 8002228:	429a      	cmp	r2, r3
 800222a:	d120      	bne.n	800226e <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800222c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002230:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8002232:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002234:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002238:	659a      	str	r2, [r3, #88]	; 0x58
 800223a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800223c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002240:	9201      	str	r2, [sp, #4]
 8002242:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002244:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002246:	f042 0201 	orr.w	r2, r2, #1
 800224a:	64da      	str	r2, [r3, #76]	; 0x4c
 800224c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	9302      	str	r3, [sp, #8]
 8002254:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002256:	230c      	movs	r3, #12
 8002258:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	2302      	movs	r3, #2
 800225c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225e:	2303      	movs	r3, #3
 8002260:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002266:	2307      	movs	r3, #7
 8002268:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226a:	f7fe f9a5 	bl	80005b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800226e:	b008      	add	sp, #32
 8002270:	bd10      	pop	{r4, pc}
 8002272:	bf00      	nop
 8002274:	40004400 	.word	0x40004400

08002278 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002278:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 800227a:	4601      	mov	r1, r0
{
 800227c:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 800227e:	2200      	movs	r2, #0
 8002280:	2019      	movs	r0, #25
 8002282:	f7fe f959 	bl	8000538 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8002286:	2019      	movs	r0, #25
 8002288:	f7fe f98a 	bl	80005a0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <HAL_InitTick+0x68>)
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800228e:	4c15      	ldr	r4, [pc, #84]	; (80022e4 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002290:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002292:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002296:	661a      	str	r2, [r3, #96]	; 0x60
 8002298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800229a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800229e:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022a0:	a901      	add	r1, sp, #4
 80022a2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 80022a4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022a6:	f7fe fec1 	bl	800102c <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80022aa:	f7fe fead 	bl	8001008 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <HAL_InitTick+0x70>)
 80022b0:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80022b2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80022b6:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <HAL_InitTick+0x74>)
 80022ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80022be:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 80022c0:	2300      	movs	r3, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 80022c2:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80022c4:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 80022c6:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c8:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80022ca:	f7ff fb93 	bl	80019f4 <HAL_TIM_Base_Init>
 80022ce:	b920      	cbnz	r0, 80022da <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80022d0:	4620      	mov	r0, r4
 80022d2:	f7ff fa5d 	bl	8001790 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80022d6:	b008      	add	sp, #32
 80022d8:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80022da:	2001      	movs	r0, #1
 80022dc:	e7fb      	b.n	80022d6 <HAL_InitTick+0x5e>
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000
 80022e4:	2000010c 	.word	0x2000010c
 80022e8:	40012c00 	.word	0x40012c00
 80022ec:	000f4240 	.word	0x000f4240

080022f0 <NMI_Handler>:
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80022f0:	f7fe bec4 	b.w	800107c <HAL_RCC_NMI_IRQHandler>

080022f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022f4:	e7fe      	b.n	80022f4 <HardFault_Handler>

080022f6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f6:	e7fe      	b.n	80022f6 <MemManage_Handler>

080022f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f8:	e7fe      	b.n	80022f8 <BusFault_Handler>

080022fa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022fa:	e7fe      	b.n	80022fa <UsageFault_Handler>

080022fc <SVC_Handler>:
 80022fc:	4770      	bx	lr

080022fe <DebugMon_Handler>:
 80022fe:	4770      	bx	lr

08002300 <PendSV_Handler>:
 8002300:	4770      	bx	lr

08002302 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002302:	4770      	bx	lr

08002304 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002304:	2001      	movs	r0, #1
 8002306:	f7fe ba39 	b.w	800077c <HAL_GPIO_EXTI_IRQHandler>
	...

0800230c <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800230c:	4801      	ldr	r0, [pc, #4]	; (8002314 <TIM1_UP_TIM16_IRQHandler+0x8>)
 800230e:	f7ff ba5b 	b.w	80017c8 <HAL_TIM_IRQHandler>
 8002312:	bf00      	nop
 8002314:	2000010c 	.word	0x2000010c

08002318 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002318:	490f      	ldr	r1, [pc, #60]	; (8002358 <SystemInit+0x40>)
 800231a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800231e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002326:	4b0d      	ldr	r3, [pc, #52]	; (800235c <SystemInit+0x44>)
 8002328:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800232a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 800232c:	f042 0201 	orr.w	r2, r2, #1
 8002330:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8002332:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800233a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800233e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002340:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002344:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800234c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800234e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002350:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002354:	608b      	str	r3, [r1, #8]
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00
 800235c:	40021000 	.word	0x40021000

08002360 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002398 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002364:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002366:	e003      	b.n	8002370 <LoopCopyDataInit>

08002368 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800236a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800236c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800236e:	3104      	adds	r1, #4

08002370 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002370:	480b      	ldr	r0, [pc, #44]	; (80023a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002372:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002374:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002376:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002378:	d3f6      	bcc.n	8002368 <CopyDataInit>
	ldr	r2, =_sbss
 800237a:	4a0b      	ldr	r2, [pc, #44]	; (80023a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800237c:	e002      	b.n	8002384 <LoopFillZerobss>

0800237e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800237e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002380:	f842 3b04 	str.w	r3, [r2], #4

08002384 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002384:	4b09      	ldr	r3, [pc, #36]	; (80023ac <LoopForever+0x16>)
	cmp	r2, r3
 8002386:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002388:	d3f9      	bcc.n	800237e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800238a:	f7ff ffc5 	bl	8002318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800238e:	f000 f811 	bl	80023b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002392:	f7ff fe15 	bl	8001fc0 <main>

08002396 <LoopForever>:

LoopForever:
    b LoopForever
 8002396:	e7fe      	b.n	8002396 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002398:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800239c:	08002490 	.word	0x08002490
	ldr	r0, =_sdata
 80023a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80023a4:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 80023a8:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 80023ac:	2000014c 	.word	0x2000014c

080023b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023b0:	e7fe      	b.n	80023b0 <ADC1_2_IRQHandler>
	...

080023b4 <__libc_init_array>:
 80023b4:	b570      	push	{r4, r5, r6, lr}
 80023b6:	4e0d      	ldr	r6, [pc, #52]	; (80023ec <__libc_init_array+0x38>)
 80023b8:	4c0d      	ldr	r4, [pc, #52]	; (80023f0 <__libc_init_array+0x3c>)
 80023ba:	1ba4      	subs	r4, r4, r6
 80023bc:	10a4      	asrs	r4, r4, #2
 80023be:	2500      	movs	r5, #0
 80023c0:	42a5      	cmp	r5, r4
 80023c2:	d109      	bne.n	80023d8 <__libc_init_array+0x24>
 80023c4:	4e0b      	ldr	r6, [pc, #44]	; (80023f4 <__libc_init_array+0x40>)
 80023c6:	4c0c      	ldr	r4, [pc, #48]	; (80023f8 <__libc_init_array+0x44>)
 80023c8:	f000 f820 	bl	800240c <_init>
 80023cc:	1ba4      	subs	r4, r4, r6
 80023ce:	10a4      	asrs	r4, r4, #2
 80023d0:	2500      	movs	r5, #0
 80023d2:	42a5      	cmp	r5, r4
 80023d4:	d105      	bne.n	80023e2 <__libc_init_array+0x2e>
 80023d6:	bd70      	pop	{r4, r5, r6, pc}
 80023d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023dc:	4798      	blx	r3
 80023de:	3501      	adds	r5, #1
 80023e0:	e7ee      	b.n	80023c0 <__libc_init_array+0xc>
 80023e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023e6:	4798      	blx	r3
 80023e8:	3501      	adds	r5, #1
 80023ea:	e7f2      	b.n	80023d2 <__libc_init_array+0x1e>
 80023ec:	08002488 	.word	0x08002488
 80023f0:	08002488 	.word	0x08002488
 80023f4:	08002488 	.word	0x08002488
 80023f8:	0800248c 	.word	0x0800248c

080023fc <memset>:
 80023fc:	4402      	add	r2, r0
 80023fe:	4603      	mov	r3, r0
 8002400:	4293      	cmp	r3, r2
 8002402:	d100      	bne.n	8002406 <memset+0xa>
 8002404:	4770      	bx	lr
 8002406:	f803 1b01 	strb.w	r1, [r3], #1
 800240a:	e7f9      	b.n	8002400 <memset+0x4>

0800240c <_init>:
 800240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240e:	bf00      	nop
 8002410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002412:	bc08      	pop	{r3}
 8002414:	469e      	mov	lr, r3
 8002416:	4770      	bx	lr

08002418 <_fini>:
 8002418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800241a:	bf00      	nop
 800241c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800241e:	bc08      	pop	{r3}
 8002420:	469e      	mov	lr, r3
 8002422:	4770      	bx	lr
