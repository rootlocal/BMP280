
BMP280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005890  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005a18  08005a18  00015a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005a60  08005a60  00015a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005a68  08005a68  00015a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005a6c  08005a6c  00015a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08005a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000250  20000004  08005a74  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000254  08005a74  00020254  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   000152d0  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000287c  00000000  00000000  00035304  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000012d8  00000000  00000000  00037b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001190  00000000  00000000  00038e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008765  00000000  00000000  00039fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000060a1  00000000  00000000  0004274d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000487ee  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004f98  00000000  00000000  0004886c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005a00 	.word	0x08005a00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08005a00 	.word	0x08005a00

080001c8 <__aeabi_frsub>:
 80001c8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__addsf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_fsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001d4 <__addsf3>:
 80001d4:	0042      	lsls	r2, r0, #1
 80001d6:	bf1f      	itttt	ne
 80001d8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001dc:	ea92 0f03 	teqne	r2, r3
 80001e0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001e4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001e8:	d06a      	beq.n	80002c0 <__addsf3+0xec>
 80001ea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001ee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001f2:	bfc1      	itttt	gt
 80001f4:	18d2      	addgt	r2, r2, r3
 80001f6:	4041      	eorgt	r1, r0
 80001f8:	4048      	eorgt	r0, r1
 80001fa:	4041      	eorgt	r1, r0
 80001fc:	bfb8      	it	lt
 80001fe:	425b      	neglt	r3, r3
 8000200:	2b19      	cmp	r3, #25
 8000202:	bf88      	it	hi
 8000204:	4770      	bxhi	lr
 8000206:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800020a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800020e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000212:	bf18      	it	ne
 8000214:	4240      	negne	r0, r0
 8000216:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800021a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800021e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000222:	bf18      	it	ne
 8000224:	4249      	negne	r1, r1
 8000226:	ea92 0f03 	teq	r2, r3
 800022a:	d03f      	beq.n	80002ac <__addsf3+0xd8>
 800022c:	f1a2 0201 	sub.w	r2, r2, #1
 8000230:	fa41 fc03 	asr.w	ip, r1, r3
 8000234:	eb10 000c 	adds.w	r0, r0, ip
 8000238:	f1c3 0320 	rsb	r3, r3, #32
 800023c:	fa01 f103 	lsl.w	r1, r1, r3
 8000240:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000244:	d502      	bpl.n	800024c <__addsf3+0x78>
 8000246:	4249      	negs	r1, r1
 8000248:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800024c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000250:	d313      	bcc.n	800027a <__addsf3+0xa6>
 8000252:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000256:	d306      	bcc.n	8000266 <__addsf3+0x92>
 8000258:	0840      	lsrs	r0, r0, #1
 800025a:	ea4f 0131 	mov.w	r1, r1, rrx
 800025e:	f102 0201 	add.w	r2, r2, #1
 8000262:	2afe      	cmp	r2, #254	; 0xfe
 8000264:	d251      	bcs.n	800030a <__addsf3+0x136>
 8000266:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800026a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800026e:	bf08      	it	eq
 8000270:	f020 0001 	biceq.w	r0, r0, #1
 8000274:	ea40 0003 	orr.w	r0, r0, r3
 8000278:	4770      	bx	lr
 800027a:	0049      	lsls	r1, r1, #1
 800027c:	eb40 0000 	adc.w	r0, r0, r0
 8000280:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000284:	f1a2 0201 	sub.w	r2, r2, #1
 8000288:	d1ed      	bne.n	8000266 <__addsf3+0x92>
 800028a:	fab0 fc80 	clz	ip, r0
 800028e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000292:	ebb2 020c 	subs.w	r2, r2, ip
 8000296:	fa00 f00c 	lsl.w	r0, r0, ip
 800029a:	bfaa      	itet	ge
 800029c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002a0:	4252      	neglt	r2, r2
 80002a2:	4318      	orrge	r0, r3
 80002a4:	bfbc      	itt	lt
 80002a6:	40d0      	lsrlt	r0, r2
 80002a8:	4318      	orrlt	r0, r3
 80002aa:	4770      	bx	lr
 80002ac:	f092 0f00 	teq	r2, #0
 80002b0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002b4:	bf06      	itte	eq
 80002b6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002ba:	3201      	addeq	r2, #1
 80002bc:	3b01      	subne	r3, #1
 80002be:	e7b5      	b.n	800022c <__addsf3+0x58>
 80002c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002c8:	bf18      	it	ne
 80002ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002ce:	d021      	beq.n	8000314 <__addsf3+0x140>
 80002d0:	ea92 0f03 	teq	r2, r3
 80002d4:	d004      	beq.n	80002e0 <__addsf3+0x10c>
 80002d6:	f092 0f00 	teq	r2, #0
 80002da:	bf08      	it	eq
 80002dc:	4608      	moveq	r0, r1
 80002de:	4770      	bx	lr
 80002e0:	ea90 0f01 	teq	r0, r1
 80002e4:	bf1c      	itt	ne
 80002e6:	2000      	movne	r0, #0
 80002e8:	4770      	bxne	lr
 80002ea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002ee:	d104      	bne.n	80002fa <__addsf3+0x126>
 80002f0:	0040      	lsls	r0, r0, #1
 80002f2:	bf28      	it	cs
 80002f4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002f8:	4770      	bx	lr
 80002fa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002fe:	bf3c      	itt	cc
 8000300:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000304:	4770      	bxcc	lr
 8000306:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800030a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800030e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000312:	4770      	bx	lr
 8000314:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000318:	bf16      	itet	ne
 800031a:	4608      	movne	r0, r1
 800031c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000320:	4601      	movne	r1, r0
 8000322:	0242      	lsls	r2, r0, #9
 8000324:	bf06      	itte	eq
 8000326:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800032a:	ea90 0f01 	teqeq	r0, r1
 800032e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000332:	4770      	bx	lr

08000334 <__aeabi_ui2f>:
 8000334:	f04f 0300 	mov.w	r3, #0
 8000338:	e004      	b.n	8000344 <__aeabi_i2f+0x8>
 800033a:	bf00      	nop

0800033c <__aeabi_i2f>:
 800033c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000340:	bf48      	it	mi
 8000342:	4240      	negmi	r0, r0
 8000344:	ea5f 0c00 	movs.w	ip, r0
 8000348:	bf08      	it	eq
 800034a:	4770      	bxeq	lr
 800034c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000350:	4601      	mov	r1, r0
 8000352:	f04f 0000 	mov.w	r0, #0
 8000356:	e01c      	b.n	8000392 <__aeabi_l2f+0x2a>

08000358 <__aeabi_ul2f>:
 8000358:	ea50 0201 	orrs.w	r2, r0, r1
 800035c:	bf08      	it	eq
 800035e:	4770      	bxeq	lr
 8000360:	f04f 0300 	mov.w	r3, #0
 8000364:	e00a      	b.n	800037c <__aeabi_l2f+0x14>
 8000366:	bf00      	nop

08000368 <__aeabi_l2f>:
 8000368:	ea50 0201 	orrs.w	r2, r0, r1
 800036c:	bf08      	it	eq
 800036e:	4770      	bxeq	lr
 8000370:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000374:	d502      	bpl.n	800037c <__aeabi_l2f+0x14>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	ea5f 0c01 	movs.w	ip, r1
 8000380:	bf02      	ittt	eq
 8000382:	4684      	moveq	ip, r0
 8000384:	4601      	moveq	r1, r0
 8000386:	2000      	moveq	r0, #0
 8000388:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800038c:	bf08      	it	eq
 800038e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000392:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000396:	fabc f28c 	clz	r2, ip
 800039a:	3a08      	subs	r2, #8
 800039c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003a0:	db10      	blt.n	80003c4 <__aeabi_l2f+0x5c>
 80003a2:	fa01 fc02 	lsl.w	ip, r1, r2
 80003a6:	4463      	add	r3, ip
 80003a8:	fa00 fc02 	lsl.w	ip, r0, r2
 80003ac:	f1c2 0220 	rsb	r2, r2, #32
 80003b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b4:	fa20 f202 	lsr.w	r2, r0, r2
 80003b8:	eb43 0002 	adc.w	r0, r3, r2
 80003bc:	bf08      	it	eq
 80003be:	f020 0001 	biceq.w	r0, r0, #1
 80003c2:	4770      	bx	lr
 80003c4:	f102 0220 	add.w	r2, r2, #32
 80003c8:	fa01 fc02 	lsl.w	ip, r1, r2
 80003cc:	f1c2 0220 	rsb	r2, r2, #32
 80003d0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003d4:	fa21 f202 	lsr.w	r2, r1, r2
 80003d8:	eb43 0002 	adc.w	r0, r3, r2
 80003dc:	bf08      	it	eq
 80003de:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003e2:	4770      	bx	lr

080003e4 <__aeabi_ldivmod>:
 80003e4:	b97b      	cbnz	r3, 8000406 <__aeabi_ldivmod+0x22>
 80003e6:	b972      	cbnz	r2, 8000406 <__aeabi_ldivmod+0x22>
 80003e8:	2900      	cmp	r1, #0
 80003ea:	bfbe      	ittt	lt
 80003ec:	2000      	movlt	r0, #0
 80003ee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80003f2:	e006      	blt.n	8000402 <__aeabi_ldivmod+0x1e>
 80003f4:	bf08      	it	eq
 80003f6:	2800      	cmpeq	r0, #0
 80003f8:	bf1c      	itt	ne
 80003fa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80003fe:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000402:	f000 b9c5 	b.w	8000790 <__aeabi_idiv0>
 8000406:	f1ad 0c08 	sub.w	ip, sp, #8
 800040a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800040e:	2900      	cmp	r1, #0
 8000410:	db09      	blt.n	8000426 <__aeabi_ldivmod+0x42>
 8000412:	2b00      	cmp	r3, #0
 8000414:	db1a      	blt.n	800044c <__aeabi_ldivmod+0x68>
 8000416:	f000 f84d 	bl	80004b4 <__udivmoddi4>
 800041a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800041e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000422:	b004      	add	sp, #16
 8000424:	4770      	bx	lr
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	2b00      	cmp	r3, #0
 800042e:	db1b      	blt.n	8000468 <__aeabi_ldivmod+0x84>
 8000430:	f000 f840 	bl	80004b4 <__udivmoddi4>
 8000434:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000438:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800043c:	b004      	add	sp, #16
 800043e:	4240      	negs	r0, r0
 8000440:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000444:	4252      	negs	r2, r2
 8000446:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044a:	4770      	bx	lr
 800044c:	4252      	negs	r2, r2
 800044e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000452:	f000 f82f 	bl	80004b4 <__udivmoddi4>
 8000456:	f8dd e004 	ldr.w	lr, [sp, #4]
 800045a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800045e:	b004      	add	sp, #16
 8000460:	4240      	negs	r0, r0
 8000462:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000466:	4770      	bx	lr
 8000468:	4252      	negs	r2, r2
 800046a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800046e:	f000 f821 	bl	80004b4 <__udivmoddi4>
 8000472:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000476:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047a:	b004      	add	sp, #16
 800047c:	4252      	negs	r2, r2
 800047e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000482:	4770      	bx	lr

08000484 <__aeabi_uldivmod>:
 8000484:	b953      	cbnz	r3, 800049c <__aeabi_uldivmod+0x18>
 8000486:	b94a      	cbnz	r2, 800049c <__aeabi_uldivmod+0x18>
 8000488:	2900      	cmp	r1, #0
 800048a:	bf08      	it	eq
 800048c:	2800      	cmpeq	r0, #0
 800048e:	bf1c      	itt	ne
 8000490:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000494:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000498:	f000 b97a 	b.w	8000790 <__aeabi_idiv0>
 800049c:	f1ad 0c08 	sub.w	ip, sp, #8
 80004a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004a4:	f000 f806 	bl	80004b4 <__udivmoddi4>
 80004a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004b0:	b004      	add	sp, #16
 80004b2:	4770      	bx	lr

080004b4 <__udivmoddi4>:
 80004b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004b8:	468c      	mov	ip, r1
 80004ba:	460d      	mov	r5, r1
 80004bc:	4604      	mov	r4, r0
 80004be:	9e08      	ldr	r6, [sp, #32]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d151      	bne.n	8000568 <__udivmoddi4+0xb4>
 80004c4:	428a      	cmp	r2, r1
 80004c6:	4617      	mov	r7, r2
 80004c8:	d96d      	bls.n	80005a6 <__udivmoddi4+0xf2>
 80004ca:	fab2 fe82 	clz	lr, r2
 80004ce:	f1be 0f00 	cmp.w	lr, #0
 80004d2:	d00b      	beq.n	80004ec <__udivmoddi4+0x38>
 80004d4:	f1ce 0c20 	rsb	ip, lr, #32
 80004d8:	fa01 f50e 	lsl.w	r5, r1, lr
 80004dc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004e0:	fa02 f70e 	lsl.w	r7, r2, lr
 80004e4:	ea4c 0c05 	orr.w	ip, ip, r5
 80004e8:	fa00 f40e 	lsl.w	r4, r0, lr
 80004ec:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80004f0:	0c25      	lsrs	r5, r4, #16
 80004f2:	fbbc f8fa 	udiv	r8, ip, sl
 80004f6:	fa1f f987 	uxth.w	r9, r7
 80004fa:	fb0a cc18 	mls	ip, sl, r8, ip
 80004fe:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000502:	fb08 f309 	mul.w	r3, r8, r9
 8000506:	42ab      	cmp	r3, r5
 8000508:	d90a      	bls.n	8000520 <__udivmoddi4+0x6c>
 800050a:	19ed      	adds	r5, r5, r7
 800050c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000510:	f080 8123 	bcs.w	800075a <__udivmoddi4+0x2a6>
 8000514:	42ab      	cmp	r3, r5
 8000516:	f240 8120 	bls.w	800075a <__udivmoddi4+0x2a6>
 800051a:	f1a8 0802 	sub.w	r8, r8, #2
 800051e:	443d      	add	r5, r7
 8000520:	1aed      	subs	r5, r5, r3
 8000522:	b2a4      	uxth	r4, r4
 8000524:	fbb5 f0fa 	udiv	r0, r5, sl
 8000528:	fb0a 5510 	mls	r5, sl, r0, r5
 800052c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000530:	fb00 f909 	mul.w	r9, r0, r9
 8000534:	45a1      	cmp	r9, r4
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x98>
 8000538:	19e4      	adds	r4, r4, r7
 800053a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800053e:	f080 810a 	bcs.w	8000756 <__udivmoddi4+0x2a2>
 8000542:	45a1      	cmp	r9, r4
 8000544:	f240 8107 	bls.w	8000756 <__udivmoddi4+0x2a2>
 8000548:	3802      	subs	r0, #2
 800054a:	443c      	add	r4, r7
 800054c:	eba4 0409 	sub.w	r4, r4, r9
 8000550:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000554:	2100      	movs	r1, #0
 8000556:	2e00      	cmp	r6, #0
 8000558:	d061      	beq.n	800061e <__udivmoddi4+0x16a>
 800055a:	fa24 f40e 	lsr.w	r4, r4, lr
 800055e:	2300      	movs	r3, #0
 8000560:	6034      	str	r4, [r6, #0]
 8000562:	6073      	str	r3, [r6, #4]
 8000564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000568:	428b      	cmp	r3, r1
 800056a:	d907      	bls.n	800057c <__udivmoddi4+0xc8>
 800056c:	2e00      	cmp	r6, #0
 800056e:	d054      	beq.n	800061a <__udivmoddi4+0x166>
 8000570:	2100      	movs	r1, #0
 8000572:	e886 0021 	stmia.w	r6, {r0, r5}
 8000576:	4608      	mov	r0, r1
 8000578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800057c:	fab3 f183 	clz	r1, r3
 8000580:	2900      	cmp	r1, #0
 8000582:	f040 808e 	bne.w	80006a2 <__udivmoddi4+0x1ee>
 8000586:	42ab      	cmp	r3, r5
 8000588:	d302      	bcc.n	8000590 <__udivmoddi4+0xdc>
 800058a:	4282      	cmp	r2, r0
 800058c:	f200 80fa 	bhi.w	8000784 <__udivmoddi4+0x2d0>
 8000590:	1a84      	subs	r4, r0, r2
 8000592:	eb65 0503 	sbc.w	r5, r5, r3
 8000596:	2001      	movs	r0, #1
 8000598:	46ac      	mov	ip, r5
 800059a:	2e00      	cmp	r6, #0
 800059c:	d03f      	beq.n	800061e <__udivmoddi4+0x16a>
 800059e:	e886 1010 	stmia.w	r6, {r4, ip}
 80005a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a6:	b912      	cbnz	r2, 80005ae <__udivmoddi4+0xfa>
 80005a8:	2701      	movs	r7, #1
 80005aa:	fbb7 f7f2 	udiv	r7, r7, r2
 80005ae:	fab7 fe87 	clz	lr, r7
 80005b2:	f1be 0f00 	cmp.w	lr, #0
 80005b6:	d134      	bne.n	8000622 <__udivmoddi4+0x16e>
 80005b8:	1beb      	subs	r3, r5, r7
 80005ba:	0c3a      	lsrs	r2, r7, #16
 80005bc:	fa1f fc87 	uxth.w	ip, r7
 80005c0:	2101      	movs	r1, #1
 80005c2:	fbb3 f8f2 	udiv	r8, r3, r2
 80005c6:	0c25      	lsrs	r5, r4, #16
 80005c8:	fb02 3318 	mls	r3, r2, r8, r3
 80005cc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80005d0:	fb0c f308 	mul.w	r3, ip, r8
 80005d4:	42ab      	cmp	r3, r5
 80005d6:	d907      	bls.n	80005e8 <__udivmoddi4+0x134>
 80005d8:	19ed      	adds	r5, r5, r7
 80005da:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80005de:	d202      	bcs.n	80005e6 <__udivmoddi4+0x132>
 80005e0:	42ab      	cmp	r3, r5
 80005e2:	f200 80d1 	bhi.w	8000788 <__udivmoddi4+0x2d4>
 80005e6:	4680      	mov	r8, r0
 80005e8:	1aed      	subs	r5, r5, r3
 80005ea:	b2a3      	uxth	r3, r4
 80005ec:	fbb5 f0f2 	udiv	r0, r5, r2
 80005f0:	fb02 5510 	mls	r5, r2, r0, r5
 80005f4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80005f8:	fb0c fc00 	mul.w	ip, ip, r0
 80005fc:	45a4      	cmp	ip, r4
 80005fe:	d907      	bls.n	8000610 <__udivmoddi4+0x15c>
 8000600:	19e4      	adds	r4, r4, r7
 8000602:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000606:	d202      	bcs.n	800060e <__udivmoddi4+0x15a>
 8000608:	45a4      	cmp	ip, r4
 800060a:	f200 80b8 	bhi.w	800077e <__udivmoddi4+0x2ca>
 800060e:	4618      	mov	r0, r3
 8000610:	eba4 040c 	sub.w	r4, r4, ip
 8000614:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000618:	e79d      	b.n	8000556 <__udivmoddi4+0xa2>
 800061a:	4631      	mov	r1, r6
 800061c:	4630      	mov	r0, r6
 800061e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000622:	f1ce 0420 	rsb	r4, lr, #32
 8000626:	fa05 f30e 	lsl.w	r3, r5, lr
 800062a:	fa07 f70e 	lsl.w	r7, r7, lr
 800062e:	fa20 f804 	lsr.w	r8, r0, r4
 8000632:	0c3a      	lsrs	r2, r7, #16
 8000634:	fa25 f404 	lsr.w	r4, r5, r4
 8000638:	ea48 0803 	orr.w	r8, r8, r3
 800063c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000640:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000644:	fb02 4411 	mls	r4, r2, r1, r4
 8000648:	fa1f fc87 	uxth.w	ip, r7
 800064c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000650:	fb01 f30c 	mul.w	r3, r1, ip
 8000654:	42ab      	cmp	r3, r5
 8000656:	fa00 f40e 	lsl.w	r4, r0, lr
 800065a:	d909      	bls.n	8000670 <__udivmoddi4+0x1bc>
 800065c:	19ed      	adds	r5, r5, r7
 800065e:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000662:	f080 808a 	bcs.w	800077a <__udivmoddi4+0x2c6>
 8000666:	42ab      	cmp	r3, r5
 8000668:	f240 8087 	bls.w	800077a <__udivmoddi4+0x2c6>
 800066c:	3902      	subs	r1, #2
 800066e:	443d      	add	r5, r7
 8000670:	1aeb      	subs	r3, r5, r3
 8000672:	fa1f f588 	uxth.w	r5, r8
 8000676:	fbb3 f0f2 	udiv	r0, r3, r2
 800067a:	fb02 3310 	mls	r3, r2, r0, r3
 800067e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000682:	fb00 f30c 	mul.w	r3, r0, ip
 8000686:	42ab      	cmp	r3, r5
 8000688:	d907      	bls.n	800069a <__udivmoddi4+0x1e6>
 800068a:	19ed      	adds	r5, r5, r7
 800068c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000690:	d26f      	bcs.n	8000772 <__udivmoddi4+0x2be>
 8000692:	42ab      	cmp	r3, r5
 8000694:	d96d      	bls.n	8000772 <__udivmoddi4+0x2be>
 8000696:	3802      	subs	r0, #2
 8000698:	443d      	add	r5, r7
 800069a:	1aeb      	subs	r3, r5, r3
 800069c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006a0:	e78f      	b.n	80005c2 <__udivmoddi4+0x10e>
 80006a2:	f1c1 0720 	rsb	r7, r1, #32
 80006a6:	fa22 f807 	lsr.w	r8, r2, r7
 80006aa:	408b      	lsls	r3, r1
 80006ac:	fa05 f401 	lsl.w	r4, r5, r1
 80006b0:	ea48 0303 	orr.w	r3, r8, r3
 80006b4:	fa20 fe07 	lsr.w	lr, r0, r7
 80006b8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80006bc:	40fd      	lsrs	r5, r7
 80006be:	ea4e 0e04 	orr.w	lr, lr, r4
 80006c2:	fbb5 f9fc 	udiv	r9, r5, ip
 80006c6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80006ca:	fb0c 5519 	mls	r5, ip, r9, r5
 80006ce:	fa1f f883 	uxth.w	r8, r3
 80006d2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80006d6:	fb09 f408 	mul.w	r4, r9, r8
 80006da:	42ac      	cmp	r4, r5
 80006dc:	fa02 f201 	lsl.w	r2, r2, r1
 80006e0:	fa00 fa01 	lsl.w	sl, r0, r1
 80006e4:	d908      	bls.n	80006f8 <__udivmoddi4+0x244>
 80006e6:	18ed      	adds	r5, r5, r3
 80006e8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80006ec:	d243      	bcs.n	8000776 <__udivmoddi4+0x2c2>
 80006ee:	42ac      	cmp	r4, r5
 80006f0:	d941      	bls.n	8000776 <__udivmoddi4+0x2c2>
 80006f2:	f1a9 0902 	sub.w	r9, r9, #2
 80006f6:	441d      	add	r5, r3
 80006f8:	1b2d      	subs	r5, r5, r4
 80006fa:	fa1f fe8e 	uxth.w	lr, lr
 80006fe:	fbb5 f0fc 	udiv	r0, r5, ip
 8000702:	fb0c 5510 	mls	r5, ip, r0, r5
 8000706:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800070a:	fb00 f808 	mul.w	r8, r0, r8
 800070e:	45a0      	cmp	r8, r4
 8000710:	d907      	bls.n	8000722 <__udivmoddi4+0x26e>
 8000712:	18e4      	adds	r4, r4, r3
 8000714:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000718:	d229      	bcs.n	800076e <__udivmoddi4+0x2ba>
 800071a:	45a0      	cmp	r8, r4
 800071c:	d927      	bls.n	800076e <__udivmoddi4+0x2ba>
 800071e:	3802      	subs	r0, #2
 8000720:	441c      	add	r4, r3
 8000722:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000726:	eba4 0408 	sub.w	r4, r4, r8
 800072a:	fba0 8902 	umull	r8, r9, r0, r2
 800072e:	454c      	cmp	r4, r9
 8000730:	46c6      	mov	lr, r8
 8000732:	464d      	mov	r5, r9
 8000734:	d315      	bcc.n	8000762 <__udivmoddi4+0x2ae>
 8000736:	d012      	beq.n	800075e <__udivmoddi4+0x2aa>
 8000738:	b156      	cbz	r6, 8000750 <__udivmoddi4+0x29c>
 800073a:	ebba 030e 	subs.w	r3, sl, lr
 800073e:	eb64 0405 	sbc.w	r4, r4, r5
 8000742:	fa04 f707 	lsl.w	r7, r4, r7
 8000746:	40cb      	lsrs	r3, r1
 8000748:	431f      	orrs	r7, r3
 800074a:	40cc      	lsrs	r4, r1
 800074c:	6037      	str	r7, [r6, #0]
 800074e:	6074      	str	r4, [r6, #4]
 8000750:	2100      	movs	r1, #0
 8000752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000756:	4618      	mov	r0, r3
 8000758:	e6f8      	b.n	800054c <__udivmoddi4+0x98>
 800075a:	4690      	mov	r8, r2
 800075c:	e6e0      	b.n	8000520 <__udivmoddi4+0x6c>
 800075e:	45c2      	cmp	sl, r8
 8000760:	d2ea      	bcs.n	8000738 <__udivmoddi4+0x284>
 8000762:	ebb8 0e02 	subs.w	lr, r8, r2
 8000766:	eb69 0503 	sbc.w	r5, r9, r3
 800076a:	3801      	subs	r0, #1
 800076c:	e7e4      	b.n	8000738 <__udivmoddi4+0x284>
 800076e:	4628      	mov	r0, r5
 8000770:	e7d7      	b.n	8000722 <__udivmoddi4+0x26e>
 8000772:	4640      	mov	r0, r8
 8000774:	e791      	b.n	800069a <__udivmoddi4+0x1e6>
 8000776:	4681      	mov	r9, r0
 8000778:	e7be      	b.n	80006f8 <__udivmoddi4+0x244>
 800077a:	4601      	mov	r1, r0
 800077c:	e778      	b.n	8000670 <__udivmoddi4+0x1bc>
 800077e:	3802      	subs	r0, #2
 8000780:	443c      	add	r4, r7
 8000782:	e745      	b.n	8000610 <__udivmoddi4+0x15c>
 8000784:	4608      	mov	r0, r1
 8000786:	e708      	b.n	800059a <__udivmoddi4+0xe6>
 8000788:	f1a8 0802 	sub.w	r8, r8, #2
 800078c:	443d      	add	r5, r7
 800078e:	e72b      	b.n	80005e8 <__udivmoddi4+0x134>

08000790 <__aeabi_idiv0>:
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop

08000794 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800079a:	2300      	movs	r3, #0
 800079c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800079e:	2003      	movs	r0, #3
 80007a0:	f000 f8d1 	bl	8000946 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007a4:	2000      	movs	r0, #0
 80007a6:	f004 ffc7 	bl	8005738 <HAL_InitTick>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d002      	beq.n	80007b6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007b0:	2301      	movs	r3, #1
 80007b2:	71fb      	strb	r3, [r7, #7]
 80007b4:	e001      	b.n	80007ba <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007b6:	f004 fe75 	bl	80054a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007ba:	79fb      	ldrb	r3, [r7, #7]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  uwTick++;
 80007c8:	4b04      	ldr	r3, [pc, #16]	; (80007dc <HAL_IncTick+0x18>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	4a03      	ldr	r2, [pc, #12]	; (80007dc <HAL_IncTick+0x18>)
 80007d0:	6013      	str	r3, [r2, #0]
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	20000020 	.word	0x20000020

080007e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  return uwTick;
 80007e4:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <HAL_GetTick+0x14>)
 80007e6:	681b      	ldr	r3, [r3, #0]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	20000020 	.word	0x20000020

080007f8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f003 0307 	and.w	r3, r3, #7
 8000806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <NVIC_SetPriorityGrouping+0x44>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800080e:	68ba      	ldr	r2, [r7, #8]
 8000810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000814:	4013      	ands	r3, r2
 8000816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800082a:	4a04      	ldr	r2, [pc, #16]	; (800083c <NVIC_SetPriorityGrouping+0x44>)
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	60d3      	str	r3, [r2, #12]
}
 8000830:	bf00      	nop
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000844:	4b04      	ldr	r3, [pc, #16]	; (8000858 <NVIC_GetPriorityGrouping+0x18>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	0a1b      	lsrs	r3, r3, #8
 800084a:	f003 0307 	and.w	r3, r3, #7
}
 800084e:	4618      	mov	r0, r3
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000866:	4909      	ldr	r1, [pc, #36]	; (800088c <NVIC_EnableIRQ+0x30>)
 8000868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086c:	095b      	lsrs	r3, r3, #5
 800086e:	79fa      	ldrb	r2, [r7, #7]
 8000870:	f002 021f 	and.w	r2, r2, #31
 8000874:	2001      	movs	r0, #1
 8000876:	fa00 f202 	lsl.w	r2, r0, r2
 800087a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000e100 	.word	0xe000e100

08000890 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	6039      	str	r1, [r7, #0]
 800089a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800089c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	da0b      	bge.n	80008bc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a4:	490d      	ldr	r1, [pc, #52]	; (80008dc <NVIC_SetPriority+0x4c>)
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	f003 030f 	and.w	r3, r3, #15
 80008ac:	3b04      	subs	r3, #4
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	b2d2      	uxtb	r2, r2
 80008b2:	0112      	lsls	r2, r2, #4
 80008b4:	b2d2      	uxtb	r2, r2
 80008b6:	440b      	add	r3, r1
 80008b8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008ba:	e009      	b.n	80008d0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008bc:	4908      	ldr	r1, [pc, #32]	; (80008e0 <NVIC_SetPriority+0x50>)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	683a      	ldr	r2, [r7, #0]
 80008c4:	b2d2      	uxtb	r2, r2
 80008c6:	0112      	lsls	r2, r2, #4
 80008c8:	b2d2      	uxtb	r2, r2
 80008ca:	440b      	add	r3, r1
 80008cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000ed00 	.word	0xe000ed00
 80008e0:	e000e100 	.word	0xe000e100

080008e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b089      	sub	sp, #36	; 0x24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	f1c3 0307 	rsb	r3, r3, #7
 80008fe:	2b04      	cmp	r3, #4
 8000900:	bf28      	it	cs
 8000902:	2304      	movcs	r3, #4
 8000904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	3304      	adds	r3, #4
 800090a:	2b06      	cmp	r3, #6
 800090c:	d902      	bls.n	8000914 <NVIC_EncodePriority+0x30>
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3b03      	subs	r3, #3
 8000912:	e000      	b.n	8000916 <NVIC_EncodePriority+0x32>
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	2201      	movs	r2, #1
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	1e5a      	subs	r2, r3, #1
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	401a      	ands	r2, r3
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800092a:	2101      	movs	r1, #1
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	fa01 f303 	lsl.w	r3, r1, r3
 8000932:	1e59      	subs	r1, r3, #1
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	4313      	orrs	r3, r2
         );
}
 800093a:	4618      	mov	r0, r3
 800093c:	3724      	adds	r7, #36	; 0x24
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff ff52 	bl	80007f8 <NVIC_SetPriorityGrouping>
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
 8000968:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800096e:	f7ff ff67 	bl	8000840 <NVIC_GetPriorityGrouping>
 8000972:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	68b9      	ldr	r1, [r7, #8]
 8000978:	6978      	ldr	r0, [r7, #20]
 800097a:	f7ff ffb3 	bl	80008e4 <NVIC_EncodePriority>
 800097e:	4602      	mov	r2, r0
 8000980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000984:	4611      	mov	r1, r2
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ff82 	bl	8000890 <NVIC_SetPriority>
}
 800098c:	bf00      	nop
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ff5a 	bl	800085c <NVIC_EnableIRQ>
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d101      	bne.n	80009c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	e098      	b.n	8000af4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	4b4d      	ldr	r3, [pc, #308]	; (8000b00 <HAL_DMA_Init+0x150>)
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d80f      	bhi.n	80009ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	461a      	mov	r2, r3
 80009d4:	4b4b      	ldr	r3, [pc, #300]	; (8000b04 <HAL_DMA_Init+0x154>)
 80009d6:	4413      	add	r3, r2
 80009d8:	4a4b      	ldr	r2, [pc, #300]	; (8000b08 <HAL_DMA_Init+0x158>)
 80009da:	fba2 2303 	umull	r2, r3, r2, r3
 80009de:	091b      	lsrs	r3, r3, #4
 80009e0:	009a      	lsls	r2, r3, #2
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a48      	ldr	r2, [pc, #288]	; (8000b0c <HAL_DMA_Init+0x15c>)
 80009ea:	641a      	str	r2, [r3, #64]	; 0x40
 80009ec:	e00e      	b.n	8000a0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b46      	ldr	r3, [pc, #280]	; (8000b10 <HAL_DMA_Init+0x160>)
 80009f6:	4413      	add	r3, r2
 80009f8:	4a43      	ldr	r2, [pc, #268]	; (8000b08 <HAL_DMA_Init+0x158>)
 80009fa:	fba2 2303 	umull	r2, r3, r2, r3
 80009fe:	091b      	lsrs	r3, r3, #4
 8000a00:	009a      	lsls	r2, r3, #2
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a42      	ldr	r2, [pc, #264]	; (8000b14 <HAL_DMA_Init+0x164>)
 8000a0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2202      	movs	r2, #2
 8000a10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000a30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	691b      	ldr	r3, [r3, #16]
 8000a36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6a1b      	ldr	r3, [r3, #32]
 8000a4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a66:	d039      	beq.n	8000adc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	4a27      	ldr	r2, [pc, #156]	; (8000b0c <HAL_DMA_Init+0x15c>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d11a      	bne.n	8000aa8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000a72:	4929      	ldr	r1, [pc, #164]	; (8000b18 <HAL_DMA_Init+0x168>)
 8000a74:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <HAL_DMA_Init+0x168>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7c:	f003 031c 	and.w	r3, r3, #28
 8000a80:	200f      	movs	r0, #15
 8000a82:	fa00 f303 	lsl.w	r3, r0, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	4013      	ands	r3, r2
 8000a8a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000a8c:	4822      	ldr	r0, [pc, #136]	; (8000b18 <HAL_DMA_Init+0x168>)
 8000a8e:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <HAL_DMA_Init+0x168>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6859      	ldr	r1, [r3, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	f003 031c 	and.w	r3, r3, #28
 8000a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	6003      	str	r3, [r0, #0]
 8000aa6:	e019      	b.n	8000adc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000aa8:	491c      	ldr	r1, [pc, #112]	; (8000b1c <HAL_DMA_Init+0x16c>)
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <HAL_DMA_Init+0x16c>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	f003 031c 	and.w	r3, r3, #28
 8000ab6:	200f      	movs	r0, #15
 8000ab8:	fa00 f303 	lsl.w	r3, r0, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	4013      	ands	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000ac2:	4816      	ldr	r0, [pc, #88]	; (8000b1c <HAL_DMA_Init+0x16c>)
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_DMA_Init+0x16c>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6859      	ldr	r1, [r3, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad0:	f003 031c 	and.w	r3, r3, #28
 8000ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	6003      	str	r3, [r0, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000af2:	2300      	movs	r3, #0
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	40020407 	.word	0x40020407
 8000b04:	bffdfff8 	.word	0xbffdfff8
 8000b08:	cccccccd 	.word	0xcccccccd
 8000b0c:	40020000 	.word	0x40020000
 8000b10:	bffdfbf8 	.word	0xbffdfbf8
 8000b14:	40020400 	.word	0x40020400
 8000b18:	400200a8 	.word	0x400200a8
 8000b1c:	400204a8 	.word	0x400204a8

08000b20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3c:	f003 031c 	and.w	r3, r3, #28
 8000b40:	2204      	movs	r2, #4
 8000b42:	409a      	lsls	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4013      	ands	r3, r2
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d026      	beq.n	8000b9a <HAL_DMA_IRQHandler+0x7a>
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d021      	beq.n	8000b9a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f003 0320 	and.w	r3, r3, #32
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d107      	bne.n	8000b74 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	6812      	ldr	r2, [r2, #0]
 8000b6c:	6812      	ldr	r2, [r2, #0]
 8000b6e:	f022 0204 	bic.w	r2, r2, #4
 8000b72:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000b7c:	f002 021c 	and.w	r2, r2, #28
 8000b80:	2104      	movs	r1, #4
 8000b82:	fa01 f202 	lsl.w	r2, r1, r2
 8000b86:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d071      	beq.n	8000c74 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8000b98:	e06c      	b.n	8000c74 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f003 031c 	and.w	r3, r3, #28
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	409a      	lsls	r2, r3
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d02e      	beq.n	8000c0c <HAL_DMA_IRQHandler+0xec>
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d029      	beq.n	8000c0c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f003 0320 	and.w	r3, r3, #32
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d10b      	bne.n	8000bde <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	6812      	ldr	r2, [r2, #0]
 8000bce:	6812      	ldr	r2, [r2, #0]
 8000bd0:	f022 020a 	bic.w	r2, r2, #10
 8000bd4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000be6:	f002 021c 	and.w	r2, r2, #28
 8000bea:	2102      	movs	r1, #2
 8000bec:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d038      	beq.n	8000c74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000c0a:	e033      	b.n	8000c74 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c10:	f003 031c 	and.w	r3, r3, #28
 8000c14:	2208      	movs	r2, #8
 8000c16:	409a      	lsls	r2, r3
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d02a      	beq.n	8000c76 <HAL_DMA_IRQHandler+0x156>
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	f003 0308 	and.w	r3, r3, #8
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d025      	beq.n	8000c76 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	6812      	ldr	r2, [r2, #0]
 8000c32:	6812      	ldr	r2, [r2, #0]
 8000c34:	f022 020e 	bic.w	r2, r2, #14
 8000c38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000c42:	f002 021c 	and.w	r2, r2, #28
 8000c46:	2101      	movs	r1, #1
 8000c48:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2201      	movs	r2, #1
 8000c52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2201      	movs	r2, #1
 8000c58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d004      	beq.n	8000c76 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000c74:	bf00      	nop
 8000c76:	bf00      	nop
}
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b087      	sub	sp, #28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c8e:	e17f      	b.n	8000f90 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	2101      	movs	r1, #1
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f000 8171 	beq.w	8000f8a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d003      	beq.n	8000cb8 <HAL_GPIO_Init+0x38>
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	2b12      	cmp	r3, #18
 8000cb6:	d123      	bne.n	8000d00 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	08da      	lsrs	r2, r3, #3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3208      	adds	r2, #8
 8000cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	f003 0307 	and.w	r3, r3, #7
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	220f      	movs	r2, #15
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	691a      	ldr	r2, [r3, #16]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	08da      	lsrs	r2, r3, #3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3208      	adds	r2, #8
 8000cfa:	6939      	ldr	r1, [r7, #16]
 8000cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0203 	and.w	r2, r3, #3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d00b      	beq.n	8000d54 <HAL_GPIO_Init+0xd4>
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d007      	beq.n	8000d54 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d48:	2b11      	cmp	r3, #17
 8000d4a:	d003      	beq.n	8000d54 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2b12      	cmp	r3, #18
 8000d52:	d130      	bne.n	8000db6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	2203      	movs	r2, #3
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	68da      	ldr	r2, [r3, #12]
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	091b      	lsrs	r3, r3, #4
 8000da0:	f003 0201 	and.w	r2, r3, #1
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0303 	and.w	r3, r3, #3
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d118      	bne.n	8000df4 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000dc8:	2201      	movs	r2, #1
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	08db      	lsrs	r3, r3, #3
 8000dde:	f003 0201 	and.w	r2, r3, #1
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f000 80ac 	beq.w	8000f8a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	4a5e      	ldr	r2, [pc, #376]	; (8000fac <HAL_GPIO_Init+0x32c>)
 8000e34:	4b5d      	ldr	r3, [pc, #372]	; (8000fac <HAL_GPIO_Init+0x32c>)
 8000e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e3e:	4b5b      	ldr	r3, [pc, #364]	; (8000fac <HAL_GPIO_Init+0x32c>)
 8000e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e4a:	4a59      	ldr	r2, [pc, #356]	; (8000fb0 <HAL_GPIO_Init+0x330>)
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	089b      	lsrs	r3, r3, #2
 8000e50:	3302      	adds	r3, #2
 8000e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e56:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	220f      	movs	r2, #15
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e74:	d025      	beq.n	8000ec2 <HAL_GPIO_Init+0x242>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4e      	ldr	r2, [pc, #312]	; (8000fb4 <HAL_GPIO_Init+0x334>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d01f      	beq.n	8000ebe <HAL_GPIO_Init+0x23e>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4d      	ldr	r2, [pc, #308]	; (8000fb8 <HAL_GPIO_Init+0x338>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d019      	beq.n	8000eba <HAL_GPIO_Init+0x23a>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4c      	ldr	r2, [pc, #304]	; (8000fbc <HAL_GPIO_Init+0x33c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d013      	beq.n	8000eb6 <HAL_GPIO_Init+0x236>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4b      	ldr	r2, [pc, #300]	; (8000fc0 <HAL_GPIO_Init+0x340>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d00d      	beq.n	8000eb2 <HAL_GPIO_Init+0x232>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4a      	ldr	r2, [pc, #296]	; (8000fc4 <HAL_GPIO_Init+0x344>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d007      	beq.n	8000eae <HAL_GPIO_Init+0x22e>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a49      	ldr	r2, [pc, #292]	; (8000fc8 <HAL_GPIO_Init+0x348>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d101      	bne.n	8000eaa <HAL_GPIO_Init+0x22a>
 8000ea6:	2306      	movs	r3, #6
 8000ea8:	e00c      	b.n	8000ec4 <HAL_GPIO_Init+0x244>
 8000eaa:	2307      	movs	r3, #7
 8000eac:	e00a      	b.n	8000ec4 <HAL_GPIO_Init+0x244>
 8000eae:	2305      	movs	r3, #5
 8000eb0:	e008      	b.n	8000ec4 <HAL_GPIO_Init+0x244>
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	e006      	b.n	8000ec4 <HAL_GPIO_Init+0x244>
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e004      	b.n	8000ec4 <HAL_GPIO_Init+0x244>
 8000eba:	2302      	movs	r3, #2
 8000ebc:	e002      	b.n	8000ec4 <HAL_GPIO_Init+0x244>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e000      	b.n	8000ec4 <HAL_GPIO_Init+0x244>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	f002 0203 	and.w	r2, r2, #3
 8000eca:	0092      	lsls	r2, r2, #2
 8000ecc:	4093      	lsls	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ed4:	4936      	ldr	r1, [pc, #216]	; (8000fb0 <HAL_GPIO_Init+0x330>)
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	089b      	lsrs	r3, r3, #2
 8000eda:	3302      	adds	r3, #2
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ee2:	4b3a      	ldr	r3, [pc, #232]	; (8000fcc <HAL_GPIO_Init+0x34c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f06:	4a31      	ldr	r2, [pc, #196]	; (8000fcc <HAL_GPIO_Init+0x34c>)
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000f0c:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <HAL_GPIO_Init+0x34c>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f30:	4a26      	ldr	r2, [pc, #152]	; (8000fcc <HAL_GPIO_Init+0x34c>)
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f36:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <HAL_GPIO_Init+0x34c>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f5a:	4a1c      	ldr	r2, [pc, #112]	; (8000fcc <HAL_GPIO_Init+0x34c>)
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f60:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <HAL_GPIO_Init+0x34c>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f84:	4a11      	ldr	r2, [pc, #68]	; (8000fcc <HAL_GPIO_Init+0x34c>)
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa22 f303 	lsr.w	r3, r2, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f47f ae78 	bne.w	8000c90 <HAL_GPIO_Init+0x10>
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	371c      	adds	r7, #28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40010000 	.word	0x40010000
 8000fb4:	48000400 	.word	0x48000400
 8000fb8:	48000800 	.word	0x48000800
 8000fbc:	48000c00 	.word	0x48000c00
 8000fc0:	48001000 	.word	0x48001000
 8000fc4:	48001400 	.word	0x48001400
 8000fc8:	48001800 	.word	0x48001800
 8000fcc:	40010400 	.word	0x40010400

08000fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	807b      	strh	r3, [r7, #2]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe0:	787b      	ldrb	r3, [r7, #1]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fe6:	887a      	ldrh	r2, [r7, #2]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fec:	e002      	b.n	8000ff4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fee:	887a      	ldrh	r2, [r7, #2]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	695a      	ldr	r2, [r3, #20]
 8001010:	887b      	ldrh	r3, [r7, #2]
 8001012:	405a      	eors	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	615a      	str	r2, [r3, #20]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001030:	695a      	ldr	r2, [r3, #20]
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	4013      	ands	r3, r2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d006      	beq.n	8001048 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	4618      	mov	r0, r3
 8001044:	f003 ff78 	bl	8004f38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40010400 	.word	0x40010400

08001054 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e080      	b.n	8001168 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d106      	bne.n	8001080 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f004 fa3c 	bl	80054f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2224      	movs	r2, #36	; 0x24
 8001084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	6812      	ldr	r2, [r2, #0]
 8001090:	6812      	ldr	r2, [r2, #0]
 8001092:	f022 0201 	bic.w	r2, r2, #1
 8001096:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	6852      	ldr	r2, [r2, #4]
 80010a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	6812      	ldr	r2, [r2, #0]
 80010ae:	6892      	ldr	r2, [r2, #8]
 80010b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d107      	bne.n	80010ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	6892      	ldr	r2, [r2, #8]
 80010c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	e006      	b.n	80010dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	6892      	ldr	r2, [r2, #8]
 80010d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80010da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d104      	bne.n	80010ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001100:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	6812      	ldr	r2, [r2, #0]
 800110a:	68d2      	ldr	r2, [r2, #12]
 800110c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001110:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6911      	ldr	r1, [r2, #16]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	6952      	ldr	r2, [r2, #20]
 800111e:	4311      	orrs	r1, r2
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	6992      	ldr	r2, [r2, #24]
 8001124:	0212      	lsls	r2, r2, #8
 8001126:	430a      	orrs	r2, r1
 8001128:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	69d1      	ldr	r1, [r2, #28]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	6a12      	ldr	r2, [r2, #32]
 8001136:	430a      	orrs	r2, r1
 8001138:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	6812      	ldr	r2, [r2, #0]
 8001142:	6812      	ldr	r2, [r2, #0]
 8001144:	f042 0201 	orr.w	r2, r2, #1
 8001148:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2220      	movs	r2, #32
 8001154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af02      	add	r7, sp, #8
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	4608      	mov	r0, r1
 800117a:	4611      	mov	r1, r2
 800117c:	461a      	mov	r2, r3
 800117e:	4603      	mov	r3, r0
 8001180:	817b      	strh	r3, [r7, #10]
 8001182:	460b      	mov	r3, r1
 8001184:	813b      	strh	r3, [r7, #8]
 8001186:	4613      	mov	r3, r2
 8001188:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b20      	cmp	r3, #32
 8001194:	f040 80f9 	bne.w	800138a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001198:	6a3b      	ldr	r3, [r7, #32]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d002      	beq.n	80011a4 <HAL_I2C_Mem_Write+0x34>
 800119e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d105      	bne.n	80011b0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e0ed      	b.n	800138c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d101      	bne.n	80011be <HAL_I2C_Mem_Write+0x4e>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e0e6      	b.n	800138c <HAL_I2C_Mem_Write+0x21c>
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011c6:	f7ff fb0b 	bl	80007e0 <HAL_GetTick>
 80011ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2319      	movs	r3, #25
 80011d2:	2201      	movs	r2, #1
 80011d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f000 fbcb 	bl	8001974 <I2C_WaitOnFlagUntilTimeout>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e0d1      	b.n	800138c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2221      	movs	r2, #33	; 0x21
 80011ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2240      	movs	r2, #64	; 0x40
 80011f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2200      	movs	r2, #0
 80011fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6a3a      	ldr	r2, [r7, #32]
 8001202:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001208:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2200      	movs	r2, #0
 800120e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001210:	88f8      	ldrh	r0, [r7, #6]
 8001212:	893a      	ldrh	r2, [r7, #8]
 8001214:	8979      	ldrh	r1, [r7, #10]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	4603      	mov	r3, r0
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f000 fadb 	bl	80017dc <I2C_RequestMemoryWrite>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e0a9      	b.n	800138c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800123c:	b29b      	uxth	r3, r3
 800123e:	2bff      	cmp	r3, #255	; 0xff
 8001240:	d90e      	bls.n	8001260 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	22ff      	movs	r2, #255	; 0xff
 8001246:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800124c:	b2da      	uxtb	r2, r3
 800124e:	8979      	ldrh	r1, [r7, #10]
 8001250:	2300      	movs	r3, #0
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	f000 fcad 	bl	8001bb8 <I2C_TransferConfig>
 800125e:	e00f      	b.n	8001280 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001264:	b29a      	uxth	r2, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800126e:	b2da      	uxtb	r2, r3
 8001270:	8979      	ldrh	r1, [r7, #10]
 8001272:	2300      	movs	r3, #0
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f000 fc9c 	bl	8001bb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f000 fbb5 	bl	80019f4 <I2C_WaitOnTXISFlagUntilTimeout>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e07b      	b.n	800138c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800129c:	7812      	ldrb	r2, [r2, #0]
 800129e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	3b01      	subs	r3, #1
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012bc:	3b01      	subs	r3, #1
 80012be:	b29a      	uxth	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d034      	beq.n	8001338 <HAL_I2C_Mem_Write+0x1c8>
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d130      	bne.n	8001338 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012dc:	2200      	movs	r2, #0
 80012de:	2180      	movs	r1, #128	; 0x80
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f000 fb47 	bl	8001974 <I2C_WaitOnFlagUntilTimeout>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e04d      	b.n	800138c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	2bff      	cmp	r3, #255	; 0xff
 80012f8:	d90e      	bls.n	8001318 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	22ff      	movs	r2, #255	; 0xff
 80012fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001304:	b2da      	uxtb	r2, r3
 8001306:	8979      	ldrh	r1, [r7, #10]
 8001308:	2300      	movs	r3, #0
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	f000 fc51 	bl	8001bb8 <I2C_TransferConfig>
 8001316:	e00f      	b.n	8001338 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800131c:	b29a      	uxth	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001326:	b2da      	uxtb	r2, r3
 8001328:	8979      	ldrh	r1, [r7, #10]
 800132a:	2300      	movs	r3, #0
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f000 fc40 	bl	8001bb8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800133c:	b29b      	uxth	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d19e      	bne.n	8001280 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f000 fb94 	bl	8001a74 <I2C_WaitOnSTOPFlagUntilTimeout>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e01a      	b.n	800138c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2220      	movs	r2, #32
 800135c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6859      	ldr	r1, [r3, #4]
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_I2C_Mem_Write+0x224>)
 800136a:	400b      	ands	r3, r1
 800136c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2220      	movs	r2, #32
 8001372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	e000      	b.n	800138c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800138a:	2302      	movs	r3, #2
  }
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	fe00e800 	.word	0xfe00e800

08001398 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af02      	add	r7, sp, #8
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	4608      	mov	r0, r1
 80013a2:	4611      	mov	r1, r2
 80013a4:	461a      	mov	r2, r3
 80013a6:	4603      	mov	r3, r0
 80013a8:	817b      	strh	r3, [r7, #10]
 80013aa:	460b      	mov	r3, r1
 80013ac:	813b      	strh	r3, [r7, #8]
 80013ae:	4613      	mov	r3, r2
 80013b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b20      	cmp	r3, #32
 80013bc:	f040 80fd 	bne.w	80015ba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d002      	beq.n	80013cc <HAL_I2C_Mem_Read+0x34>
 80013c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d105      	bne.n	80013d8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e0f1      	b.n	80015bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d101      	bne.n	80013e6 <HAL_I2C_Mem_Read+0x4e>
 80013e2:	2302      	movs	r3, #2
 80013e4:	e0ea      	b.n	80015bc <HAL_I2C_Mem_Read+0x224>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013ee:	f7ff f9f7 	bl	80007e0 <HAL_GetTick>
 80013f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	2319      	movs	r3, #25
 80013fa:	2201      	movs	r2, #1
 80013fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f000 fab7 	bl	8001974 <I2C_WaitOnFlagUntilTimeout>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0d5      	b.n	80015bc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2222      	movs	r2, #34	; 0x22
 8001414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2240      	movs	r2, #64	; 0x40
 800141c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2200      	movs	r2, #0
 8001424:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6a3a      	ldr	r2, [r7, #32]
 800142a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001430:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2200      	movs	r2, #0
 8001436:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001438:	88f8      	ldrh	r0, [r7, #6]
 800143a:	893a      	ldrh	r2, [r7, #8]
 800143c:	8979      	ldrh	r1, [r7, #10]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	4603      	mov	r3, r0
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f000 fa1b 	bl	8001884 <I2C_RequestMemoryRead>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0ad      	b.n	80015bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001464:	b29b      	uxth	r3, r3
 8001466:	2bff      	cmp	r3, #255	; 0xff
 8001468:	d90e      	bls.n	8001488 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	22ff      	movs	r2, #255	; 0xff
 800146e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001474:	b2da      	uxtb	r2, r3
 8001476:	8979      	ldrh	r1, [r7, #10]
 8001478:	4b52      	ldr	r3, [pc, #328]	; (80015c4 <HAL_I2C_Mem_Read+0x22c>)
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f000 fb99 	bl	8001bb8 <I2C_TransferConfig>
 8001486:	e00f      	b.n	80014a8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800148c:	b29a      	uxth	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001496:	b2da      	uxtb	r2, r3
 8001498:	8979      	ldrh	r1, [r7, #10]
 800149a:	4b4a      	ldr	r3, [pc, #296]	; (80015c4 <HAL_I2C_Mem_Read+0x22c>)
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f000 fb88 	bl	8001bb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ae:	2200      	movs	r2, #0
 80014b0:	2104      	movs	r1, #4
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f000 fa5e 	bl	8001974 <I2C_WaitOnFlagUntilTimeout>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e07c      	b.n	80015bc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	6812      	ldr	r2, [r2, #0]
 80014ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d4:	1c5a      	adds	r2, r3, #1
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014de:	3b01      	subs	r3, #1
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	3b01      	subs	r3, #1
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d034      	beq.n	8001568 <HAL_I2C_Mem_Read+0x1d0>
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001502:	2b00      	cmp	r3, #0
 8001504:	d130      	bne.n	8001568 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150c:	2200      	movs	r2, #0
 800150e:	2180      	movs	r1, #128	; 0x80
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f000 fa2f 	bl	8001974 <I2C_WaitOnFlagUntilTimeout>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e04d      	b.n	80015bc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001524:	b29b      	uxth	r3, r3
 8001526:	2bff      	cmp	r3, #255	; 0xff
 8001528:	d90e      	bls.n	8001548 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	22ff      	movs	r2, #255	; 0xff
 800152e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001534:	b2da      	uxtb	r2, r3
 8001536:	8979      	ldrh	r1, [r7, #10]
 8001538:	2300      	movs	r3, #0
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f000 fb39 	bl	8001bb8 <I2C_TransferConfig>
 8001546:	e00f      	b.n	8001568 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800154c:	b29a      	uxth	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001556:	b2da      	uxtb	r2, r3
 8001558:	8979      	ldrh	r1, [r7, #10]
 800155a:	2300      	movs	r3, #0
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f000 fb28 	bl	8001bb8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800156c:	b29b      	uxth	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d19a      	bne.n	80014a8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 fa7c 	bl	8001a74 <I2C_WaitOnSTOPFlagUntilTimeout>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e01a      	b.n	80015bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2220      	movs	r2, #32
 800158c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6859      	ldr	r1, [r3, #4]
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <HAL_I2C_Mem_Read+0x230>)
 800159a:	400b      	ands	r3, r1
 800159c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2220      	movs	r2, #32
 80015a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e000      	b.n	80015bc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80015ba:	2302      	movs	r3, #2
  }
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	80002400 	.word	0x80002400
 80015c8:	fe00e800 	.word	0xfe00e800

080015cc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af02      	add	r7, sp, #8
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	460b      	mov	r3, r1
 80015da:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b20      	cmp	r3, #32
 80015ea:	f040 80f1 	bne.w	80017d0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015fc:	d101      	bne.n	8001602 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80015fe:	2302      	movs	r3, #2
 8001600:	e0e7      	b.n	80017d2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001608:	2b01      	cmp	r3, #1
 800160a:	d101      	bne.n	8001610 <HAL_I2C_IsDeviceReady+0x44>
 800160c:	2302      	movs	r3, #2
 800160e:	e0e0      	b.n	80017d2 <HAL_I2C_IsDeviceReady+0x206>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2224      	movs	r2, #36	; 0x24
 800161c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2200      	movs	r2, #0
 8001624:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d107      	bne.n	8001642 <HAL_I2C_IsDeviceReady+0x76>
 8001632:	897b      	ldrh	r3, [r7, #10]
 8001634:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001638:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800163c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001640:	e004      	b.n	800164c <HAL_I2C_IsDeviceReady+0x80>
 8001642:	897b      	ldrh	r3, [r7, #10]
 8001644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001648:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800164c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800164e:	f7ff f8c7 	bl	80007e0 <HAL_GetTick>
 8001652:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	f003 0320 	and.w	r3, r3, #32
 800165e:	2b20      	cmp	r3, #32
 8001660:	bf0c      	ite	eq
 8001662:	2301      	moveq	r3, #1
 8001664:	2300      	movne	r3, #0
 8001666:	b2db      	uxtb	r3, r3
 8001668:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	2b10      	cmp	r3, #16
 8001676:	bf0c      	ite	eq
 8001678:	2301      	moveq	r3, #1
 800167a:	2300      	movne	r3, #0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001680:	e034      	b.n	80016ec <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001688:	d01a      	beq.n	80016c0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800168a:	f7ff f8a9 	bl	80007e0 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	1ad2      	subs	r2, r2, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d802      	bhi.n	80016a0 <HAL_I2C_IsDeviceReady+0xd4>
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10f      	bne.n	80016c0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2220      	movs	r2, #32
 80016a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ac:	f043 0220 	orr.w	r2, r3, #32
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e088      	b.n	80017d2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	f003 0320 	and.w	r3, r3, #32
 80016ca:	2b20      	cmp	r3, #32
 80016cc:	bf0c      	ite	eq
 80016ce:	2301      	moveq	r3, #1
 80016d0:	2300      	movne	r3, #0
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f003 0310 	and.w	r3, r3, #16
 80016e0:	2b10      	cmp	r3, #16
 80016e2:	bf0c      	ite	eq
 80016e4:	2301      	moveq	r3, #1
 80016e6:	2300      	movne	r3, #0
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80016ec:	7ffb      	ldrb	r3, [r7, #31]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d102      	bne.n	80016f8 <HAL_I2C_IsDeviceReady+0x12c>
 80016f2:	7fbb      	ldrb	r3, [r7, #30]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0c4      	beq.n	8001682 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	2b10      	cmp	r3, #16
 8001704:	d01a      	beq.n	800173c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	2200      	movs	r2, #0
 800170e:	2120      	movs	r1, #32
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	f000 f92f 	bl	8001974 <I2C_WaitOnFlagUntilTimeout>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e058      	b.n	80017d2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2220      	movs	r2, #32
 8001726:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2220      	movs	r2, #32
 800172c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	e04a      	b.n	80017d2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	2200      	movs	r2, #0
 8001744:	2120      	movs	r1, #32
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 f914 	bl	8001974 <I2C_WaitOnFlagUntilTimeout>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e03d      	b.n	80017d2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2210      	movs	r2, #16
 800175c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2220      	movs	r2, #32
 8001764:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	429a      	cmp	r2, r3
 800176c:	d118      	bne.n	80017a0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	6812      	ldr	r2, [r2, #0]
 8001776:	6852      	ldr	r2, [r2, #4]
 8001778:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800177c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	2200      	movs	r2, #0
 8001786:	2120      	movs	r1, #32
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f000 f8f3 	bl	8001974 <I2C_WaitOnFlagUntilTimeout>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e01c      	b.n	80017d2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2220      	movs	r2, #32
 800179e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	3301      	adds	r3, #1
 80017a4:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	f4ff af3b 	bcc.w	8001626 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2220      	movs	r2, #32
 80017b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017bc:	f043 0220 	orr.w	r2, r3, #32
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80017d0:	2302      	movs	r3, #2
  }
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3720      	adds	r7, #32
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af02      	add	r7, sp, #8
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	4608      	mov	r0, r1
 80017e6:	4611      	mov	r1, r2
 80017e8:	461a      	mov	r2, r3
 80017ea:	4603      	mov	r3, r0
 80017ec:	817b      	strh	r3, [r7, #10]
 80017ee:	460b      	mov	r3, r1
 80017f0:	813b      	strh	r3, [r7, #8]
 80017f2:	4613      	mov	r3, r2
 80017f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80017f6:	88fb      	ldrh	r3, [r7, #6]
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	8979      	ldrh	r1, [r7, #10]
 80017fc:	4b20      	ldr	r3, [pc, #128]	; (8001880 <I2C_RequestMemoryWrite+0xa4>)
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f000 f9d7 	bl	8001bb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	69b9      	ldr	r1, [r7, #24]
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 f8f0 	bl	80019f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e02c      	b.n	8001878 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d105      	bne.n	8001830 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	893a      	ldrh	r2, [r7, #8]
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	629a      	str	r2, [r3, #40]	; 0x28
 800182e:	e015      	b.n	800185c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	893a      	ldrh	r2, [r7, #8]
 8001836:	0a12      	lsrs	r2, r2, #8
 8001838:	b292      	uxth	r2, r2
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	69b9      	ldr	r1, [r7, #24]
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 f8d6 	bl	80019f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e012      	b.n	8001878 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	893a      	ldrh	r2, [r7, #8]
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	2200      	movs	r2, #0
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 f884 	bl	8001974 <I2C_WaitOnFlagUntilTimeout>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e000      	b.n	8001878 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	80002000 	.word	0x80002000

08001884 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af02      	add	r7, sp, #8
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	4608      	mov	r0, r1
 800188e:	4611      	mov	r1, r2
 8001890:	461a      	mov	r2, r3
 8001892:	4603      	mov	r3, r0
 8001894:	817b      	strh	r3, [r7, #10]
 8001896:	460b      	mov	r3, r1
 8001898:	813b      	strh	r3, [r7, #8]
 800189a:	4613      	mov	r3, r2
 800189c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	8979      	ldrh	r1, [r7, #10]
 80018a4:	4b20      	ldr	r3, [pc, #128]	; (8001928 <I2C_RequestMemoryRead+0xa4>)
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	2300      	movs	r3, #0
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 f984 	bl	8001bb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	69b9      	ldr	r1, [r7, #24]
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f000 f89d 	bl	80019f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e02c      	b.n	800191e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018c4:	88fb      	ldrh	r3, [r7, #6]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d105      	bne.n	80018d6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	893a      	ldrh	r2, [r7, #8]
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	629a      	str	r2, [r3, #40]	; 0x28
 80018d4:	e015      	b.n	8001902 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	893a      	ldrh	r2, [r7, #8]
 80018dc:	0a12      	lsrs	r2, r2, #8
 80018de:	b292      	uxth	r2, r2
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	69b9      	ldr	r1, [r7, #24]
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 f883 	bl	80019f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e012      	b.n	800191e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	893a      	ldrh	r2, [r7, #8]
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	2200      	movs	r2, #0
 800190a:	2140      	movs	r1, #64	; 0x40
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f000 f831 	bl	8001974 <I2C_WaitOnFlagUntilTimeout>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	80002000 	.word	0x80002000

0800192c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b02      	cmp	r3, #2
 8001940:	d103      	bne.n	800194a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2200      	movs	r2, #0
 8001948:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b01      	cmp	r3, #1
 8001956:	d007      	beq.n	8001968 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	6992      	ldr	r2, [r2, #24]
 8001962:	f042 0201 	orr.w	r2, r2, #1
 8001966:	619a      	str	r2, [r3, #24]
  }
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	4613      	mov	r3, r2
 8001982:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001984:	e022      	b.n	80019cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800198c:	d01e      	beq.n	80019cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800198e:	f7fe ff27 	bl	80007e0 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	1ad2      	subs	r2, r2, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d802      	bhi.n	80019a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d113      	bne.n	80019cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a8:	f043 0220 	orr.w	r2, r3, #32
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2220      	movs	r2, #32
 80019b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e00f      	b.n	80019ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	699a      	ldr	r2, [r3, #24]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	401a      	ands	r2, r3
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	429a      	cmp	r2, r3
 80019da:	bf0c      	ite	eq
 80019dc:	2301      	moveq	r3, #1
 80019de:	2300      	movne	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d0cd      	beq.n	8001986 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a00:	e02c      	b.n	8001a5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 f870 	bl	8001aec <I2C_IsAcknowledgeFailed>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e02a      	b.n	8001a6c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a1c:	d01e      	beq.n	8001a5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a1e:	f7fe fedf 	bl	80007e0 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	1ad2      	subs	r2, r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d802      	bhi.n	8001a34 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d113      	bne.n	8001a5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a38:	f043 0220 	orr.w	r2, r3, #32
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2220      	movs	r2, #32
 8001a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e007      	b.n	8001a6c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d1cb      	bne.n	8001a02 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a80:	e028      	b.n	8001ad4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 f830 	bl	8001aec <I2C_IsAcknowledgeFailed>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e026      	b.n	8001ae4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a96:	f7fe fea3 	bl	80007e0 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	1ad2      	subs	r2, r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d802      	bhi.n	8001aac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d113      	bne.n	8001ad4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab0:	f043 0220 	orr.w	r2, r3, #32
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2220      	movs	r2, #32
 8001abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e007      	b.n	8001ae4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f003 0320 	and.w	r3, r3, #32
 8001ade:	2b20      	cmp	r3, #32
 8001ae0:	d1cf      	bne.n	8001a82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	2b10      	cmp	r3, #16
 8001b04:	d151      	bne.n	8001baa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b06:	e022      	b.n	8001b4e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b0e:	d01e      	beq.n	8001b4e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b10:	f7fe fe66 	bl	80007e0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	1ad2      	subs	r2, r2, r3
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d802      	bhi.n	8001b26 <I2C_IsAcknowledgeFailed+0x3a>
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d113      	bne.n	8001b4e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	f043 0220 	orr.w	r2, r3, #32
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2220      	movs	r2, #32
 8001b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e02e      	b.n	8001bac <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 0320 	and.w	r3, r3, #32
 8001b58:	2b20      	cmp	r3, #32
 8001b5a:	d1d5      	bne.n	8001b08 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2210      	movs	r2, #16
 8001b62:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2220      	movs	r2, #32
 8001b6a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f7ff fedd 	bl	800192c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6859      	ldr	r1, [r3, #4]
 8001b7c:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <I2C_IsAcknowledgeFailed+0xc8>)
 8001b7e:	400b      	ands	r3, r1
 8001b80:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	f043 0204 	orr.w	r2, r3, #4
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2220      	movs	r2, #32
 8001b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	fe00e800 	.word	0xfe00e800

08001bb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	817b      	strh	r3, [r7, #10]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6859      	ldr	r1, [r3, #4]
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	0d5b      	lsrs	r3, r3, #21
 8001bd8:	f403 6080 	and.w	r0, r3, #1024	; 0x400
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <I2C_TransferConfig+0x54>)
 8001bde:	4303      	orrs	r3, r0
 8001be0:	43db      	mvns	r3, r3
 8001be2:	4019      	ands	r1, r3
 8001be4:	897b      	ldrh	r3, [r7, #10]
 8001be6:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8001bea:	7a7b      	ldrb	r3, [r7, #9]
 8001bec:	041b      	lsls	r3, r3, #16
 8001bee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001bf2:	4318      	orrs	r0, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4318      	orrs	r0, r3
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	4303      	orrs	r3, r0
 8001bfc:	430b      	orrs	r3, r1
 8001bfe:	6053      	str	r3, [r2, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	03ff63ff 	.word	0x03ff63ff

08001c10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b20      	cmp	r3, #32
 8001c24:	d138      	bne.n	8001c98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e032      	b.n	8001c9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2224      	movs	r2, #36	; 0x24
 8001c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	f022 0201 	bic.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	6811      	ldr	r1, [r2, #0]
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	f042 0201 	orr.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2220      	movs	r2, #32
 8001c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	e000      	b.n	8001c9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c98:	2302      	movs	r3, #2
  }
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b085      	sub	sp, #20
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b20      	cmp	r3, #32
 8001cba:	d139      	bne.n	8001d30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e033      	b.n	8001d32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2224      	movs	r2, #36	; 0x24
 8001cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	f022 0201 	bic.w	r2, r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cf8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e000      	b.n	8001d32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d30:	2302      	movs	r3, #2
  }
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10c      	bne.n	8001d6c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001d52:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <HAL_PWR_EnterSLEEPMode+0x60>)
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d5e:	d10e      	bne.n	8001d7e <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8001d60:	f000 f896 	bl	8001e90 <HAL_PWREx_DisableLowPowerRunMode>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8001d6a:	e016      	b.n	8001d9a <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <HAL_PWR_EnterSLEEPMode+0x60>)
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d78:	d001      	beq.n	8001d7e <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8001d7a:	f000 f879 	bl	8001e70 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001d7e:	4a09      	ldr	r2, [pc, #36]	; (8001da4 <HAL_PWR_EnterSLEEPMode+0x64>)
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <HAL_PWR_EnterSLEEPMode+0x64>)
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	f023 0304 	bic.w	r3, r3, #4
 8001d88:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001d8a:	78fb      	ldrb	r3, [r7, #3]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <HAL_PWR_EnterSLEEPMode+0x54>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8001d90:	bf30      	wfi
 8001d92:	e002      	b.n	8001d9a <HAL_PWR_EnterSLEEPMode+0x5a>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 8001d94:	bf40      	sev
  __ASM volatile ("wfe");
 8001d96:	bf20      	wfe
 8001d98:	bf20      	wfe
    __SEV();
    __WFE();
    __WFE();
  }

}
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40007000 	.word	0x40007000
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40007000 	.word	0x40007000

08001dc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dd2:	d130      	bne.n	8001e36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dd4:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001de0:	d038      	beq.n	8001e54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de2:	4a20      	ldr	r2, [pc, #128]	; (8001e64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de4:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001df0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001df2:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2232      	movs	r2, #50	; 0x32
 8001df8:	fb02 f303 	mul.w	r3, r2, r3
 8001dfc:	4a1b      	ldr	r2, [pc, #108]	; (8001e6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001e02:	0c9b      	lsrs	r3, r3, #18
 8001e04:	3301      	adds	r3, #1
 8001e06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e08:	e002      	b.n	8001e10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e1c:	d102      	bne.n	8001e24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1f2      	bne.n	8001e0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e30:	d110      	bne.n	8001e54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e00f      	b.n	8001e56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e36:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e42:	d007      	beq.n	8001e54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e44:	4a07      	ldr	r2, [pc, #28]	; (8001e64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e46:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40007000 	.word	0x40007000
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	431bde83 	.word	0x431bde83

08001e70 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8001e74:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e7e:	6013      	str	r3, [r2, #0]
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40007000 	.word	0x40007000

08001e90 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8001e96:	4a17      	ldr	r2, [pc, #92]	; (8001ef4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001e98:	4b16      	ldr	r3, [pc, #88]	; (8001ef4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ea0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2232      	movs	r2, #50	; 0x32
 8001ea8:	fb02 f303 	mul.w	r3, r2, r3
 8001eac:	4a13      	ldr	r2, [pc, #76]	; (8001efc <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8001eae:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb2:	0c9b      	lsrs	r3, r3, #18
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8001eb8:	e002      	b.n	8001ec0 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ecc:	d102      	bne.n	8001ed4 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f2      	bne.n	8001eba <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ee0:	d101      	bne.n	8001ee6 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e000      	b.n	8001ee8 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	40007000 	.word	0x40007000
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	431bde83 	.word	0x431bde83

08001f00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_oscsource;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e353      	b.n	80025ba <HAL_RCC_OscConfig+0x6ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f12:	4ba3      	ldr	r3, [pc, #652]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f1c:	4ba0      	ldr	r3, [pc, #640]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0310 	and.w	r3, r3, #16
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 80df 	beq.w	80020f2 <HAL_RCC_OscConfig+0x1f2>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d007      	beq.n	8001f4a <HAL_RCC_OscConfig+0x4a>
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	2b0c      	cmp	r3, #12
 8001f3e:	f040 8086 	bne.w	800204e <HAL_RCC_OscConfig+0x14e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	f040 8082 	bne.w	800204e <HAL_RCC_OscConfig+0x14e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f4a:	4b95      	ldr	r3, [pc, #596]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <HAL_RCC_OscConfig+0x62>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e32b      	b.n	80025ba <HAL_RCC_OscConfig+0x6ba>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a1a      	ldr	r2, [r3, #32]
 8001f66:	4b8e      	ldr	r3, [pc, #568]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d004      	beq.n	8001f7c <HAL_RCC_OscConfig+0x7c>
 8001f72:	4b8b      	ldr	r3, [pc, #556]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f7a:	e005      	b.n	8001f88 <HAL_RCC_OscConfig+0x88>
 8001f7c:	4b88      	ldr	r3, [pc, #544]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8001f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f82:	091b      	lsrs	r3, r3, #4
 8001f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d923      	bls.n	8001fd4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 fd29 	bl	80029e8 <RCC_SetFlashLatencyFromMSIRange>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e30c      	b.n	80025ba <HAL_RCC_OscConfig+0x6ba>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fa0:	4a7f      	ldr	r2, [pc, #508]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8001fa2:	4b7f      	ldr	r3, [pc, #508]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f043 0308 	orr.w	r3, r3, #8
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	497c      	ldr	r1, [pc, #496]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8001fae:	4b7c      	ldr	r3, [pc, #496]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fbe:	4978      	ldr	r1, [pc, #480]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8001fc0:	4b77      	ldr	r3, [pc, #476]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
 8001fd2:	e022      	b.n	800201a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fd4:	4a72      	ldr	r2, [pc, #456]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8001fd6:	4b72      	ldr	r3, [pc, #456]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f043 0308 	orr.w	r3, r3, #8
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	496f      	ldr	r1, [pc, #444]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8001fe2:	4b6f      	ldr	r3, [pc, #444]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ff2:	496b      	ldr	r1, [pc, #428]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8001ff4:	4b6a      	ldr	r3, [pc, #424]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	4313      	orrs	r3, r2
 8002004:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	4618      	mov	r0, r3
 800200c:	f000 fcec 	bl	80029e8 <RCC_SetFlashLatencyFromMSIRange>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e2cf      	b.n	80025ba <HAL_RCC_OscConfig+0x6ba>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800201a:	f000 fbb3 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 800201e:	4601      	mov	r1, r0
 8002020:	4b5f      	ldr	r3, [pc, #380]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	4a5e      	ldr	r2, [pc, #376]	; (80021a4 <HAL_RCC_OscConfig+0x2a4>)
 800202c:	5cd3      	ldrb	r3, [r2, r3]
 800202e:	f003 031f 	and.w	r3, r3, #31
 8002032:	fa21 f303 	lsr.w	r3, r1, r3
 8002036:	4a5c      	ldr	r2, [pc, #368]	; (80021a8 <HAL_RCC_OscConfig+0x2a8>)
 8002038:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800203a:	2000      	movs	r0, #0
 800203c:	f003 fb7c 	bl	8005738 <HAL_InitTick>
 8002040:	4603      	mov	r3, r0
 8002042:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d052      	beq.n	80020f0 <HAL_RCC_OscConfig+0x1f0>
        {
          return status;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	e2b5      	b.n	80025ba <HAL_RCC_OscConfig+0x6ba>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d032      	beq.n	80020bc <HAL_RCC_OscConfig+0x1bc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002056:	4a52      	ldr	r2, [pc, #328]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8002058:	4b51      	ldr	r3, [pc, #324]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002062:	f7fe fbbd 	bl	80007e0 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800206a:	f7fe fbb9 	bl	80007e0 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e29e      	b.n	80025ba <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800207c:	4b48      	ldr	r3, [pc, #288]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x16a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002088:	4a45      	ldr	r2, [pc, #276]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 800208a:	4b45      	ldr	r3, [pc, #276]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f043 0308 	orr.w	r3, r3, #8
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	4942      	ldr	r1, [pc, #264]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8002096:	4b42      	ldr	r3, [pc, #264]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020a6:	493e      	ldr	r1, [pc, #248]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 80020a8:	4b3d      	ldr	r3, [pc, #244]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	021b      	lsls	r3, r3, #8
 80020b6:	4313      	orrs	r3, r2
 80020b8:	604b      	str	r3, [r1, #4]
 80020ba:	e01a      	b.n	80020f2 <HAL_RCC_OscConfig+0x1f2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020bc:	4a38      	ldr	r2, [pc, #224]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 80020be:	4b38      	ldr	r3, [pc, #224]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 0301 	bic.w	r3, r3, #1
 80020c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020c8:	f7fe fb8a 	bl	80007e0 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x1e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020d0:	f7fe fb86 	bl	80007e0 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e26b      	b.n	80025ba <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020e2:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x1d0>
 80020ee:	e000      	b.n	80020f2 <HAL_RCC_OscConfig+0x1f2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d072      	beq.n	80021e4 <HAL_RCC_OscConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	2b08      	cmp	r3, #8
 8002102:	d005      	beq.n	8002110 <HAL_RCC_OscConfig+0x210>
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	2b0c      	cmp	r3, #12
 8002108:	d10e      	bne.n	8002128 <HAL_RCC_OscConfig+0x228>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2b03      	cmp	r3, #3
 800210e:	d10b      	bne.n	8002128 <HAL_RCC_OscConfig+0x228>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002110:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d062      	beq.n	80021e2 <HAL_RCC_OscConfig+0x2e2>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d15e      	bne.n	80021e2 <HAL_RCC_OscConfig+0x2e2>
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e248      	b.n	80025ba <HAL_RCC_OscConfig+0x6ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002130:	d106      	bne.n	8002140 <HAL_RCC_OscConfig+0x240>
 8002132:	4a1b      	ldr	r2, [pc, #108]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8002134:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	e01d      	b.n	800217c <HAL_RCC_OscConfig+0x27c>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0x264>
 800214a:	4a15      	ldr	r2, [pc, #84]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 800214c:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	e00b      	b.n	800217c <HAL_RCC_OscConfig+0x27c>
 8002164:	4a0e      	ldr	r2, [pc, #56]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8002166:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	4a0b      	ldr	r2, [pc, #44]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_RCC_OscConfig+0x2a0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800217a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d01a      	beq.n	80021ba <HAL_RCC_OscConfig+0x2ba>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7fe fb2c 	bl	80007e0 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800218a:	e00f      	b.n	80021ac <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800218c:	f7fe fb28 	bl	80007e0 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	; 0x64
 8002198:	d908      	bls.n	80021ac <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e20d      	b.n	80025ba <HAL_RCC_OscConfig+0x6ba>
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000
 80021a4:	08005a18 	.word	0x08005a18
 80021a8:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ac:	4bae      	ldr	r3, [pc, #696]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0e9      	beq.n	800218c <HAL_RCC_OscConfig+0x28c>
 80021b8:	e014      	b.n	80021e4 <HAL_RCC_OscConfig+0x2e4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ba:	f7fe fb11 	bl	80007e0 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x2d4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c2:	f7fe fb0d 	bl	80007e0 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b64      	cmp	r3, #100	; 0x64
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e1f2      	b.n	80025ba <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021d4:	4ba4      	ldr	r3, [pc, #656]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f0      	bne.n	80021c2 <HAL_RCC_OscConfig+0x2c2>
 80021e0:	e000      	b.n	80021e4 <HAL_RCC_OscConfig+0x2e4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d060      	beq.n	80022b2 <HAL_RCC_OscConfig+0x3b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d005      	beq.n	8002202 <HAL_RCC_OscConfig+0x302>
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	2b0c      	cmp	r3, #12
 80021fa:	d119      	bne.n	8002230 <HAL_RCC_OscConfig+0x330>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d116      	bne.n	8002230 <HAL_RCC_OscConfig+0x330>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002202:	4b99      	ldr	r3, [pc, #612]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220a:	2b00      	cmp	r3, #0
 800220c:	d005      	beq.n	800221a <HAL_RCC_OscConfig+0x31a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e1cf      	b.n	80025ba <HAL_RCC_OscConfig+0x6ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221a:	4993      	ldr	r1, [pc, #588]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 800221c:	4b92      	ldr	r3, [pc, #584]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	061b      	lsls	r3, r3, #24
 800222a:	4313      	orrs	r3, r2
 800222c:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800222e:	e040      	b.n	80022b2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d023      	beq.n	8002280 <HAL_RCC_OscConfig+0x380>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002238:	4a8b      	ldr	r2, [pc, #556]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 800223a:	4b8b      	ldr	r3, [pc, #556]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7fe facc 	bl	80007e0 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224c:	f7fe fac8 	bl	80007e0 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e1ad      	b.n	80025ba <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800225e:	4b82      	ldr	r3, [pc, #520]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x34c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226a:	497f      	ldr	r1, [pc, #508]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 800226c:	4b7e      	ldr	r3, [pc, #504]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	061b      	lsls	r3, r3, #24
 800227a:	4313      	orrs	r3, r2
 800227c:	604b      	str	r3, [r1, #4]
 800227e:	e018      	b.n	80022b2 <HAL_RCC_OscConfig+0x3b2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002280:	4a79      	ldr	r2, [pc, #484]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 8002282:	4b79      	ldr	r3, [pc, #484]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800228a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7fe faa8 	bl	80007e0 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002294:	f7fe faa4 	bl	80007e0 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e189      	b.n	80025ba <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022a6:	4b70      	ldr	r3, [pc, #448]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x394>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d03c      	beq.n	8002338 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d01c      	beq.n	8002300 <HAL_RCC_OscConfig+0x400>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c6:	4a68      	ldr	r2, [pc, #416]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 80022c8:	4b67      	ldr	r3, [pc, #412]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 80022ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d6:	f7fe fa83 	bl	80007e0 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022de:	f7fe fa7f 	bl	80007e0 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e164      	b.n	80025ba <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022f0:	4b5d      	ldr	r3, [pc, #372]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 80022f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0ef      	beq.n	80022de <HAL_RCC_OscConfig+0x3de>
 80022fe:	e01b      	b.n	8002338 <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002300:	4a59      	ldr	r2, [pc, #356]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 8002302:	4b59      	ldr	r3, [pc, #356]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 8002304:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002308:	f023 0301 	bic.w	r3, r3, #1
 800230c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002310:	f7fe fa66 	bl	80007e0 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002318:	f7fe fa62 	bl	80007e0 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e147      	b.n	80025ba <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800232a:	4b4f      	ldr	r3, [pc, #316]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 800232c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1ef      	bne.n	8002318 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80a5 	beq.w	8002490 <HAL_RCC_OscConfig+0x590>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002346:	2300      	movs	r3, #0
 8002348:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800234a:	4b47      	ldr	r3, [pc, #284]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 800234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10d      	bne.n	8002372 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002356:	4a44      	ldr	r2, [pc, #272]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 8002358:	4b43      	ldr	r3, [pc, #268]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 800235a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002360:	6593      	str	r3, [r2, #88]	; 0x58
 8002362:	4b41      	ldr	r3, [pc, #260]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 8002364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236e:	2301      	movs	r3, #1
 8002370:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002372:	4b3e      	ldr	r3, [pc, #248]	; (800246c <HAL_RCC_OscConfig+0x56c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d118      	bne.n	80023b0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800237e:	4a3b      	ldr	r2, [pc, #236]	; (800246c <HAL_RCC_OscConfig+0x56c>)
 8002380:	4b3a      	ldr	r3, [pc, #232]	; (800246c <HAL_RCC_OscConfig+0x56c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238a:	f7fe fa29 	bl	80007e0 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002392:	f7fe fa25 	bl	80007e0 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e10a      	b.n	80025ba <HAL_RCC_OscConfig+0x6ba>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023a4:	4b31      	ldr	r3, [pc, #196]	; (800246c <HAL_RCC_OscConfig+0x56c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_OscConfig+0x492>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d108      	bne.n	80023ca <HAL_RCC_OscConfig+0x4ca>
 80023b8:	4a2b      	ldr	r2, [pc, #172]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 80023ba:	4b2b      	ldr	r3, [pc, #172]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023c8:	e024      	b.n	8002414 <HAL_RCC_OscConfig+0x514>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b05      	cmp	r3, #5
 80023d0:	d110      	bne.n	80023f4 <HAL_RCC_OscConfig+0x4f4>
 80023d2:	4a25      	ldr	r2, [pc, #148]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 80023d4:	4b24      	ldr	r3, [pc, #144]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 80023d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023da:	f043 0304 	orr.w	r3, r3, #4
 80023de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023e2:	4a21      	ldr	r2, [pc, #132]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 80023e4:	4b20      	ldr	r3, [pc, #128]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 80023e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023f2:	e00f      	b.n	8002414 <HAL_RCC_OscConfig+0x514>
 80023f4:	4a1c      	ldr	r2, [pc, #112]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 80023f6:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 80023f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002404:	4a18      	ldr	r2, [pc, #96]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 8002406:	4b18      	ldr	r3, [pc, #96]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 8002408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d016      	beq.n	800244a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241c:	f7fe f9e0 	bl	80007e0 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002422:	e00a      	b.n	800243a <HAL_RCC_OscConfig+0x53a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002424:	f7fe f9dc 	bl	80007e0 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e0bf      	b.n	80025ba <HAL_RCC_OscConfig+0x6ba>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800243a:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_RCC_OscConfig+0x568>)
 800243c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0ed      	beq.n	8002424 <HAL_RCC_OscConfig+0x524>
 8002448:	e019      	b.n	800247e <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244a:	f7fe f9c9 	bl	80007e0 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002450:	e00e      	b.n	8002470 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002452:	f7fe f9c5 	bl	80007e0 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002460:	4293      	cmp	r3, r2
 8002462:	d905      	bls.n	8002470 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e0a8      	b.n	80025ba <HAL_RCC_OscConfig+0x6ba>
 8002468:	40021000 	.word	0x40021000
 800246c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002470:	4b54      	ldr	r3, [pc, #336]	; (80025c4 <HAL_RCC_OscConfig+0x6c4>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1e9      	bne.n	8002452 <HAL_RCC_OscConfig+0x552>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800247e:	7ffb      	ldrb	r3, [r7, #31]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d105      	bne.n	8002490 <HAL_RCC_OscConfig+0x590>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002484:	4a4f      	ldr	r2, [pc, #316]	; (80025c4 <HAL_RCC_OscConfig+0x6c4>)
 8002486:	4b4f      	ldr	r3, [pc, #316]	; (80025c4 <HAL_RCC_OscConfig+0x6c4>)
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800248e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 808f 	beq.w	80025b8 <HAL_RCC_OscConfig+0x6b8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	2b0c      	cmp	r3, #12
 800249e:	f000 8089 	beq.w	80025b4 <HAL_RCC_OscConfig+0x6b4>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d156      	bne.n	8002558 <HAL_RCC_OscConfig+0x658>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024aa:	4a46      	ldr	r2, [pc, #280]	; (80025c4 <HAL_RCC_OscConfig+0x6c4>)
 80024ac:	4b45      	ldr	r3, [pc, #276]	; (80025c4 <HAL_RCC_OscConfig+0x6c4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b6:	f7fe f993 	bl	80007e0 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024be:	f7fe f98f 	bl	80007e0 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e074      	b.n	80025ba <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024d0:	4b3c      	ldr	r3, [pc, #240]	; (80025c4 <HAL_RCC_OscConfig+0x6c4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1f0      	bne.n	80024be <HAL_RCC_OscConfig+0x5be>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024dc:	4939      	ldr	r1, [pc, #228]	; (80025c4 <HAL_RCC_OscConfig+0x6c4>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	3b01      	subs	r3, #1
 80024e4:	011a      	lsls	r2, r3, #4
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ea:	021b      	lsls	r3, r3, #8
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	045b      	lsls	r3, r3, #17
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002502:	085b      	lsrs	r3, r3, #1
 8002504:	3b01      	subs	r3, #1
 8002506:	055b      	lsls	r3, r3, #21
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	085b      	lsrs	r3, r3, #1
 8002510:	3b01      	subs	r3, #1
 8002512:	065b      	lsls	r3, r3, #25
 8002514:	4313      	orrs	r3, r2
 8002516:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002518:	4a2a      	ldr	r2, [pc, #168]	; (80025c4 <HAL_RCC_OscConfig+0x6c4>)
 800251a:	4b2a      	ldr	r3, [pc, #168]	; (80025c4 <HAL_RCC_OscConfig+0x6c4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002522:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002524:	4a27      	ldr	r2, [pc, #156]	; (80025c4 <HAL_RCC_OscConfig+0x6c4>)
 8002526:	4b27      	ldr	r3, [pc, #156]	; (80025c4 <HAL_RCC_OscConfig+0x6c4>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800252e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7fe f956 	bl	80007e0 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x64a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002538:	f7fe f952 	bl	80007e0 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x64a>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e037      	b.n	80025ba <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800254a:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <HAL_RCC_OscConfig+0x6c4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x638>
 8002556:	e02f      	b.n	80025b8 <HAL_RCC_OscConfig+0x6b8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002558:	4a1a      	ldr	r2, [pc, #104]	; (80025c4 <HAL_RCC_OscConfig+0x6c4>)
 800255a:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <HAL_RCC_OscConfig+0x6c4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002562:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002564:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <HAL_RCC_OscConfig+0x6c4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d105      	bne.n	800257c <HAL_RCC_OscConfig+0x67c>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002570:	4a14      	ldr	r2, [pc, #80]	; (80025c4 <HAL_RCC_OscConfig+0x6c4>)
 8002572:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <HAL_RCC_OscConfig+0x6c4>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f023 0303 	bic.w	r3, r3, #3
 800257a:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800257c:	4a11      	ldr	r2, [pc, #68]	; (80025c4 <HAL_RCC_OscConfig+0x6c4>)
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <HAL_RCC_OscConfig+0x6c4>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800258a:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7fe f928 	bl	80007e0 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x6a6>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002594:	f7fe f924 	bl	80007e0 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e009      	b.n	80025ba <HAL_RCC_OscConfig+0x6ba>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a6:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <HAL_RCC_OscConfig+0x6c4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x694>
 80025b2:	e001      	b.n	80025b8 <HAL_RCC_OscConfig+0x6b8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <HAL_RCC_OscConfig+0x6ba>
    }
  }
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3720      	adds	r7, #32
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000

080025c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0c6      	b.n	800276a <HAL_RCC_ClockConfig+0x1a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025dc:	4b65      	ldr	r3, [pc, #404]	; (8002774 <HAL_RCC_ClockConfig+0x1ac>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0207 	and.w	r2, r3, #7
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d210      	bcs.n	800260c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ea:	4962      	ldr	r1, [pc, #392]	; (8002774 <HAL_RCC_ClockConfig+0x1ac>)
 80025ec:	4b61      	ldr	r3, [pc, #388]	; (8002774 <HAL_RCC_ClockConfig+0x1ac>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f023 0207 	bic.w	r2, r3, #7
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fa:	4b5e      	ldr	r3, [pc, #376]	; (8002774 <HAL_RCC_ClockConfig+0x1ac>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0207 	and.w	r2, r3, #7
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d001      	beq.n	800260c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0ae      	b.n	800276a <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d04c      	beq.n	80026b2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d107      	bne.n	8002630 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002620:	4b55      	ldr	r3, [pc, #340]	; (8002778 <HAL_RCC_ClockConfig+0x1b0>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d121      	bne.n	8002670 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e09c      	b.n	800276a <HAL_RCC_ClockConfig+0x1a2>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b02      	cmp	r3, #2
 8002636:	d107      	bne.n	8002648 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002638:	4b4f      	ldr	r3, [pc, #316]	; (8002778 <HAL_RCC_ClockConfig+0x1b0>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d115      	bne.n	8002670 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e090      	b.n	800276a <HAL_RCC_ClockConfig+0x1a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d107      	bne.n	8002660 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002650:	4b49      	ldr	r3, [pc, #292]	; (8002778 <HAL_RCC_ClockConfig+0x1b0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d109      	bne.n	8002670 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e084      	b.n	800276a <HAL_RCC_ClockConfig+0x1a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002660:	4b45      	ldr	r3, [pc, #276]	; (8002778 <HAL_RCC_ClockConfig+0x1b0>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e07c      	b.n	800276a <HAL_RCC_ClockConfig+0x1a2>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002670:	4941      	ldr	r1, [pc, #260]	; (8002778 <HAL_RCC_ClockConfig+0x1b0>)
 8002672:	4b41      	ldr	r3, [pc, #260]	; (8002778 <HAL_RCC_ClockConfig+0x1b0>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f023 0203 	bic.w	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002682:	f7fe f8ad 	bl	80007e0 <HAL_GetTick>
 8002686:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002688:	e00a      	b.n	80026a0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268a:	f7fe f8a9 	bl	80007e0 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	f241 3288 	movw	r2, #5000	; 0x1388
 8002698:	4293      	cmp	r3, r2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e064      	b.n	800276a <HAL_RCC_ClockConfig+0x1a2>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a0:	4b35      	ldr	r3, [pc, #212]	; (8002778 <HAL_RCC_ClockConfig+0x1b0>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 020c 	and.w	r2, r3, #12
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d1eb      	bne.n	800268a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d008      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026be:	492e      	ldr	r1, [pc, #184]	; (8002778 <HAL_RCC_ClockConfig+0x1b0>)
 80026c0:	4b2d      	ldr	r3, [pc, #180]	; (8002778 <HAL_RCC_ClockConfig+0x1b0>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026d0:	4b28      	ldr	r3, [pc, #160]	; (8002774 <HAL_RCC_ClockConfig+0x1ac>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0207 	and.w	r2, r3, #7
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d910      	bls.n	8002700 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4925      	ldr	r1, [pc, #148]	; (8002774 <HAL_RCC_ClockConfig+0x1ac>)
 80026e0:	4b24      	ldr	r3, [pc, #144]	; (8002774 <HAL_RCC_ClockConfig+0x1ac>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f023 0207 	bic.w	r2, r3, #7
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b21      	ldr	r3, [pc, #132]	; (8002774 <HAL_RCC_ClockConfig+0x1ac>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0207 	and.w	r2, r3, #7
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e034      	b.n	800276a <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800270c:	491a      	ldr	r1, [pc, #104]	; (8002778 <HAL_RCC_ClockConfig+0x1b0>)
 800270e:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <HAL_RCC_ClockConfig+0x1b0>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	d009      	beq.n	800273e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800272a:	4913      	ldr	r1, [pc, #76]	; (8002778 <HAL_RCC_ClockConfig+0x1b0>)
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_RCC_ClockConfig+0x1b0>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4313      	orrs	r3, r2
 800273c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800273e:	f000 f821 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 8002742:	4601      	mov	r1, r0
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <HAL_RCC_ClockConfig+0x1b0>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	4a0b      	ldr	r2, [pc, #44]	; (800277c <HAL_RCC_ClockConfig+0x1b4>)
 8002750:	5cd3      	ldrb	r3, [r2, r3]
 8002752:	f003 031f 	and.w	r3, r3, #31
 8002756:	fa21 f303 	lsr.w	r3, r1, r3
 800275a:	4a09      	ldr	r2, [pc, #36]	; (8002780 <HAL_RCC_ClockConfig+0x1b8>)
 800275c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick (TICK_INT_PRIORITY);
 800275e:	2000      	movs	r0, #0
 8002760:	f002 ffea 	bl	8005738 <HAL_InitTick>
 8002764:	4603      	mov	r3, r0
 8002766:	72fb      	strb	r3, [r7, #11]

  return status;
 8002768:	7afb      	ldrb	r3, [r7, #11]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40022000 	.word	0x40022000
 8002778:	40021000 	.word	0x40021000
 800277c:	08005a18 	.word	0x08005a18
 8002780:	20000000 	.word	0x20000000

08002784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002784:	b480      	push	{r7}
 8002786:	b089      	sub	sp, #36	; 0x24
 8002788:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
 800278e:	2300      	movs	r3, #0
 8002790:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002792:	4b46      	ldr	r3, [pc, #280]	; (80028ac <HAL_RCC_GetSysClockFreq+0x128>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800279c:	4b43      	ldr	r3, [pc, #268]	; (80028ac <HAL_RCC_GetSysClockFreq+0x128>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0x34>
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	2b0c      	cmp	r3, #12
 80027b0:	d121      	bne.n	80027f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d11e      	bne.n	80027f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027b8:	4b3c      	ldr	r3, [pc, #240]	; (80028ac <HAL_RCC_GetSysClockFreq+0x128>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d107      	bne.n	80027d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027c4:	4b39      	ldr	r3, [pc, #228]	; (80028ac <HAL_RCC_GetSysClockFreq+0x128>)
 80027c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ca:	0a1b      	lsrs	r3, r3, #8
 80027cc:	f003 030f 	and.w	r3, r3, #15
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	e005      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027d4:	4b35      	ldr	r3, [pc, #212]	; (80028ac <HAL_RCC_GetSysClockFreq+0x128>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027e0:	4a33      	ldr	r2, [pc, #204]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10d      	bne.n	800280c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027f4:	e00a      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d102      	bne.n	8002802 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027fc:	4b2d      	ldr	r3, [pc, #180]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x130>)
 80027fe:	61bb      	str	r3, [r7, #24]
 8002800:	e004      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	2b08      	cmp	r3, #8
 8002806:	d101      	bne.n	800280c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002808:	4b2b      	ldr	r3, [pc, #172]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x134>)
 800280a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	2b0c      	cmp	r3, #12
 8002810:	d145      	bne.n	800289e <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002812:	4b26      	ldr	r3, [pc, #152]	; (80028ac <HAL_RCC_GetSysClockFreq+0x128>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	60bb      	str	r3, [r7, #8]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800281c:	4b23      	ldr	r3, [pc, #140]	; (80028ac <HAL_RCC_GetSysClockFreq+0x128>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	3301      	adds	r3, #1
 8002828:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2b02      	cmp	r3, #2
 800282e:	d002      	beq.n	8002836 <HAL_RCC_GetSysClockFreq+0xb2>
 8002830:	2b03      	cmp	r3, #3
 8002832:	d00d      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0xcc>
 8002834:	e019      	b.n	800286a <HAL_RCC_GetSysClockFreq+0xe6>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002836:	4a1f      	ldr	r2, [pc, #124]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x130>)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	fbb2 f3f3 	udiv	r3, r2, r3
 800283e:	4a1b      	ldr	r2, [pc, #108]	; (80028ac <HAL_RCC_GetSysClockFreq+0x128>)
 8002840:	68d2      	ldr	r2, [r2, #12]
 8002842:	0a12      	lsrs	r2, r2, #8
 8002844:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002848:	fb02 f303 	mul.w	r3, r2, r3
 800284c:	617b      	str	r3, [r7, #20]
      break;
 800284e:	e019      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002850:	4a19      	ldr	r2, [pc, #100]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x134>)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	fbb2 f3f3 	udiv	r3, r2, r3
 8002858:	4a14      	ldr	r2, [pc, #80]	; (80028ac <HAL_RCC_GetSysClockFreq+0x128>)
 800285a:	68d2      	ldr	r2, [r2, #12]
 800285c:	0a12      	lsrs	r2, r2, #8
 800285e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002862:	fb02 f303 	mul.w	r3, r2, r3
 8002866:	617b      	str	r3, [r7, #20]
      break;
 8002868:	e00c      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002872:	4a0e      	ldr	r2, [pc, #56]	; (80028ac <HAL_RCC_GetSysClockFreq+0x128>)
 8002874:	68d2      	ldr	r2, [r2, #12]
 8002876:	0a12      	lsrs	r2, r2, #8
 8002878:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800287c:	fb02 f303 	mul.w	r3, r2, r3
 8002880:	617b      	str	r3, [r7, #20]
      break;
 8002882:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002884:	4b09      	ldr	r3, [pc, #36]	; (80028ac <HAL_RCC_GetSysClockFreq+0x128>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	0e5b      	lsrs	r3, r3, #25
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	3301      	adds	r3, #1
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco/pllr;
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	fbb2 f3f3 	udiv	r3, r2, r3
 800289c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800289e:	69bb      	ldr	r3, [r7, #24]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3724      	adds	r7, #36	; 0x24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40021000 	.word	0x40021000
 80028b0:	08005a30 	.word	0x08005a30
 80028b4:	00f42400 	.word	0x00f42400
 80028b8:	007a1200 	.word	0x007a1200

080028bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c0:	4b03      	ldr	r3, [pc, #12]	; (80028d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20000000 	.word	0x20000000

080028d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028d8:	f7ff fff0 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 80028dc:	4601      	mov	r1, r0
 80028de:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4a04      	ldr	r2, [pc, #16]	; (80028fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80028ea:	5cd3      	ldrb	r3, [r2, r3]
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40021000 	.word	0x40021000
 80028fc:	08005a28 	.word	0x08005a28

08002900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002904:	f7ff ffda 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 8002908:	4601      	mov	r1, r0
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_RCC_GetPCLK2Freq+0x24>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	0adb      	lsrs	r3, r3, #11
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	4a04      	ldr	r2, [pc, #16]	; (8002928 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002916:	5cd3      	ldrb	r3, [r2, r3]
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002920:	4618      	mov	r0, r3
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000
 8002928:	08005a28 	.word	0x08005a28

0800292c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	220f      	movs	r2, #15
 800293a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800293c:	4b12      	ldr	r3, [pc, #72]	; (8002988 <HAL_RCC_GetClockConfig+0x5c>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 0203 	and.w	r2, r3, #3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002948:	4b0f      	ldr	r3, [pc, #60]	; (8002988 <HAL_RCC_GetClockConfig+0x5c>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <HAL_RCC_GetClockConfig+0x5c>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002960:	4b09      	ldr	r3, [pc, #36]	; (8002988 <HAL_RCC_GetClockConfig+0x5c>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	08db      	lsrs	r3, r3, #3
 8002966:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800296e:	4b07      	ldr	r3, [pc, #28]	; (800298c <HAL_RCC_GetClockConfig+0x60>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0207 	and.w	r2, r3, #7
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	601a      	str	r2, [r3, #0]
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40021000 	.word	0x40021000
 800298c:	40022000 	.word	0x40022000

08002990 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8002994:	4a05      	ldr	r2, [pc, #20]	; (80029ac <HAL_RCC_EnableCSS+0x1c>)
 8002996:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_RCC_EnableCSS+0x1c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800299e:	6013      	str	r3, [r2, #0]
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000

080029b0 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80029b4:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c0:	d105      	bne.n	80029ce <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80029c2:	f000 f809 	bl	80029d8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80029c6:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80029c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029cc:	621a      	str	r2, [r3, #32]
  }
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40021000 	.word	0x40021000

080029d8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029f0:	2300      	movs	r3, #0
 80029f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029f4:	4b2a      	ldr	r3, [pc, #168]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a00:	f7ff f9d2 	bl	8001da8 <HAL_PWREx_GetVoltageRange>
 8002a04:	6178      	str	r0, [r7, #20]
 8002a06:	e014      	b.n	8002a32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a08:	4a25      	ldr	r2, [pc, #148]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a0a:	4b25      	ldr	r3, [pc, #148]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a12:	6593      	str	r3, [r2, #88]	; 0x58
 8002a14:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a20:	f7ff f9c2 	bl	8001da8 <HAL_PWREx_GetVoltageRange>
 8002a24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a26:	4a1e      	ldr	r2, [pc, #120]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a28:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a38:	d10b      	bne.n	8002a52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b80      	cmp	r3, #128	; 0x80
 8002a3e:	d919      	bls.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2ba0      	cmp	r3, #160	; 0xa0
 8002a44:	d902      	bls.n	8002a4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a46:	2302      	movs	r3, #2
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	e013      	b.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	e010      	b.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b80      	cmp	r3, #128	; 0x80
 8002a56:	d902      	bls.n	8002a5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a58:	2303      	movs	r3, #3
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	e00a      	b.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b80      	cmp	r3, #128	; 0x80
 8002a62:	d102      	bne.n	8002a6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a64:	2302      	movs	r3, #2
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	e004      	b.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b70      	cmp	r3, #112	; 0x70
 8002a6e:	d101      	bne.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a70:	2301      	movs	r3, #1
 8002a72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a74:	490b      	ldr	r1, [pc, #44]	; (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a76:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 0207 	bic.w	r2, r3, #7
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a84:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0207 	and.w	r2, r3, #7
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d001      	beq.n	8002a96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40022000 	.word	0x40022000

08002aa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d03f      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ac8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002acc:	d01c      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ad2:	d802      	bhi.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00e      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002ad8:	e01f      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002ada:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ade:	d003      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002ae0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ae4:	d01c      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002ae6:	e018      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ae8:	4a85      	ldr	r2, [pc, #532]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aea:	4b85      	ldr	r3, [pc, #532]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002af4:	e015      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3304      	adds	r3, #4
 8002afa:	2100      	movs	r1, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 fab9 	bl	8003074 <RCCEx_PLLSAI1_Config>
 8002b02:	4603      	mov	r3, r0
 8002b04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b06:	e00c      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3320      	adds	r3, #32
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 fba0 	bl	8003254 <RCCEx_PLLSAI2_Config>
 8002b14:	4603      	mov	r3, r0
 8002b16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b18:	e003      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	74fb      	strb	r3, [r7, #19]
      break;
 8002b1e:	e000      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002b20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b22:	7cfb      	ldrb	r3, [r7, #19]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10b      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b28:	4975      	ldr	r1, [pc, #468]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b2a:	4b75      	ldr	r3, [pc, #468]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b3e:	e001      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b40:	7cfb      	ldrb	r3, [r7, #19]
 8002b42:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d03f      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b58:	d01c      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002b5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b5e:	d802      	bhi.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00e      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002b64:	e01f      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002b66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b6a:	d003      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002b6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b70:	d01c      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002b72:	e018      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b74:	4a62      	ldr	r2, [pc, #392]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b76:	4b62      	ldr	r3, [pc, #392]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b80:	e015      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3304      	adds	r3, #4
 8002b86:	2100      	movs	r1, #0
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 fa73 	bl	8003074 <RCCEx_PLLSAI1_Config>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b92:	e00c      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3320      	adds	r3, #32
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 fb5a 	bl	8003254 <RCCEx_PLLSAI2_Config>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ba4:	e003      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	74fb      	strb	r3, [r7, #19]
      break;
 8002baa:	e000      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bae:	7cfb      	ldrb	r3, [r7, #19]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10b      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bb4:	4952      	ldr	r1, [pc, #328]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bb6:	4b52      	ldr	r3, [pc, #328]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bca:	e001      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bcc:	7cfb      	ldrb	r3, [r7, #19]
 8002bce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80a0 	beq.w	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bde:	2300      	movs	r3, #0
 8002be0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002be2:	4b47      	ldr	r3, [pc, #284]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00d      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf8:	4a41      	ldr	r2, [pc, #260]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bfa:	4b41      	ldr	r3, [pc, #260]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c02:	6593      	str	r3, [r2, #88]	; 0x58
 8002c04:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c10:	2301      	movs	r3, #1
 8002c12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c14:	4a3b      	ldr	r2, [pc, #236]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002c16:	4b3b      	ldr	r3, [pc, #236]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c20:	f7fd fdde 	bl	80007e0 <HAL_GetTick>
 8002c24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c26:	e009      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c28:	f7fd fdda 	bl	80007e0 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d902      	bls.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	74fb      	strb	r3, [r7, #19]
        break;
 8002c3a:	e005      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c3c:	4b31      	ldr	r3, [pc, #196]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0ef      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002c48:	7cfb      	ldrb	r3, [r7, #19]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d15c      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c4e:	4b2c      	ldr	r3, [pc, #176]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d01f      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d019      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c6c:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c78:	4a21      	ldr	r2, [pc, #132]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c7a:	4b21      	ldr	r3, [pc, #132]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c88:	4a1d      	ldr	r2, [pc, #116]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c8a:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c98:	4a19      	ldr	r2, [pc, #100]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d016      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002caa:	f7fd fd99 	bl	80007e0 <HAL_GetTick>
 8002cae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb0:	e00b      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb2:	f7fd fd95 	bl	80007e0 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d902      	bls.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	74fb      	strb	r3, [r7, #19]
            break;
 8002cc8:	e006      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cca:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0ec      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002cd8:	7cfb      	ldrb	r3, [r7, #19]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cde:	4908      	ldr	r1, [pc, #32]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ce0:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002cf6:	e009      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cf8:	7cfb      	ldrb	r3, [r7, #19]
 8002cfa:	74bb      	strb	r3, [r7, #18]
 8002cfc:	e006      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002cfe:	bf00      	nop
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d08:	7cfb      	ldrb	r3, [r7, #19]
 8002d0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d0c:	7c7b      	ldrb	r3, [r7, #17]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d105      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d12:	4a9e      	ldr	r2, [pc, #632]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d14:	4b9d      	ldr	r3, [pc, #628]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d2a:	4998      	ldr	r1, [pc, #608]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d2c:	4b97      	ldr	r3, [pc, #604]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d32:	f023 0203 	bic.w	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d4c:	498f      	ldr	r1, [pc, #572]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d4e:	4b8f      	ldr	r3, [pc, #572]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d54:	f023 020c 	bic.w	r2, r3, #12
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d6e:	4987      	ldr	r1, [pc, #540]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d70:	4b86      	ldr	r3, [pc, #536]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d76:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d90:	497e      	ldr	r1, [pc, #504]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d92:	4b7e      	ldr	r3, [pc, #504]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d98:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0310 	and.w	r3, r3, #16
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002db2:	4976      	ldr	r1, [pc, #472]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002db4:	4b75      	ldr	r3, [pc, #468]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dd4:	496d      	ldr	r1, [pc, #436]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dd6:	4b6d      	ldr	r3, [pc, #436]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ddc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002df6:	4965      	ldr	r1, [pc, #404]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002df8:	4b64      	ldr	r3, [pc, #400]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfe:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00a      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e18:	495c      	ldr	r1, [pc, #368]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e1a:	4b5c      	ldr	r3, [pc, #368]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e3a:	4954      	ldr	r1, [pc, #336]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e3c:	4b53      	ldr	r3, [pc, #332]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00a      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e5c:	494b      	ldr	r1, [pc, #300]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e5e:	4b4b      	ldr	r3, [pc, #300]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e7e:	4943      	ldr	r1, [pc, #268]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e80:	4b42      	ldr	r3, [pc, #264]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d028      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ea0:	493a      	ldr	r1, [pc, #232]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ea2:	4b3a      	ldr	r3, [pc, #232]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ebe:	d106      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ec0:	4a32      	ldr	r2, [pc, #200]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ec2:	4b32      	ldr	r3, [pc, #200]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eca:	60d3      	str	r3, [r2, #12]
 8002ecc:	e011      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ed2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ed6:	d10c      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3304      	adds	r3, #4
 8002edc:	2101      	movs	r1, #1
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 f8c8 	bl	8003074 <RCCEx_PLLSAI1_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ee8:	7cfb      	ldrb	r3, [r7, #19]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002eee:	7cfb      	ldrb	r3, [r7, #19]
 8002ef0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d028      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002efe:	4923      	ldr	r1, [pc, #140]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f00:	4b22      	ldr	r3, [pc, #136]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f1c:	d106      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f1e:	4a1b      	ldr	r2, [pc, #108]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f20:	4b1a      	ldr	r3, [pc, #104]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f28:	60d3      	str	r3, [r2, #12]
 8002f2a:	e011      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f34:	d10c      	bne.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 f899 	bl	8003074 <RCCEx_PLLSAI1_Config>
 8002f42:	4603      	mov	r3, r0
 8002f44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f46:	7cfb      	ldrb	r3, [r7, #19]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002f4c:	7cfb      	ldrb	r3, [r7, #19]
 8002f4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d02b      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f5c:	490b      	ldr	r1, [pc, #44]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f5e:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f7a:	d109      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f7c:	4a03      	ldr	r2, [pc, #12]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f7e:	4b03      	ldr	r3, [pc, #12]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f86:	60d3      	str	r3, [r2, #12]
 8002f88:	e014      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f98:	d10c      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 f867 	bl	8003074 <RCCEx_PLLSAI1_Config>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002faa:	7cfb      	ldrb	r3, [r7, #19]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002fb0:	7cfb      	ldrb	r3, [r7, #19]
 8002fb2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d02f      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fc0:	492b      	ldr	r1, [pc, #172]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fc2:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fde:	d10d      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	2102      	movs	r1, #2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f844 	bl	8003074 <RCCEx_PLLSAI1_Config>
 8002fec:	4603      	mov	r3, r0
 8002fee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ff0:	7cfb      	ldrb	r3, [r7, #19]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d014      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002ff6:	7cfb      	ldrb	r3, [r7, #19]
 8002ff8:	74bb      	strb	r3, [r7, #18]
 8002ffa:	e011      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003000:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003004:	d10c      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3320      	adds	r3, #32
 800300a:	2102      	movs	r1, #2
 800300c:	4618      	mov	r0, r3
 800300e:	f000 f921 	bl	8003254 <RCCEx_PLLSAI2_Config>
 8003012:	4603      	mov	r3, r0
 8003014:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003016:	7cfb      	ldrb	r3, [r7, #19]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800301c:	7cfb      	ldrb	r3, [r7, #19]
 800301e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00a      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800302c:	4910      	ldr	r1, [pc, #64]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800302e:	4b10      	ldr	r3, [pc, #64]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003034:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00b      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800304e:	4908      	ldr	r1, [pc, #32]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003050:	4b07      	ldr	r3, [pc, #28]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003056:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003066:	7cbb      	ldrb	r3, [r7, #18]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40021000 	.word	0x40021000

08003074 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003082:	4b73      	ldr	r3, [pc, #460]	; (8003250 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d018      	beq.n	80030c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800308e:	4b70      	ldr	r3, [pc, #448]	; (8003250 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f003 0203 	and.w	r2, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d10d      	bne.n	80030ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
       ||
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d009      	beq.n	80030ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030a6:	4b6a      	ldr	r3, [pc, #424]	; (8003250 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	091b      	lsrs	r3, r3, #4
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
       ||
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d044      	beq.n	8003144 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	73fb      	strb	r3, [r7, #15]
 80030be:	e041      	b.n	8003144 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d00c      	beq.n	80030e2 <RCCEx_PLLSAI1_Config+0x6e>
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d013      	beq.n	80030f4 <RCCEx_PLLSAI1_Config+0x80>
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d120      	bne.n	8003112 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030d0:	4b5f      	ldr	r3, [pc, #380]	; (8003250 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d11d      	bne.n	8003118 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030e0:	e01a      	b.n	8003118 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030e2:	4b5b      	ldr	r3, [pc, #364]	; (8003250 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d116      	bne.n	800311c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f2:	e013      	b.n	800311c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030f4:	4b56      	ldr	r3, [pc, #344]	; (8003250 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10f      	bne.n	8003120 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003100:	4b53      	ldr	r3, [pc, #332]	; (8003250 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d109      	bne.n	8003120 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003110:	e006      	b.n	8003120 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	73fb      	strb	r3, [r7, #15]
      break;
 8003116:	e004      	b.n	8003122 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003118:	bf00      	nop
 800311a:	e002      	b.n	8003122 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800311c:	bf00      	nop
 800311e:	e000      	b.n	8003122 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003120:	bf00      	nop
    }

    if(status == HAL_OK)
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10d      	bne.n	8003144 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003128:	4849      	ldr	r0, [pc, #292]	; (8003250 <RCCEx_PLLSAI1_Config+0x1dc>)
 800312a:	4b49      	ldr	r3, [pc, #292]	; (8003250 <RCCEx_PLLSAI1_Config+0x1dc>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6819      	ldr	r1, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	3b01      	subs	r3, #1
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	430b      	orrs	r3, r1
 8003140:	4313      	orrs	r3, r2
 8003142:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d17d      	bne.n	8003246 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800314a:	4a41      	ldr	r2, [pc, #260]	; (8003250 <RCCEx_PLLSAI1_Config+0x1dc>)
 800314c:	4b40      	ldr	r3, [pc, #256]	; (8003250 <RCCEx_PLLSAI1_Config+0x1dc>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003156:	f7fd fb43 	bl	80007e0 <HAL_GetTick>
 800315a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800315c:	e009      	b.n	8003172 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800315e:	f7fd fb3f 	bl	80007e0 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d902      	bls.n	8003172 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	73fb      	strb	r3, [r7, #15]
        break;
 8003170:	e005      	b.n	800317e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003172:	4b37      	ldr	r3, [pc, #220]	; (8003250 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1ef      	bne.n	800315e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d160      	bne.n	8003246 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d111      	bne.n	80031ae <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800318a:	4831      	ldr	r0, [pc, #196]	; (8003250 <RCCEx_PLLSAI1_Config+0x1dc>)
 800318c:	4b30      	ldr	r3, [pc, #192]	; (8003250 <RCCEx_PLLSAI1_Config+0x1dc>)
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6892      	ldr	r2, [r2, #8]
 800319c:	0211      	lsls	r1, r2, #8
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68d2      	ldr	r2, [r2, #12]
 80031a2:	0912      	lsrs	r2, r2, #4
 80031a4:	0452      	lsls	r2, r2, #17
 80031a6:	430a      	orrs	r2, r1
 80031a8:	4313      	orrs	r3, r2
 80031aa:	6103      	str	r3, [r0, #16]
 80031ac:	e027      	b.n	80031fe <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d112      	bne.n	80031da <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031b4:	4826      	ldr	r0, [pc, #152]	; (8003250 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031b6:	4b26      	ldr	r3, [pc, #152]	; (8003250 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80031be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6892      	ldr	r2, [r2, #8]
 80031c6:	0211      	lsls	r1, r2, #8
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6912      	ldr	r2, [r2, #16]
 80031cc:	0852      	lsrs	r2, r2, #1
 80031ce:	3a01      	subs	r2, #1
 80031d0:	0552      	lsls	r2, r2, #21
 80031d2:	430a      	orrs	r2, r1
 80031d4:	4313      	orrs	r3, r2
 80031d6:	6103      	str	r3, [r0, #16]
 80031d8:	e011      	b.n	80031fe <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031da:	481d      	ldr	r0, [pc, #116]	; (8003250 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031dc:	4b1c      	ldr	r3, [pc, #112]	; (8003250 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6892      	ldr	r2, [r2, #8]
 80031ec:	0211      	lsls	r1, r2, #8
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6952      	ldr	r2, [r2, #20]
 80031f2:	0852      	lsrs	r2, r2, #1
 80031f4:	3a01      	subs	r2, #1
 80031f6:	0652      	lsls	r2, r2, #25
 80031f8:	430a      	orrs	r2, r1
 80031fa:	4313      	orrs	r3, r2
 80031fc:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031fe:	4a14      	ldr	r2, [pc, #80]	; (8003250 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003200:	4b13      	ldr	r3, [pc, #76]	; (8003250 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003208:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320a:	f7fd fae9 	bl	80007e0 <HAL_GetTick>
 800320e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003210:	e009      	b.n	8003226 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003212:	f7fd fae5 	bl	80007e0 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d902      	bls.n	8003226 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	73fb      	strb	r3, [r7, #15]
          break;
 8003224:	e005      	b.n	8003232 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003226:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0ef      	beq.n	8003212 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003232:	7bfb      	ldrb	r3, [r7, #15]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d106      	bne.n	8003246 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003238:	4905      	ldr	r1, [pc, #20]	; (8003250 <RCCEx_PLLSAI1_Config+0x1dc>)
 800323a:	4b05      	ldr	r3, [pc, #20]	; (8003250 <RCCEx_PLLSAI1_Config+0x1dc>)
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	4313      	orrs	r3, r2
 8003244:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003246:	7bfb      	ldrb	r3, [r7, #15]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000

08003254 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003262:	4b68      	ldr	r3, [pc, #416]	; (8003404 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d018      	beq.n	80032a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800326e:	4b65      	ldr	r3, [pc, #404]	; (8003404 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f003 0203 	and.w	r2, r3, #3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d10d      	bne.n	800329a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
       ||
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003286:	4b5f      	ldr	r3, [pc, #380]	; (8003404 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	091b      	lsrs	r3, r3, #4
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
       ||
 8003296:	429a      	cmp	r2, r3
 8003298:	d044      	beq.n	8003324 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	73fb      	strb	r3, [r7, #15]
 800329e:	e041      	b.n	8003324 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d00c      	beq.n	80032c2 <RCCEx_PLLSAI2_Config+0x6e>
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d013      	beq.n	80032d4 <RCCEx_PLLSAI2_Config+0x80>
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d120      	bne.n	80032f2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032b0:	4b54      	ldr	r3, [pc, #336]	; (8003404 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d11d      	bne.n	80032f8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032c0:	e01a      	b.n	80032f8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032c2:	4b50      	ldr	r3, [pc, #320]	; (8003404 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d116      	bne.n	80032fc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d2:	e013      	b.n	80032fc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032d4:	4b4b      	ldr	r3, [pc, #300]	; (8003404 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10f      	bne.n	8003300 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032e0:	4b48      	ldr	r3, [pc, #288]	; (8003404 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d109      	bne.n	8003300 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032f0:	e006      	b.n	8003300 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
      break;
 80032f6:	e004      	b.n	8003302 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80032f8:	bf00      	nop
 80032fa:	e002      	b.n	8003302 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80032fc:	bf00      	nop
 80032fe:	e000      	b.n	8003302 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003300:	bf00      	nop
    }

    if(status == HAL_OK)
 8003302:	7bfb      	ldrb	r3, [r7, #15]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10d      	bne.n	8003324 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003308:	483e      	ldr	r0, [pc, #248]	; (8003404 <RCCEx_PLLSAI2_Config+0x1b0>)
 800330a:	4b3e      	ldr	r3, [pc, #248]	; (8003404 <RCCEx_PLLSAI2_Config+0x1b0>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6819      	ldr	r1, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	3b01      	subs	r3, #1
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	430b      	orrs	r3, r1
 8003320:	4313      	orrs	r3, r2
 8003322:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003324:	7bfb      	ldrb	r3, [r7, #15]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d167      	bne.n	80033fa <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800332a:	4a36      	ldr	r2, [pc, #216]	; (8003404 <RCCEx_PLLSAI2_Config+0x1b0>)
 800332c:	4b35      	ldr	r3, [pc, #212]	; (8003404 <RCCEx_PLLSAI2_Config+0x1b0>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003336:	f7fd fa53 	bl	80007e0 <HAL_GetTick>
 800333a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800333c:	e009      	b.n	8003352 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800333e:	f7fd fa4f 	bl	80007e0 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d902      	bls.n	8003352 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	73fb      	strb	r3, [r7, #15]
        break;
 8003350:	e005      	b.n	800335e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003352:	4b2c      	ldr	r3, [pc, #176]	; (8003404 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1ef      	bne.n	800333e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d14a      	bne.n	80033fa <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d111      	bne.n	800338e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800336a:	4826      	ldr	r0, [pc, #152]	; (8003404 <RCCEx_PLLSAI2_Config+0x1b0>)
 800336c:	4b25      	ldr	r3, [pc, #148]	; (8003404 <RCCEx_PLLSAI2_Config+0x1b0>)
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6892      	ldr	r2, [r2, #8]
 800337c:	0211      	lsls	r1, r2, #8
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	68d2      	ldr	r2, [r2, #12]
 8003382:	0912      	lsrs	r2, r2, #4
 8003384:	0452      	lsls	r2, r2, #17
 8003386:	430a      	orrs	r2, r1
 8003388:	4313      	orrs	r3, r2
 800338a:	6143      	str	r3, [r0, #20]
 800338c:	e011      	b.n	80033b2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800338e:	481d      	ldr	r0, [pc, #116]	; (8003404 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003390:	4b1c      	ldr	r3, [pc, #112]	; (8003404 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003398:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6892      	ldr	r2, [r2, #8]
 80033a0:	0211      	lsls	r1, r2, #8
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6912      	ldr	r2, [r2, #16]
 80033a6:	0852      	lsrs	r2, r2, #1
 80033a8:	3a01      	subs	r2, #1
 80033aa:	0652      	lsls	r2, r2, #25
 80033ac:	430a      	orrs	r2, r1
 80033ae:	4313      	orrs	r3, r2
 80033b0:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80033b2:	4a14      	ldr	r2, [pc, #80]	; (8003404 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033b4:	4b13      	ldr	r3, [pc, #76]	; (8003404 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033bc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033be:	f7fd fa0f 	bl	80007e0 <HAL_GetTick>
 80033c2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033c4:	e009      	b.n	80033da <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033c6:	f7fd fa0b 	bl	80007e0 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d902      	bls.n	80033da <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	73fb      	strb	r3, [r7, #15]
          break;
 80033d8:	e005      	b.n	80033e6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033da:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0ef      	beq.n	80033c6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d106      	bne.n	80033fa <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80033ec:	4905      	ldr	r1, [pc, #20]	; (8003404 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033ee:	4b05      	ldr	r3, [pc, #20]	; (8003404 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000

08003408 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 8092 	beq.w	8003540 <HAL_RTC_Init+0x138>
  {
    status = HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	73fb      	strb	r3, [r7, #15]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d106      	bne.n	800343a <HAL_RTC_Init+0x32>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f002 f8a3 	bl	8005580 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2202      	movs	r2, #2
 800343e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	22ca      	movs	r2, #202	; 0xca
 8003448:	625a      	str	r2, [r3, #36]	; 0x24
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2253      	movs	r2, #83	; 0x53
 8003450:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f89f 	bl	8003596 <RTC_EnterInitMode>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <HAL_RTC_Init+0x6c>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	22ff      	movs	r2, #255	; 0xff
 8003464:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2204      	movs	r2, #4
 800346a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	73fb      	strb	r3, [r7, #15]
 8003472:	e065      	b.n	8003540 <HAL_RTC_Init+0x138>
#if defined(STM32L412xx) || defined(STM32L422xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003486:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6812      	ldr	r2, [r2, #0]
 8003490:	6891      	ldr	r1, [r2, #8]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6850      	ldr	r0, [r2, #4]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6912      	ldr	r2, [r2, #16]
 800349a:	4310      	orrs	r0, r2
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6992      	ldr	r2, [r2, #24]
 80034a0:	4302      	orrs	r2, r0
 80034a2:	430a      	orrs	r2, r1
 80034a4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68d2      	ldr	r2, [r2, #12]
 80034ae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6812      	ldr	r2, [r2, #0]
 80034b8:	6911      	ldr	r1, [r2, #16]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6892      	ldr	r2, [r2, #8]
 80034be:	0412      	lsls	r2, r2, #16
 80034c0:	430a      	orrs	r2, r1
 80034c2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx)
      CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#else
      CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	68d2      	ldr	r2, [r2, #12]
 80034ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034d2:	60da      	str	r2, [r3, #12]
#endif

      /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10f      	bne.n	8003502 <HAL_RTC_Init+0xfa>
      {
        if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f831 	bl	800354a <HAL_RTC_WaitForSynchro>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d009      	beq.n	8003502 <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	22ff      	movs	r2, #255	; 0xff
 80034f4:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2204      	movs	r2, #4
 80034fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          status = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	73fb      	strb	r3, [r7, #15]
        }
      }

      if (status == HAL_OK)
 8003502:	7bfb      	ldrb	r3, [r7, #15]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d11b      	bne.n	8003540 <HAL_RTC_Init+0x138>
      {
#if defined(STM32L412xx) || defined(STM32L422xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6812      	ldr	r2, [r2, #0]
 8003510:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003512:	f022 0203 	bic.w	r2, r2, #3
 8003516:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	69d0      	ldr	r0, [r2, #28]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6952      	ldr	r2, [r2, #20]
 800352a:	4302      	orrs	r2, r0
 800352c:	430a      	orrs	r2, r1
 800352e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	22ff      	movs	r2, #255	; 0xff
 8003536:	625a      	str	r2, [r3, #36]	; 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003540:	7bfb      	ldrb	r3, [r7, #15]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6812      	ldr	r2, [r2, #0]
 800355a:	68d2      	ldr	r2, [r2, #12]
 800355c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003560:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003562:	f7fd f93d 	bl	80007e0 <HAL_GetTick>
 8003566:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003568:	e009      	b.n	800357e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800356a:	f7fd f939 	bl	80007e0 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003578:	d901      	bls.n	800357e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e007      	b.n	800358e <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 0320 	and.w	r3, r3, #32
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0ee      	beq.n	800356a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
        return HAL_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d119      	bne.n	80035e0 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035b4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80035b6:	f7fd f913 	bl	80007e0 <HAL_GetTick>
 80035ba:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80035bc:	e009      	b.n	80035d2 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80035be:	f7fd f90f 	bl	80007e0 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035cc:	d901      	bls.n	80035d2 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e007      	b.n	80035e2 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0ee      	beq.n	80035be <RTC_EnterInitMode+0x28>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e01d      	b.n	8003638 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d106      	bne.n	8003616 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f001 ffd1 	bl	80055b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2202      	movs	r2, #2
 800361a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3304      	adds	r3, #4
 8003626:	4619      	mov	r1, r3
 8003628:	4610      	mov	r0, r2
 800362a:	f000 fa47 	bl	8003abc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	68d2      	ldr	r2, [r2, #12]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <HAL_TIM_Base_Start_IT+0x54>)
 8003660:	4013      	ands	r3, r2
 8003662:	2b06      	cmp	r3, #6
 8003664:	d00f      	beq.n	8003686 <HAL_TIM_Base_Start_IT+0x46>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	4b09      	ldr	r3, [pc, #36]	; (8003694 <HAL_TIM_Base_Start_IT+0x54>)
 800366e:	4013      	ands	r3, r2
 8003670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003674:	d007      	beq.n	8003686 <HAL_TIM_Base_Start_IT+0x46>
  {
    __HAL_TIM_ENABLE(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6812      	ldr	r2, [r2, #0]
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	f042 0201 	orr.w	r2, r2, #1
 8003684:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	00010007 	.word	0x00010007

08003698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d122      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d11b      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0202 	mvn.w	r2, #2
 80036c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f9d0 	bl	8003a80 <HAL_TIM_IC_CaptureCallback>
 80036e0:	e005      	b.n	80036ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f9c2 	bl	8003a6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f9d3 	bl	8003a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d122      	bne.n	8003748 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b04      	cmp	r3, #4
 800370e:	d11b      	bne.n	8003748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0204 	mvn.w	r2, #4
 8003718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2202      	movs	r2, #2
 800371e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f9a6 	bl	8003a80 <HAL_TIM_IC_CaptureCallback>
 8003734:	e005      	b.n	8003742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f998 	bl	8003a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f9a9 	bl	8003a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b08      	cmp	r3, #8
 8003754:	d122      	bne.n	800379c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	2b08      	cmp	r3, #8
 8003762:	d11b      	bne.n	800379c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0208 	mvn.w	r2, #8
 800376c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2204      	movs	r2, #4
 8003772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f97c 	bl	8003a80 <HAL_TIM_IC_CaptureCallback>
 8003788:	e005      	b.n	8003796 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f96e 	bl	8003a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f97f 	bl	8003a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	2b10      	cmp	r3, #16
 80037a8:	d122      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	2b10      	cmp	r3, #16
 80037b6:	d11b      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f06f 0210 	mvn.w	r2, #16
 80037c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2208      	movs	r2, #8
 80037c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f952 	bl	8003a80 <HAL_TIM_IC_CaptureCallback>
 80037dc:	e005      	b.n	80037ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f944 	bl	8003a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f955 	bl	8003a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d10e      	bne.n	800381c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b01      	cmp	r3, #1
 800380a:	d107      	bne.n	800381c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f06f 0201 	mvn.w	r2, #1
 8003814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f001 fe20 	bl	800545c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003826:	2b80      	cmp	r3, #128	; 0x80
 8003828:	d10e      	bne.n	8003848 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003834:	2b80      	cmp	r3, #128	; 0x80
 8003836:	d107      	bne.n	8003848 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fad4 	bl	8003df0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003856:	d10e      	bne.n	8003876 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003862:	2b80      	cmp	r3, #128	; 0x80
 8003864:	d107      	bne.n	8003876 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800386e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 fac7 	bl	8003e04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003880:	2b40      	cmp	r3, #64	; 0x40
 8003882:	d10e      	bne.n	80038a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388e:	2b40      	cmp	r3, #64	; 0x40
 8003890:	d107      	bne.n	80038a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800389a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f903 	bl	8003aa8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	f003 0320 	and.w	r3, r3, #32
 80038ac:	2b20      	cmp	r3, #32
 80038ae:	d10e      	bne.n	80038ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d107      	bne.n	80038ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f06f 0220 	mvn.w	r2, #32
 80038c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 fa87 	bl	8003ddc <HAL_TIMEx_CommutationCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_TIM_ConfigClockSource+0x18>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e0ba      	b.n	8003a64 <HAL_TIM_ConfigClockSource+0x18e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2202      	movs	r2, #2
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800390c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003910:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003918:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2b40      	cmp	r3, #64	; 0x40
 8003928:	d07a      	beq.n	8003a20 <HAL_TIM_ConfigClockSource+0x14a>
 800392a:	2b40      	cmp	r3, #64	; 0x40
 800392c:	d80d      	bhi.n	800394a <HAL_TIM_ConfigClockSource+0x74>
 800392e:	2b10      	cmp	r3, #16
 8003930:	f000 8086 	beq.w	8003a40 <HAL_TIM_ConfigClockSource+0x16a>
 8003934:	2b10      	cmp	r3, #16
 8003936:	d803      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x6a>
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 8081 	beq.w	8003a40 <HAL_TIM_ConfigClockSource+0x16a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800393e:	e088      	b.n	8003a52 <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 8003940:	2b20      	cmp	r3, #32
 8003942:	d07d      	beq.n	8003a40 <HAL_TIM_ConfigClockSource+0x16a>
 8003944:	2b30      	cmp	r3, #48	; 0x30
 8003946:	d07b      	beq.n	8003a40 <HAL_TIM_ConfigClockSource+0x16a>
      break;
 8003948:	e083      	b.n	8003a52 <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 800394a:	2b70      	cmp	r3, #112	; 0x70
 800394c:	d018      	beq.n	8003980 <HAL_TIM_ConfigClockSource+0xaa>
 800394e:	2b70      	cmp	r3, #112	; 0x70
 8003950:	d804      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x86>
 8003952:	2b50      	cmp	r3, #80	; 0x50
 8003954:	d044      	beq.n	80039e0 <HAL_TIM_ConfigClockSource+0x10a>
 8003956:	2b60      	cmp	r3, #96	; 0x60
 8003958:	d052      	beq.n	8003a00 <HAL_TIM_ConfigClockSource+0x12a>
      break;
 800395a:	e07a      	b.n	8003a52 <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 800395c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003960:	d003      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x94>
 8003962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003966:	d028      	beq.n	80039ba <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8003968:	e073      	b.n	8003a52 <HAL_TIM_ConfigClockSource+0x17c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003978:	f023 0307 	bic.w	r3, r3, #7
 800397c:	6093      	str	r3, [r2, #8]
      break;
 800397e:	e068      	b.n	8003a52 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ETR_SetConfig(htim->Instance,
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6818      	ldr	r0, [r3, #0]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	6899      	ldr	r1, [r3, #8]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f000 f9a8 	bl	8003ce4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	609a      	str	r2, [r3, #8]
      break;
 80039b8:	e04b      	b.n	8003a52 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ETR_SetConfig(htim->Instance,
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	6899      	ldr	r1, [r3, #8]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f000 f98b 	bl	8003ce4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	6892      	ldr	r2, [r2, #8]
 80039d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039dc:	609a      	str	r2, [r3, #8]
      break;
 80039de:	e038      	b.n	8003a52 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	6859      	ldr	r1, [r3, #4]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	461a      	mov	r2, r3
 80039ee:	f000 f8ff 	bl	8003bf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2150      	movs	r1, #80	; 0x50
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 f958 	bl	8003cae <TIM_ITRx_SetConfig>
      break;
 80039fe:	e028      	b.n	8003a52 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	6859      	ldr	r1, [r3, #4]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	f000 f91e 	bl	8003c4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2160      	movs	r1, #96	; 0x60
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 f948 	bl	8003cae <TIM_ITRx_SetConfig>
      break;
 8003a1e:	e018      	b.n	8003a52 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	6859      	ldr	r1, [r3, #4]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	f000 f8df 	bl	8003bf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2140      	movs	r1, #64	; 0x40
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 f938 	bl	8003cae <TIM_ITRx_SetConfig>
      break;
 8003a3e:	e008      	b.n	8003a52 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	f000 f92f 	bl	8003cae <TIM_ITRx_SetConfig>
      break;
 8003a50:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a40      	ldr	r2, [pc, #256]	; (8003bd0 <TIM_Base_SetConfig+0x114>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d013      	beq.n	8003afc <TIM_Base_SetConfig+0x40>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ada:	d00f      	beq.n	8003afc <TIM_Base_SetConfig+0x40>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a3d      	ldr	r2, [pc, #244]	; (8003bd4 <TIM_Base_SetConfig+0x118>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d00b      	beq.n	8003afc <TIM_Base_SetConfig+0x40>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a3c      	ldr	r2, [pc, #240]	; (8003bd8 <TIM_Base_SetConfig+0x11c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d007      	beq.n	8003afc <TIM_Base_SetConfig+0x40>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a3b      	ldr	r2, [pc, #236]	; (8003bdc <TIM_Base_SetConfig+0x120>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d003      	beq.n	8003afc <TIM_Base_SetConfig+0x40>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a3a      	ldr	r2, [pc, #232]	; (8003be0 <TIM_Base_SetConfig+0x124>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d108      	bne.n	8003b0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a2f      	ldr	r2, [pc, #188]	; (8003bd0 <TIM_Base_SetConfig+0x114>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d01f      	beq.n	8003b56 <TIM_Base_SetConfig+0x9a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1c:	d01b      	beq.n	8003b56 <TIM_Base_SetConfig+0x9a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a2c      	ldr	r2, [pc, #176]	; (8003bd4 <TIM_Base_SetConfig+0x118>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d017      	beq.n	8003b56 <TIM_Base_SetConfig+0x9a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a2b      	ldr	r2, [pc, #172]	; (8003bd8 <TIM_Base_SetConfig+0x11c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d013      	beq.n	8003b56 <TIM_Base_SetConfig+0x9a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a2a      	ldr	r2, [pc, #168]	; (8003bdc <TIM_Base_SetConfig+0x120>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00f      	beq.n	8003b56 <TIM_Base_SetConfig+0x9a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a29      	ldr	r2, [pc, #164]	; (8003be0 <TIM_Base_SetConfig+0x124>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00b      	beq.n	8003b56 <TIM_Base_SetConfig+0x9a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a28      	ldr	r2, [pc, #160]	; (8003be4 <TIM_Base_SetConfig+0x128>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d007      	beq.n	8003b56 <TIM_Base_SetConfig+0x9a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a27      	ldr	r2, [pc, #156]	; (8003be8 <TIM_Base_SetConfig+0x12c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d003      	beq.n	8003b56 <TIM_Base_SetConfig+0x9a>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a26      	ldr	r2, [pc, #152]	; (8003bec <TIM_Base_SetConfig+0x130>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d108      	bne.n	8003b68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a10      	ldr	r2, [pc, #64]	; (8003bd0 <TIM_Base_SetConfig+0x114>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00f      	beq.n	8003bb4 <TIM_Base_SetConfig+0xf8>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a12      	ldr	r2, [pc, #72]	; (8003be0 <TIM_Base_SetConfig+0x124>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d00b      	beq.n	8003bb4 <TIM_Base_SetConfig+0xf8>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a11      	ldr	r2, [pc, #68]	; (8003be4 <TIM_Base_SetConfig+0x128>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d007      	beq.n	8003bb4 <TIM_Base_SetConfig+0xf8>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a10      	ldr	r2, [pc, #64]	; (8003be8 <TIM_Base_SetConfig+0x12c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d003      	beq.n	8003bb4 <TIM_Base_SetConfig+0xf8>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a0f      	ldr	r2, [pc, #60]	; (8003bec <TIM_Base_SetConfig+0x130>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d103      	bne.n	8003bbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	615a      	str	r2, [r3, #20]
}
 8003bc2:	bf00      	nop
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	40012c00 	.word	0x40012c00
 8003bd4:	40000400 	.word	0x40000400
 8003bd8:	40000800 	.word	0x40000800
 8003bdc:	40000c00 	.word	0x40000c00
 8003be0:	40013400 	.word	0x40013400
 8003be4:	40014000 	.word	0x40014000
 8003be8:	40014400 	.word	0x40014400
 8003bec:	40014800 	.word	0x40014800

08003bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	f023 0201 	bic.w	r2, r3, #1
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f023 030a 	bic.w	r3, r3, #10
 8003c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	621a      	str	r2, [r3, #32]
}
 8003c42:	bf00      	nop
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b087      	sub	sp, #28
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	f023 0210 	bic.w	r2, r3, #16
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	031b      	lsls	r3, r3, #12
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	621a      	str	r2, [r3, #32]
}
 8003ca2:	bf00      	nop
 8003ca4:	371c      	adds	r7, #28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b085      	sub	sp, #20
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f043 0307 	orr.w	r3, r3, #7
 8003cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	609a      	str	r2, [r3, #8]
}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	021a      	lsls	r2, r3, #8
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	609a      	str	r2, [r3, #8]
}
 8003d18:	bf00      	nop
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e045      	b.n	8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a1c      	ldr	r2, [pc, #112]	; (8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d004      	beq.n	8003d70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1b      	ldr	r2, [pc, #108]	; (8003dd8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d108      	bne.n	8003d82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d9a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	40012c00 	.word	0x40012c00
 8003dd8:	40013400 	.word	0x40013400

08003ddc <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e043      	b.n	8003eb2 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d106      	bne.n	8003e44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f001 fbde 	bl	8005600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2224      	movs	r2, #36	; 0x24
 8003e48:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	6812      	ldr	r2, [r2, #0]
 8003e56:	f022 0201 	bic.w	r2, r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f82d 	bl	8003ebc <UART_SetConfig>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e022      	b.n	8003eb2 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 fb5f 	bl	8004538 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6812      	ldr	r2, [r2, #0]
 8003e82:	6852      	ldr	r2, [r2, #4]
 8003e84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6812      	ldr	r2, [r2, #0]
 8003e92:	6892      	ldr	r2, [r2, #8]
 8003e94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e98:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6812      	ldr	r2, [r2, #0]
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	f042 0201 	orr.w	r2, r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 fbe6 	bl	800467c <UART_CheckIdleState>
 8003eb0:	4603      	mov	r3, r0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ebc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ec0:	b088      	sub	sp, #32
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003eca:	2310      	movs	r3, #16
 8003ecc:	76fb      	strb	r3, [r7, #27]
  uint16_t brrtemp                    = 0x0000U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	817b      	strh	r3, [r7, #10]
  uint32_t usartdiv                   = 0x00000000U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6819      	ldr	r1, [r3, #0]
 8003f00:	4baa      	ldr	r3, [pc, #680]	; (80041ac <UART_SetConfig+0x2f0>)
 8003f02:	400b      	ands	r3, r1
 8003f04:	69f9      	ldr	r1, [r7, #28]
 8003f06:	430b      	orrs	r3, r1
 8003f08:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6812      	ldr	r2, [r2, #0]
 8003f12:	6852      	ldr	r2, [r2, #4]
 8003f14:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	68d2      	ldr	r2, [r2, #12]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4aa1      	ldr	r2, [pc, #644]	; (80041b0 <UART_SetConfig+0x2f4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d004      	beq.n	8003f3a <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	69fa      	ldr	r2, [r7, #28]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	6892      	ldr	r2, [r2, #8]
 8003f44:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8003f48:	69fa      	ldr	r2, [r7, #28]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a98      	ldr	r2, [pc, #608]	; (80041b4 <UART_SetConfig+0x2f8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d121      	bne.n	8003f9c <UART_SetConfig+0xe0>
 8003f58:	4b97      	ldr	r3, [pc, #604]	; (80041b8 <UART_SetConfig+0x2fc>)
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d816      	bhi.n	8003f94 <UART_SetConfig+0xd8>
 8003f66:	a201      	add	r2, pc, #4	; (adr r2, 8003f6c <UART_SetConfig+0xb0>)
 8003f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6c:	08003f7d 	.word	0x08003f7d
 8003f70:	08003f89 	.word	0x08003f89
 8003f74:	08003f83 	.word	0x08003f83
 8003f78:	08003f8f 	.word	0x08003f8f
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	76fb      	strb	r3, [r7, #27]
 8003f80:	e0e4      	b.n	800414c <UART_SetConfig+0x290>
 8003f82:	2302      	movs	r3, #2
 8003f84:	76fb      	strb	r3, [r7, #27]
 8003f86:	e0e1      	b.n	800414c <UART_SetConfig+0x290>
 8003f88:	2304      	movs	r3, #4
 8003f8a:	76fb      	strb	r3, [r7, #27]
 8003f8c:	e0de      	b.n	800414c <UART_SetConfig+0x290>
 8003f8e:	2308      	movs	r3, #8
 8003f90:	76fb      	strb	r3, [r7, #27]
 8003f92:	e0db      	b.n	800414c <UART_SetConfig+0x290>
 8003f94:	2310      	movs	r3, #16
 8003f96:	76fb      	strb	r3, [r7, #27]
 8003f98:	bf00      	nop
 8003f9a:	e0d7      	b.n	800414c <UART_SetConfig+0x290>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a86      	ldr	r2, [pc, #536]	; (80041bc <UART_SetConfig+0x300>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d134      	bne.n	8004010 <UART_SetConfig+0x154>
 8003fa6:	4b84      	ldr	r3, [pc, #528]	; (80041b8 <UART_SetConfig+0x2fc>)
 8003fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fac:	f003 030c 	and.w	r3, r3, #12
 8003fb0:	2b0c      	cmp	r3, #12
 8003fb2:	d829      	bhi.n	8004008 <UART_SetConfig+0x14c>
 8003fb4:	a201      	add	r2, pc, #4	; (adr r2, 8003fbc <UART_SetConfig+0x100>)
 8003fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fba:	bf00      	nop
 8003fbc:	08003ff1 	.word	0x08003ff1
 8003fc0:	08004009 	.word	0x08004009
 8003fc4:	08004009 	.word	0x08004009
 8003fc8:	08004009 	.word	0x08004009
 8003fcc:	08003ffd 	.word	0x08003ffd
 8003fd0:	08004009 	.word	0x08004009
 8003fd4:	08004009 	.word	0x08004009
 8003fd8:	08004009 	.word	0x08004009
 8003fdc:	08003ff7 	.word	0x08003ff7
 8003fe0:	08004009 	.word	0x08004009
 8003fe4:	08004009 	.word	0x08004009
 8003fe8:	08004009 	.word	0x08004009
 8003fec:	08004003 	.word	0x08004003
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	76fb      	strb	r3, [r7, #27]
 8003ff4:	e0aa      	b.n	800414c <UART_SetConfig+0x290>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	76fb      	strb	r3, [r7, #27]
 8003ffa:	e0a7      	b.n	800414c <UART_SetConfig+0x290>
 8003ffc:	2304      	movs	r3, #4
 8003ffe:	76fb      	strb	r3, [r7, #27]
 8004000:	e0a4      	b.n	800414c <UART_SetConfig+0x290>
 8004002:	2308      	movs	r3, #8
 8004004:	76fb      	strb	r3, [r7, #27]
 8004006:	e0a1      	b.n	800414c <UART_SetConfig+0x290>
 8004008:	2310      	movs	r3, #16
 800400a:	76fb      	strb	r3, [r7, #27]
 800400c:	bf00      	nop
 800400e:	e09d      	b.n	800414c <UART_SetConfig+0x290>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a6a      	ldr	r2, [pc, #424]	; (80041c0 <UART_SetConfig+0x304>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d120      	bne.n	800405c <UART_SetConfig+0x1a0>
 800401a:	4b67      	ldr	r3, [pc, #412]	; (80041b8 <UART_SetConfig+0x2fc>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004020:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004024:	2b10      	cmp	r3, #16
 8004026:	d00f      	beq.n	8004048 <UART_SetConfig+0x18c>
 8004028:	2b10      	cmp	r3, #16
 800402a:	d802      	bhi.n	8004032 <UART_SetConfig+0x176>
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <UART_SetConfig+0x180>
 8004030:	e010      	b.n	8004054 <UART_SetConfig+0x198>
 8004032:	2b20      	cmp	r3, #32
 8004034:	d005      	beq.n	8004042 <UART_SetConfig+0x186>
 8004036:	2b30      	cmp	r3, #48	; 0x30
 8004038:	d009      	beq.n	800404e <UART_SetConfig+0x192>
 800403a:	e00b      	b.n	8004054 <UART_SetConfig+0x198>
 800403c:	2300      	movs	r3, #0
 800403e:	76fb      	strb	r3, [r7, #27]
 8004040:	e084      	b.n	800414c <UART_SetConfig+0x290>
 8004042:	2302      	movs	r3, #2
 8004044:	76fb      	strb	r3, [r7, #27]
 8004046:	e081      	b.n	800414c <UART_SetConfig+0x290>
 8004048:	2304      	movs	r3, #4
 800404a:	76fb      	strb	r3, [r7, #27]
 800404c:	e07e      	b.n	800414c <UART_SetConfig+0x290>
 800404e:	2308      	movs	r3, #8
 8004050:	76fb      	strb	r3, [r7, #27]
 8004052:	e07b      	b.n	800414c <UART_SetConfig+0x290>
 8004054:	2310      	movs	r3, #16
 8004056:	76fb      	strb	r3, [r7, #27]
 8004058:	bf00      	nop
 800405a:	e077      	b.n	800414c <UART_SetConfig+0x290>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a58      	ldr	r2, [pc, #352]	; (80041c4 <UART_SetConfig+0x308>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d120      	bne.n	80040a8 <UART_SetConfig+0x1ec>
 8004066:	4b54      	ldr	r3, [pc, #336]	; (80041b8 <UART_SetConfig+0x2fc>)
 8004068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004070:	2b40      	cmp	r3, #64	; 0x40
 8004072:	d00f      	beq.n	8004094 <UART_SetConfig+0x1d8>
 8004074:	2b40      	cmp	r3, #64	; 0x40
 8004076:	d802      	bhi.n	800407e <UART_SetConfig+0x1c2>
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <UART_SetConfig+0x1cc>
 800407c:	e010      	b.n	80040a0 <UART_SetConfig+0x1e4>
 800407e:	2b80      	cmp	r3, #128	; 0x80
 8004080:	d005      	beq.n	800408e <UART_SetConfig+0x1d2>
 8004082:	2bc0      	cmp	r3, #192	; 0xc0
 8004084:	d009      	beq.n	800409a <UART_SetConfig+0x1de>
 8004086:	e00b      	b.n	80040a0 <UART_SetConfig+0x1e4>
 8004088:	2300      	movs	r3, #0
 800408a:	76fb      	strb	r3, [r7, #27]
 800408c:	e05e      	b.n	800414c <UART_SetConfig+0x290>
 800408e:	2302      	movs	r3, #2
 8004090:	76fb      	strb	r3, [r7, #27]
 8004092:	e05b      	b.n	800414c <UART_SetConfig+0x290>
 8004094:	2304      	movs	r3, #4
 8004096:	76fb      	strb	r3, [r7, #27]
 8004098:	e058      	b.n	800414c <UART_SetConfig+0x290>
 800409a:	2308      	movs	r3, #8
 800409c:	76fb      	strb	r3, [r7, #27]
 800409e:	e055      	b.n	800414c <UART_SetConfig+0x290>
 80040a0:	2310      	movs	r3, #16
 80040a2:	76fb      	strb	r3, [r7, #27]
 80040a4:	bf00      	nop
 80040a6:	e051      	b.n	800414c <UART_SetConfig+0x290>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a46      	ldr	r2, [pc, #280]	; (80041c8 <UART_SetConfig+0x30c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d124      	bne.n	80040fc <UART_SetConfig+0x240>
 80040b2:	4b41      	ldr	r3, [pc, #260]	; (80041b8 <UART_SetConfig+0x2fc>)
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c0:	d012      	beq.n	80040e8 <UART_SetConfig+0x22c>
 80040c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c6:	d802      	bhi.n	80040ce <UART_SetConfig+0x212>
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d007      	beq.n	80040dc <UART_SetConfig+0x220>
 80040cc:	e012      	b.n	80040f4 <UART_SetConfig+0x238>
 80040ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040d2:	d006      	beq.n	80040e2 <UART_SetConfig+0x226>
 80040d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040d8:	d009      	beq.n	80040ee <UART_SetConfig+0x232>
 80040da:	e00b      	b.n	80040f4 <UART_SetConfig+0x238>
 80040dc:	2300      	movs	r3, #0
 80040de:	76fb      	strb	r3, [r7, #27]
 80040e0:	e034      	b.n	800414c <UART_SetConfig+0x290>
 80040e2:	2302      	movs	r3, #2
 80040e4:	76fb      	strb	r3, [r7, #27]
 80040e6:	e031      	b.n	800414c <UART_SetConfig+0x290>
 80040e8:	2304      	movs	r3, #4
 80040ea:	76fb      	strb	r3, [r7, #27]
 80040ec:	e02e      	b.n	800414c <UART_SetConfig+0x290>
 80040ee:	2308      	movs	r3, #8
 80040f0:	76fb      	strb	r3, [r7, #27]
 80040f2:	e02b      	b.n	800414c <UART_SetConfig+0x290>
 80040f4:	2310      	movs	r3, #16
 80040f6:	76fb      	strb	r3, [r7, #27]
 80040f8:	bf00      	nop
 80040fa:	e027      	b.n	800414c <UART_SetConfig+0x290>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a2b      	ldr	r2, [pc, #172]	; (80041b0 <UART_SetConfig+0x2f4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d123      	bne.n	800414e <UART_SetConfig+0x292>
 8004106:	4b2c      	ldr	r3, [pc, #176]	; (80041b8 <UART_SetConfig+0x2fc>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004114:	d012      	beq.n	800413c <UART_SetConfig+0x280>
 8004116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411a:	d802      	bhi.n	8004122 <UART_SetConfig+0x266>
 800411c:	2b00      	cmp	r3, #0
 800411e:	d007      	beq.n	8004130 <UART_SetConfig+0x274>
 8004120:	e012      	b.n	8004148 <UART_SetConfig+0x28c>
 8004122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004126:	d006      	beq.n	8004136 <UART_SetConfig+0x27a>
 8004128:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800412c:	d009      	beq.n	8004142 <UART_SetConfig+0x286>
 800412e:	e00b      	b.n	8004148 <UART_SetConfig+0x28c>
 8004130:	2300      	movs	r3, #0
 8004132:	76fb      	strb	r3, [r7, #27]
 8004134:	e00a      	b.n	800414c <UART_SetConfig+0x290>
 8004136:	2302      	movs	r3, #2
 8004138:	76fb      	strb	r3, [r7, #27]
 800413a:	e007      	b.n	800414c <UART_SetConfig+0x290>
 800413c:	2304      	movs	r3, #4
 800413e:	76fb      	strb	r3, [r7, #27]
 8004140:	e004      	b.n	800414c <UART_SetConfig+0x290>
 8004142:	2308      	movs	r3, #8
 8004144:	76fb      	strb	r3, [r7, #27]
 8004146:	e001      	b.n	800414c <UART_SetConfig+0x290>
 8004148:	2310      	movs	r3, #16
 800414a:	76fb      	strb	r3, [r7, #27]
 800414c:	bf00      	nop

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a17      	ldr	r2, [pc, #92]	; (80041b0 <UART_SetConfig+0x2f4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	f040 80ee 	bne.w	8004336 <UART_SetConfig+0x47a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800415a:	7efb      	ldrb	r3, [r7, #27]
 800415c:	2b08      	cmp	r3, #8
 800415e:	d837      	bhi.n	80041d0 <UART_SetConfig+0x314>
 8004160:	a201      	add	r2, pc, #4	; (adr r2, 8004168 <UART_SetConfig+0x2ac>)
 8004162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004166:	bf00      	nop
 8004168:	0800418d 	.word	0x0800418d
 800416c:	080041d1 	.word	0x080041d1
 8004170:	08004195 	.word	0x08004195
 8004174:	080041d1 	.word	0x080041d1
 8004178:	0800419b 	.word	0x0800419b
 800417c:	080041d1 	.word	0x080041d1
 8004180:	080041d1 	.word	0x080041d1
 8004184:	080041d1 	.word	0x080041d1
 8004188:	080041a3 	.word	0x080041a3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800418c:	f7fe fba2 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8004190:	60f8      	str	r0, [r7, #12]
#endif
        break;
 8004192:	e020      	b.n	80041d6 <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004194:	4b0d      	ldr	r3, [pc, #52]	; (80041cc <UART_SetConfig+0x310>)
 8004196:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8004198:	e01d      	b.n	80041d6 <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800419a:	f7fe faf3 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 800419e:	60f8      	str	r0, [r7, #12]
#endif
        break;
 80041a0:	e019      	b.n	80041d6 <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80041a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041a6:	60fb      	str	r3, [r7, #12]
#endif
        break;
 80041a8:	e015      	b.n	80041d6 <UART_SetConfig+0x31a>
 80041aa:	bf00      	nop
 80041ac:	efff69f3 	.word	0xefff69f3
 80041b0:	40008000 	.word	0x40008000
 80041b4:	40013800 	.word	0x40013800
 80041b8:	40021000 	.word	0x40021000
 80041bc:	40004400 	.word	0x40004400
 80041c0:	40004800 	.word	0x40004800
 80041c4:	40004c00 	.word	0x40004c00
 80041c8:	40005000 	.word	0x40005000
 80041cc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	74fb      	strb	r3, [r7, #19]
        break;
 80041d4:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 819e 	beq.w	800451a <UART_SetConfig+0x65e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	4613      	mov	r3, r2
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	441a      	add	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d805      	bhi.n	80041fa <UART_SetConfig+0x33e>
          (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate)))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d202      	bcs.n	8004200 <UART_SetConfig+0x344>
      {
        ret = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	74fb      	strb	r3, [r7, #19]
 80041fe:	e18c      	b.n	800451a <UART_SetConfig+0x65e>
      }
      else
      {
        switch (clocksource)
 8004200:	7efb      	ldrb	r3, [r7, #27]
 8004202:	2b08      	cmp	r3, #8
 8004204:	f200 8084 	bhi.w	8004310 <UART_SetConfig+0x454>
 8004208:	a201      	add	r2, pc, #4	; (adr r2, 8004210 <UART_SetConfig+0x354>)
 800420a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420e:	bf00      	nop
 8004210:	08004235 	.word	0x08004235
 8004214:	08004311 	.word	0x08004311
 8004218:	08004275 	.word	0x08004275
 800421c:	08004311 	.word	0x08004311
 8004220:	080042a9 	.word	0x080042a9
 8004224:	08004311 	.word	0x08004311
 8004228:	08004311 	.word	0x08004311
 800422c:	08004311 	.word	0x08004311
 8004230:	080042e7 	.word	0x080042e7
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004234:	f7fe fb4e 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8004238:	4603      	mov	r3, r0
 800423a:	f04f 0400 	mov.w	r4, #0
 800423e:	ea4f 2904 	mov.w	r9, r4, lsl #8
 8004242:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 8004246:	ea4f 2803 	mov.w	r8, r3, lsl #8
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	085b      	lsrs	r3, r3, #1
 8004250:	f04f 0400 	mov.w	r4, #0
 8004254:	eb18 0003 	adds.w	r0, r8, r3
 8004258:	eb49 0104 	adc.w	r1, r9, r4
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f04f 0400 	mov.w	r4, #0
 8004264:	461a      	mov	r2, r3
 8004266:	4623      	mov	r3, r4
 8004268:	f7fc f90c 	bl	8000484 <__aeabi_uldivmod>
 800426c:	4603      	mov	r3, r0
 800426e:	460c      	mov	r4, r1
 8004270:	617b      	str	r3, [r7, #20]
#endif
            break;
 8004272:	e050      	b.n	8004316 <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	085b      	lsrs	r3, r3, #1
 800427a:	f04f 0400 	mov.w	r4, #0
 800427e:	49ad      	ldr	r1, [pc, #692]	; (8004534 <UART_SetConfig+0x678>)
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	eb13 0801 	adds.w	r8, r3, r1
 8004288:	eb44 0902 	adc.w	r9, r4, r2
 800428c:	4640      	mov	r0, r8
 800428e:	4649      	mov	r1, r9
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f04f 0400 	mov.w	r4, #0
 8004298:	461a      	mov	r2, r3
 800429a:	4623      	mov	r3, r4
 800429c:	f7fc f8f2 	bl	8000484 <__aeabi_uldivmod>
 80042a0:	4603      	mov	r3, r0
 80042a2:	460c      	mov	r4, r1
 80042a4:	617b      	str	r3, [r7, #20]
#endif
            break;
 80042a6:	e036      	b.n	8004316 <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80042a8:	f7fe fa6c 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 80042ac:	4603      	mov	r3, r0
 80042ae:	461a      	mov	r2, r3
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	021d      	lsls	r5, r3, #8
 80042b6:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 80042ba:	0214      	lsls	r4, r2, #8
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	085b      	lsrs	r3, r3, #1
 80042c2:	461a      	mov	r2, r3
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	18a0      	adds	r0, r4, r2
 80042ca:	eb45 0103 	adc.w	r1, r5, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f04f 0400 	mov.w	r4, #0
 80042d6:	461a      	mov	r2, r3
 80042d8:	4623      	mov	r3, r4
 80042da:	f7fc f8d3 	bl	8000484 <__aeabi_uldivmod>
 80042de:	4603      	mov	r3, r0
 80042e0:	460c      	mov	r4, r1
 80042e2:	617b      	str	r3, [r7, #20]
#endif
            break;
 80042e4:	e017      	b.n	8004316 <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	085b      	lsrs	r3, r3, #1
 80042ec:	f04f 0400 	mov.w	r4, #0
 80042f0:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80042f4:	f144 0100 	adc.w	r1, r4, #0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f04f 0400 	mov.w	r4, #0
 8004300:	461a      	mov	r2, r3
 8004302:	4623      	mov	r3, r4
 8004304:	f7fc f8be 	bl	8000484 <__aeabi_uldivmod>
 8004308:	4603      	mov	r3, r0
 800430a:	460c      	mov	r4, r1
 800430c:	617b      	str	r3, [r7, #20]
#endif
            break;
 800430e:	e002      	b.n	8004316 <UART_SetConfig+0x45a>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	74fb      	strb	r3, [r7, #19]
            break;
 8004314:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800431c:	d308      	bcc.n	8004330 <UART_SetConfig+0x474>
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004324:	d204      	bcs.n	8004330 <UART_SetConfig+0x474>
        {
          huart->Instance->BRR = usartdiv;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	60da      	str	r2, [r3, #12]
 800432e:	e0f4      	b.n	800451a <UART_SetConfig+0x65e>
        }
        else
        {
          ret = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	74fb      	strb	r3, [r7, #19]
 8004334:	e0f1      	b.n	800451a <UART_SetConfig+0x65e>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800433e:	d17e      	bne.n	800443e <UART_SetConfig+0x582>
  {
    switch (clocksource)
 8004340:	7efb      	ldrb	r3, [r7, #27]
 8004342:	2b08      	cmp	r3, #8
 8004344:	d85b      	bhi.n	80043fe <UART_SetConfig+0x542>
 8004346:	a201      	add	r2, pc, #4	; (adr r2, 800434c <UART_SetConfig+0x490>)
 8004348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434c:	08004371 	.word	0x08004371
 8004350:	0800438f 	.word	0x0800438f
 8004354:	080043ad 	.word	0x080043ad
 8004358:	080043ff 	.word	0x080043ff
 800435c:	080043c9 	.word	0x080043c9
 8004360:	080043ff 	.word	0x080043ff
 8004364:	080043ff 	.word	0x080043ff
 8004368:	080043ff 	.word	0x080043ff
 800436c:	080043e7 	.word	0x080043e7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004370:	f7fe fab0 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8004374:	4603      	mov	r3, r0
 8004376:	005a      	lsls	r2, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	085b      	lsrs	r3, r3, #1
 800437e:	441a      	add	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	fbb2 f3f3 	udiv	r3, r2, r3
 8004388:	b29b      	uxth	r3, r3
 800438a:	617b      	str	r3, [r7, #20]
#endif
        break;
 800438c:	e03a      	b.n	8004404 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800438e:	f7fe fab7 	bl	8002900 <HAL_RCC_GetPCLK2Freq>
 8004392:	4603      	mov	r3, r0
 8004394:	005a      	lsls	r2, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	085b      	lsrs	r3, r3, #1
 800439c:	441a      	add	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	617b      	str	r3, [r7, #20]
#endif
        break;
 80043aa:	e02b      	b.n	8004404 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	085b      	lsrs	r3, r3, #1
 80043b2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80043b6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6852      	ldr	r2, [r2, #4]
 80043be:	fbb3 f3f2 	udiv	r3, r3, r2
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	617b      	str	r3, [r7, #20]
#endif
        break;
 80043c6:	e01d      	b.n	8004404 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80043c8:	f7fe f9dc 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 80043cc:	4603      	mov	r3, r0
 80043ce:	005a      	lsls	r2, r3, #1
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	085b      	lsrs	r3, r3, #1
 80043d6:	441a      	add	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	617b      	str	r3, [r7, #20]
#endif
        break;
 80043e4:	e00e      	b.n	8004404 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	085b      	lsrs	r3, r3, #1
 80043ec:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	617b      	str	r3, [r7, #20]
#endif
        break;
 80043fc:	e002      	b.n	8004404 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	74fb      	strb	r3, [r7, #19]
        break;
 8004402:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	2b0f      	cmp	r3, #15
 8004408:	d916      	bls.n	8004438 <UART_SetConfig+0x57c>
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004410:	d212      	bcs.n	8004438 <UART_SetConfig+0x57c>
    {
      brrtemp = usartdiv & 0xFFF0U;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	b29b      	uxth	r3, r3
 8004416:	f023 030f 	bic.w	r3, r3, #15
 800441a:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	085b      	lsrs	r3, r3, #1
 8004420:	b29b      	uxth	r3, r3
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	b29a      	uxth	r2, r3
 8004428:	897b      	ldrh	r3, [r7, #10]
 800442a:	4313      	orrs	r3, r2
 800442c:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	897a      	ldrh	r2, [r7, #10]
 8004434:	60da      	str	r2, [r3, #12]
 8004436:	e070      	b.n	800451a <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	74fb      	strb	r3, [r7, #19]
 800443c:	e06d      	b.n	800451a <UART_SetConfig+0x65e>
    }
  }
  else
  {
    switch (clocksource)
 800443e:	7efb      	ldrb	r3, [r7, #27]
 8004440:	2b08      	cmp	r3, #8
 8004442:	d859      	bhi.n	80044f8 <UART_SetConfig+0x63c>
 8004444:	a201      	add	r2, pc, #4	; (adr r2, 800444c <UART_SetConfig+0x590>)
 8004446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444a:	bf00      	nop
 800444c:	08004471 	.word	0x08004471
 8004450:	0800448d 	.word	0x0800448d
 8004454:	080044a9 	.word	0x080044a9
 8004458:	080044f9 	.word	0x080044f9
 800445c:	080044c5 	.word	0x080044c5
 8004460:	080044f9 	.word	0x080044f9
 8004464:	080044f9 	.word	0x080044f9
 8004468:	080044f9 	.word	0x080044f9
 800446c:	080044e1 	.word	0x080044e1
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004470:	f7fe fa30 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8004474:	4602      	mov	r2, r0
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	085b      	lsrs	r3, r3, #1
 800447c:	441a      	add	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	fbb2 f3f3 	udiv	r3, r2, r3
 8004486:	b29b      	uxth	r3, r3
 8004488:	617b      	str	r3, [r7, #20]
#endif
        break;
 800448a:	e038      	b.n	80044fe <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800448c:	f7fe fa38 	bl	8002900 <HAL_RCC_GetPCLK2Freq>
 8004490:	4602      	mov	r2, r0
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	085b      	lsrs	r3, r3, #1
 8004498:	441a      	add	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	617b      	str	r3, [r7, #20]
#endif
        break;
 80044a6:	e02a      	b.n	80044fe <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	085b      	lsrs	r3, r3, #1
 80044ae:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80044b2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6852      	ldr	r2, [r2, #4]
 80044ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80044be:	b29b      	uxth	r3, r3
 80044c0:	617b      	str	r3, [r7, #20]
#endif
        break;
 80044c2:	e01c      	b.n	80044fe <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80044c4:	f7fe f95e 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 80044c8:	4602      	mov	r2, r0
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	085b      	lsrs	r3, r3, #1
 80044d0:	441a      	add	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044da:	b29b      	uxth	r3, r3
 80044dc:	617b      	str	r3, [r7, #20]
#endif
        break;
 80044de:	e00e      	b.n	80044fe <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	085b      	lsrs	r3, r3, #1
 80044e6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	617b      	str	r3, [r7, #20]
#endif
        break;
 80044f6:	e002      	b.n	80044fe <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	74fb      	strb	r3, [r7, #19]
        break;
 80044fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b0f      	cmp	r3, #15
 8004502:	d908      	bls.n	8004516 <UART_SetConfig+0x65a>
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800450a:	d204      	bcs.n	8004516 <UART_SetConfig+0x65a>
    {
      huart->Instance->BRR = usartdiv;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	60da      	str	r2, [r3, #12]
 8004514:	e001      	b.n	800451a <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004526:	7cfb      	ldrb	r3, [r7, #19]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3720      	adds	r7, #32
 800452c:	46bd      	mov	sp, r7
 800452e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004532:	bf00      	nop
 8004534:	f4240000 	.word	0xf4240000

08004538 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6812      	ldr	r2, [r2, #0]
 8004554:	6852      	ldr	r2, [r2, #4]
 8004556:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800455e:	430a      	orrs	r2, r1
 8004560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6812      	ldr	r2, [r2, #0]
 8004576:	6852      	ldr	r2, [r2, #4]
 8004578:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004580:	430a      	orrs	r2, r1
 8004582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6812      	ldr	r2, [r2, #0]
 8004598:	6852      	ldr	r2, [r2, #4]
 800459a:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045a2:	430a      	orrs	r2, r1
 80045a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6812      	ldr	r2, [r2, #0]
 80045ba:	6852      	ldr	r2, [r2, #4]
 80045bc:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045c4:	430a      	orrs	r2, r1
 80045c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	6812      	ldr	r2, [r2, #0]
 80045dc:	6892      	ldr	r2, [r2, #8]
 80045de:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045e6:	430a      	orrs	r2, r1
 80045e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6812      	ldr	r2, [r2, #0]
 80045fe:	6892      	ldr	r2, [r2, #8]
 8004600:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004608:	430a      	orrs	r2, r1
 800460a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004614:	2b00      	cmp	r3, #0
 8004616:	d01a      	beq.n	800464e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	6852      	ldr	r2, [r2, #4]
 8004622:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800462a:	430a      	orrs	r2, r1
 800462c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004636:	d10a      	bne.n	800464e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6812      	ldr	r2, [r2, #0]
 8004640:	6852      	ldr	r2, [r2, #4]
 8004642:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800464a:	430a      	orrs	r2, r1
 800464c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6812      	ldr	r2, [r2, #0]
 8004662:	6852      	ldr	r2, [r2, #4]
 8004664:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800466c:	430a      	orrs	r2, r1
 800466e:	605a      	str	r2, [r3, #4]
  }
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af02      	add	r7, sp, #8
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800468e:	f7fc f8a7 	bl	80007e0 <HAL_GetTick>
 8004692:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d10e      	bne.n	80046c0 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f82c 	bl	800470e <UART_WaitOnFlagUntilTimeout>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e022      	b.n	8004706 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d10e      	bne.n	80046ec <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f816 	bl	800470e <UART_WaitOnFlagUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e00c      	b.n	8004706 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b084      	sub	sp, #16
 8004712:	af00      	add	r7, sp, #0
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	603b      	str	r3, [r7, #0]
 800471a:	4613      	mov	r3, r2
 800471c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800471e:	e02c      	b.n	800477a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004726:	d028      	beq.n	800477a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d007      	beq.n	800473e <UART_WaitOnFlagUntilTimeout+0x30>
 800472e:	f7fc f857 	bl	80007e0 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	1ad2      	subs	r2, r2, r3
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	429a      	cmp	r2, r3
 800473c:	d91d      	bls.n	800477a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	6812      	ldr	r2, [r2, #0]
 8004746:	6812      	ldr	r2, [r2, #0]
 8004748:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800474c:	601a      	str	r2, [r3, #0]
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	6812      	ldr	r2, [r2, #0]
 8004756:	6892      	ldr	r2, [r2, #8]
 8004758:	f022 0201 	bic.w	r2, r2, #1
 800475c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2220      	movs	r2, #32
 8004762:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e00f      	b.n	800479a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	401a      	ands	r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	429a      	cmp	r2, r3
 8004788:	bf0c      	ite	eq
 800478a:	2301      	moveq	r3, #1
 800478c:	2300      	movne	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	461a      	mov	r2, r3
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	429a      	cmp	r2, r3
 8004796:	d0c3      	beq.n	8004720 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <BMP280_read8b>:

#include "BMP280.h"


uint8_t BMP280_read8b(uint8_t address)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b088      	sub	sp, #32
 80047a8:	af04      	add	r7, sp, #16
 80047aa:	4603      	mov	r3, r0
 80047ac:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp=0;
 80047ae:	2300      	movs	r3, #0
 80047b0:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_IsDeviceReady(BMP280_I2C_handler,BMP280_IC2ADDRESS, 10, 100)==HAL_OK)
 80047b2:	4b0f      	ldr	r3, [pc, #60]	; (80047f0 <BMP280_read8b+0x4c>)
 80047b4:	6818      	ldr	r0, [r3, #0]
 80047b6:	2364      	movs	r3, #100	; 0x64
 80047b8:	220a      	movs	r2, #10
 80047ba:	21ec      	movs	r1, #236	; 0xec
 80047bc:	f7fc ff06 	bl	80015cc <HAL_I2C_IsDeviceReady>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10e      	bne.n	80047e4 <BMP280_read8b+0x40>
	{
		HAL_I2C_Mem_Read(BMP280_I2C_handler, BMP280_IC2ADDRESS, address, 1, &tmp, 1, 10);
 80047c6:	4b0a      	ldr	r3, [pc, #40]	; (80047f0 <BMP280_read8b+0x4c>)
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	79fb      	ldrb	r3, [r7, #7]
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	230a      	movs	r3, #10
 80047d0:	9302      	str	r3, [sp, #8]
 80047d2:	2301      	movs	r3, #1
 80047d4:	9301      	str	r3, [sp, #4]
 80047d6:	f107 030f 	add.w	r3, r7, #15
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	2301      	movs	r3, #1
 80047de:	21ec      	movs	r1, #236	; 0xec
 80047e0:	f7fc fdda 	bl	8001398 <HAL_I2C_Mem_Read>
	}
	return tmp;
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	20000058 	.word	0x20000058

080047f4 <BMP280_read16b>:

uint16_t BMP280_read16b(uint8_t address)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af04      	add	r7, sp, #16
 80047fa:	4603      	mov	r3, r0
 80047fc:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp[2];
	// tmp without dereferece bc tmp is a table
	HAL_I2C_Mem_Read(BMP280_I2C_handler, BMP280_IC2ADDRESS, address, 1, tmp, 2, 10);
 80047fe:	4b0d      	ldr	r3, [pc, #52]	; (8004834 <BMP280_read16b+0x40>)
 8004800:	6818      	ldr	r0, [r3, #0]
 8004802:	79fb      	ldrb	r3, [r7, #7]
 8004804:	b29a      	uxth	r2, r3
 8004806:	230a      	movs	r3, #10
 8004808:	9302      	str	r3, [sp, #8]
 800480a:	2302      	movs	r3, #2
 800480c:	9301      	str	r3, [sp, #4]
 800480e:	f107 030c 	add.w	r3, r7, #12
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	2301      	movs	r3, #1
 8004816:	21ec      	movs	r1, #236	; 0xec
 8004818:	f7fc fdbe 	bl	8001398 <HAL_I2C_Mem_Read>

	return (tmp[0]<<8 | tmp[1]); // combines two 8b into one 16b
 800481c:	7b3b      	ldrb	r3, [r7, #12]
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	b21a      	sxth	r2, r3
 8004822:	7b7b      	ldrb	r3, [r7, #13]
 8004824:	b21b      	sxth	r3, r3
 8004826:	4313      	orrs	r3, r2
 8004828:	b21b      	sxth	r3, r3
 800482a:	b29b      	uxth	r3, r3
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20000058 	.word	0x20000058

08004838 <BMP280_read16b_LE>:

uint16_t BMP280_read16b_LE(uint8_t addr)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	4603      	mov	r3, r0
 8004840:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_read16b(addr);
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff ffd5 	bl	80047f4 <BMP280_read16b>
 800484a:	4603      	mov	r3, r0
 800484c:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8); // little endian
 800484e:	89fb      	ldrh	r3, [r7, #14]
 8004850:	0a1b      	lsrs	r3, r3, #8
 8004852:	b29b      	uxth	r3, r3
 8004854:	b21a      	sxth	r2, r3
 8004856:	89fb      	ldrh	r3, [r7, #14]
 8004858:	021b      	lsls	r3, r3, #8
 800485a:	b21b      	sxth	r3, r3
 800485c:	4313      	orrs	r3, r2
 800485e:	b21b      	sxth	r3, r3
 8004860:	b29b      	uxth	r3, r3
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <BMP280_write8b>:

void BMP280_write8b(uint8_t address, uint8_t data)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af04      	add	r7, sp, #16
 8004872:	4603      	mov	r3, r0
 8004874:	460a      	mov	r2, r1
 8004876:	71fb      	strb	r3, [r7, #7]
 8004878:	4613      	mov	r3, r2
 800487a:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_IsDeviceReady(BMP280_I2C_handler,BMP280_IC2ADDRESS, 10, 100)==HAL_OK)
 800487c:	4b0d      	ldr	r3, [pc, #52]	; (80048b4 <BMP280_write8b+0x48>)
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	2364      	movs	r3, #100	; 0x64
 8004882:	220a      	movs	r2, #10
 8004884:	21ec      	movs	r1, #236	; 0xec
 8004886:	f7fc fea1 	bl	80015cc <HAL_I2C_IsDeviceReady>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10d      	bne.n	80048ac <BMP280_write8b+0x40>
	{
		HAL_I2C_Mem_Write(BMP280_I2C_handler, BMP280_IC2ADDRESS, address, 1, &data, 1, 10);
 8004890:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <BMP280_write8b+0x48>)
 8004892:	6818      	ldr	r0, [r3, #0]
 8004894:	79fb      	ldrb	r3, [r7, #7]
 8004896:	b29a      	uxth	r2, r3
 8004898:	230a      	movs	r3, #10
 800489a:	9302      	str	r3, [sp, #8]
 800489c:	2301      	movs	r3, #1
 800489e:	9301      	str	r3, [sp, #4]
 80048a0:	1dbb      	adds	r3, r7, #6
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	2301      	movs	r3, #1
 80048a6:	21ec      	movs	r1, #236	; 0xec
 80048a8:	f7fc fc62 	bl	8001170 <HAL_I2C_Mem_Write>
	}
}
 80048ac:	bf00      	nop
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20000058 	.word	0x20000058

080048b8 <BMP280_setConfig>:

static void BMP280_setConfig(uint8_t standbyTime, uint8_t filter)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	4603      	mov	r3, r0
 80048c0:	460a      	mov	r2, r1
 80048c2:	71fb      	strb	r3, [r7, #7]
 80048c4:	4613      	mov	r3, r2
 80048c6:	71bb      	strb	r3, [r7, #6]
	// & 0x7 bc only 3 bits are valid(in one data), & OxFC bc only 6 bits are valid(in whole register, 2x data)
	BMP280_write8b(BMP280_CONFIG,((standbyTime & 0x7) << 5  | (filter & 0x7) << 2 ) & 0xFC);
 80048c8:	79fb      	ldrb	r3, [r7, #7]
 80048ca:	015b      	lsls	r3, r3, #5
 80048cc:	b25a      	sxtb	r2, r3
 80048ce:	79bb      	ldrb	r3, [r7, #6]
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	b25b      	sxtb	r3, r3
 80048d4:	f003 031c 	and.w	r3, r3, #28
 80048d8:	b25b      	sxtb	r3, r3
 80048da:	4313      	orrs	r3, r2
 80048dc:	b25b      	sxtb	r3, r3
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	f023 0303 	bic.w	r3, r3, #3
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	4619      	mov	r1, r3
 80048e8:	20f5      	movs	r0, #245	; 0xf5
 80048ea:	f7ff ffbf 	bl	800486c <BMP280_write8b>
}
 80048ee:	bf00      	nop
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <BMP280_init>:


void BMP280_init(I2C_HandleTypeDef *i2c_hndlr, BMP280_configData* BMP280, BMP280_pressureRes pOversamp, BMP280_temperatureRes tempRes,
		BMP280_powerMode mode)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	4611      	mov	r1, r2
 8004904:	461a      	mov	r2, r3
 8004906:	460b      	mov	r3, r1
 8004908:	71fb      	strb	r3, [r7, #7]
 800490a:	4613      	mov	r3, r2
 800490c:	71bb      	strb	r3, [r7, #6]
	BMP280_I2C_handler=i2c_hndlr;
 800490e:	4a44      	ldr	r2, [pc, #272]	; (8004a20 <BMP280_init+0x128>)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6013      	str	r3, [r2, #0]
	BMP280->powerMode=mode;
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	7e3a      	ldrb	r2, [r7, #24]
 8004918:	709a      	strb	r2, [r3, #2]
	if(BMP280->powerMode == BMP280_MODE_STANDARD)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	789b      	ldrb	r3, [r3, #2]
 800491e:	2b03      	cmp	r3, #3
 8004920:	d103      	bne.n	800492a <BMP280_init+0x32>
	{
		BMP280_setConfig(BMP280_STNDBY_500,BMP280_FILTER_2);
 8004922:	2101      	movs	r1, #1
 8004924:	2004      	movs	r0, #4
 8004926:	f7ff ffc7 	bl	80048b8 <BMP280_setConfig>
	}
	BMP280->temperatureResolution=tempRes;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	79ba      	ldrb	r2, [r7, #6]
 800492e:	701a      	strb	r2, [r3, #0]
	BMP280->pressureOversampling=pOversamp;
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	79fa      	ldrb	r2, [r7, #7]
 8004934:	705a      	strb	r2, [r3, #1]

	while(BMP280_read8b(BMP280_ID) != 0x58);
 8004936:	bf00      	nop
 8004938:	20d0      	movs	r0, #208	; 0xd0
 800493a:	f7ff ff33 	bl	80047a4 <BMP280_read8b>
 800493e:	4603      	mov	r3, r0
 8004940:	2b58      	cmp	r3, #88	; 0x58
 8004942:	d1f9      	bne.n	8004938 <BMP280_init+0x40>

	/* read calibration data */

	BMP280->t1=BMP280_read16b_LE(BMP280_DIG_T1);
 8004944:	2088      	movs	r0, #136	; 0x88
 8004946:	f7ff ff77 	bl	8004838 <BMP280_read16b_LE>
 800494a:	4603      	mov	r3, r0
 800494c:	461a      	mov	r2, r3
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	81da      	strh	r2, [r3, #14]
	BMP280->t2=BMP280_read16b_LE(BMP280_DIG_T2);
 8004952:	208a      	movs	r0, #138	; 0x8a
 8004954:	f7ff ff70 	bl	8004838 <BMP280_read16b_LE>
 8004958:	4603      	mov	r3, r0
 800495a:	b21a      	sxth	r2, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	821a      	strh	r2, [r3, #16]
	BMP280->t3=BMP280_read16b_LE(BMP280_DIG_T3);
 8004960:	208c      	movs	r0, #140	; 0x8c
 8004962:	f7ff ff69 	bl	8004838 <BMP280_read16b_LE>
 8004966:	4603      	mov	r3, r0
 8004968:	b21a      	sxth	r2, r3
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	825a      	strh	r2, [r3, #18]

	BMP280->p1=BMP280_read16b_LE(BMP280_DIG_P1);
 800496e:	208e      	movs	r0, #142	; 0x8e
 8004970:	f7ff ff62 	bl	8004838 <BMP280_read16b_LE>
 8004974:	4603      	mov	r3, r0
 8004976:	461a      	mov	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	829a      	strh	r2, [r3, #20]
	BMP280->p2=BMP280_read16b_LE(BMP280_DIG_P2);
 800497c:	2090      	movs	r0, #144	; 0x90
 800497e:	f7ff ff5b 	bl	8004838 <BMP280_read16b_LE>
 8004982:	4603      	mov	r3, r0
 8004984:	b21a      	sxth	r2, r3
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	82da      	strh	r2, [r3, #22]
	BMP280->p3=BMP280_read16b_LE(BMP280_DIG_P3);
 800498a:	2092      	movs	r0, #146	; 0x92
 800498c:	f7ff ff54 	bl	8004838 <BMP280_read16b_LE>
 8004990:	4603      	mov	r3, r0
 8004992:	b21a      	sxth	r2, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	831a      	strh	r2, [r3, #24]
	BMP280->p4=BMP280_read16b_LE(BMP280_DIG_P4);
 8004998:	2094      	movs	r0, #148	; 0x94
 800499a:	f7ff ff4d 	bl	8004838 <BMP280_read16b_LE>
 800499e:	4603      	mov	r3, r0
 80049a0:	b21a      	sxth	r2, r3
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	835a      	strh	r2, [r3, #26]
	BMP280->p5=BMP280_read16b_LE(BMP280_DIG_P5);
 80049a6:	2096      	movs	r0, #150	; 0x96
 80049a8:	f7ff ff46 	bl	8004838 <BMP280_read16b_LE>
 80049ac:	4603      	mov	r3, r0
 80049ae:	b21a      	sxth	r2, r3
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	839a      	strh	r2, [r3, #28]
	BMP280->p6=BMP280_read16b_LE(BMP280_DIG_P6);
 80049b4:	2098      	movs	r0, #152	; 0x98
 80049b6:	f7ff ff3f 	bl	8004838 <BMP280_read16b_LE>
 80049ba:	4603      	mov	r3, r0
 80049bc:	b21a      	sxth	r2, r3
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	83da      	strh	r2, [r3, #30]
	BMP280->p7=BMP280_read16b_LE(BMP280_DIG_P7);
 80049c2:	209a      	movs	r0, #154	; 0x9a
 80049c4:	f7ff ff38 	bl	8004838 <BMP280_read16b_LE>
 80049c8:	4603      	mov	r3, r0
 80049ca:	b21a      	sxth	r2, r3
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	841a      	strh	r2, [r3, #32]
	BMP280->p9=BMP280_read16b_LE(BMP280_DIG_P8);
 80049d0:	209c      	movs	r0, #156	; 0x9c
 80049d2:	f7ff ff31 	bl	8004838 <BMP280_read16b_LE>
 80049d6:	4603      	mov	r3, r0
 80049d8:	b21a      	sxth	r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	849a      	strh	r2, [r3, #36]	; 0x24
	BMP280->p9=BMP280_read16b_LE(BMP280_DIG_P9);
 80049de:	209e      	movs	r0, #158	; 0x9e
 80049e0:	f7ff ff2a 	bl	8004838 <BMP280_read16b_LE>
 80049e4:	4603      	mov	r3, r0
 80049e6:	b21a      	sxth	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	849a      	strh	r2, [r3, #36]	; 0x24

	BMP280_write8b(BMP280_CTRL_MEASUREMENTS,(((tempRes & 0x7)<<5) | ((pOversamp & 0x7)<<2) |
 80049ec:	79bb      	ldrb	r3, [r7, #6]
 80049ee:	015b      	lsls	r3, r3, #5
 80049f0:	b25a      	sxtb	r2, r3
 80049f2:	79fb      	ldrb	r3, [r7, #7]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	b25b      	sxtb	r3, r3
 80049f8:	f003 031c 	and.w	r3, r3, #28
 80049fc:	b25b      	sxtb	r3, r3
 80049fe:	4313      	orrs	r3, r2
 8004a00:	b25a      	sxtb	r2, r3
 8004a02:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	b25b      	sxtb	r3, r3
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	20f4      	movs	r0, #244	; 0xf4
 8004a10:	f7ff ff2c 	bl	800486c <BMP280_write8b>
			mode));

	BMP280_getPressureAndTemperatureData(); // first readout is always zero
 8004a14:	f000 f88e 	bl	8004b34 <BMP280_getPressureAndTemperatureData>
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20000058 	.word	0x20000058

08004a24 <BMP280_getTemperatureData>:


void BMP280_getTemperatureData()
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
	int32_t var1, var2;
	if(BMP280.powerMode==BMP280_MODE_FORCED)
 8004a2a:	4b3f      	ldr	r3, [pc, #252]	; (8004b28 <BMP280_getTemperatureData+0x104>)
 8004a2c:	789b      	ldrb	r3, [r3, #2]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d176      	bne.n	8004b20 <BMP280_getTemperatureData+0xfc>
	{
		uint8_t powerMode;
		uint8_t ctrl = BMP280_read8b(BMP280_CTRL_MEASUREMENTS);
 8004a32:	20f4      	movs	r0, #244	; 0xf4
 8004a34:	f7ff feb6 	bl	80047a4 <BMP280_read8b>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	75bb      	strb	r3, [r7, #22]
		ctrl &= ~(0x03); 	/*we only want to change power mode*/
 8004a3c:	7dbb      	ldrb	r3, [r7, #22]
 8004a3e:	f023 0303 	bic.w	r3, r3, #3
 8004a42:	75bb      	strb	r3, [r7, #22]
		ctrl |= BMP280_MODE_FORCED;
 8004a44:	7dbb      	ldrb	r3, [r7, #22]
 8004a46:	f043 0301 	orr.w	r3, r3, #1
 8004a4a:	75bb      	strb	r3, [r7, #22]
		BMP280_write8b(BMP280_CTRL_MEASUREMENTS, ctrl);
 8004a4c:	7dbb      	ldrb	r3, [r7, #22]
 8004a4e:	4619      	mov	r1, r3
 8004a50:	20f4      	movs	r0, #244	; 0xf4
 8004a52:	f7ff ff0b 	bl	800486c <BMP280_write8b>
		powerMode=ctrl;
 8004a56:	7dbb      	ldrb	r3, [r7, #22]
 8004a58:	75fb      	strb	r3, [r7, #23]
		powerMode &= 0x03;
 8004a5a:	7dfb      	ldrb	r3, [r7, #23]
 8004a5c:	f003 0303 	and.w	r3, r3, #3
 8004a60:	75fb      	strb	r3, [r7, #23]


		if(powerMode == BMP280_MODE_FORCED)
 8004a62:	7dfb      	ldrb	r3, [r7, #23]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d15b      	bne.n	8004b20 <BMP280_getTemperatureData+0xfc>
		{
			while(powerMode==BMP280_MODE_FORCED) // Wait for end of conversion
 8004a68:	e008      	b.n	8004a7c <BMP280_getTemperatureData+0x58>
			{
				powerMode = BMP280_read8b(BMP280_CTRL_MEASUREMENTS);
 8004a6a:	20f4      	movs	r0, #244	; 0xf4
 8004a6c:	f7ff fe9a 	bl	80047a4 <BMP280_read8b>
 8004a70:	4603      	mov	r3, r0
 8004a72:	75fb      	strb	r3, [r7, #23]
				powerMode &= 0x03;
 8004a74:	7dfb      	ldrb	r3, [r7, #23]
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	75fb      	strb	r3, [r7, #23]
			while(powerMode==BMP280_MODE_FORCED) // Wait for end of conversion
 8004a7c:	7dfb      	ldrb	r3, [r7, #23]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d0f3      	beq.n	8004a6a <BMP280_getTemperatureData+0x46>
			}
			int32_t adc_T = BMP280_read16b(BMP280_TEMPERATURE_DATA);
 8004a82:	20fa      	movs	r0, #250	; 0xfa
 8004a84:	f7ff feb6 	bl	80047f4 <BMP280_read16b>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	613b      	str	r3, [r7, #16]
			adc_T <<=8;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	021b      	lsls	r3, r3, #8
 8004a90:	613b      	str	r3, [r7, #16]
			adc_T |= BMP280_read8b(BMP280_TEMPERATURE_DATA+2);
 8004a92:	20fc      	movs	r0, #252	; 0xfc
 8004a94:	f7ff fe86 	bl	80047a4 <BMP280_read8b>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
			adc_T >>=4;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	111b      	asrs	r3, r3, #4
 8004aa6:	613b      	str	r3, [r7, #16]

			var1  = ((((adc_T>>3) - ((int32_t)BMP280.t1 <<1))) * ((int32_t)BMP280.t2)) >> 11;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	10da      	asrs	r2, r3, #3
 8004aac:	4b1e      	ldr	r3, [pc, #120]	; (8004b28 <BMP280_getTemperatureData+0x104>)
 8004aae:	89db      	ldrh	r3, [r3, #14]
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	4a1c      	ldr	r2, [pc, #112]	; (8004b28 <BMP280_getTemperatureData+0x104>)
 8004ab6:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8004aba:	fb02 f303 	mul.w	r3, r2, r3
 8004abe:	12db      	asrs	r3, r3, #11
 8004ac0:	60fb      	str	r3, [r7, #12]

			var2  = (((((adc_T>>4) - ((int32_t)BMP280.t1)) * ((adc_T>>4) - ((int32_t)BMP280.t1))) >> 12) *
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	111b      	asrs	r3, r3, #4
 8004ac6:	4a18      	ldr	r2, [pc, #96]	; (8004b28 <BMP280_getTemperatureData+0x104>)
 8004ac8:	89d2      	ldrh	r2, [r2, #14]
 8004aca:	1a9b      	subs	r3, r3, r2
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	1112      	asrs	r2, r2, #4
 8004ad0:	4915      	ldr	r1, [pc, #84]	; (8004b28 <BMP280_getTemperatureData+0x104>)
 8004ad2:	89c9      	ldrh	r1, [r1, #14]
 8004ad4:	1a52      	subs	r2, r2, r1
 8004ad6:	fb02 f303 	mul.w	r3, r2, r3
 8004ada:	131b      	asrs	r3, r3, #12
					((int32_t)BMP280.t3)) >> 14;
 8004adc:	4a12      	ldr	r2, [pc, #72]	; (8004b28 <BMP280_getTemperatureData+0x104>)
 8004ade:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
			var2  = (((((adc_T>>4) - ((int32_t)BMP280.t1)) * ((adc_T>>4) - ((int32_t)BMP280.t1))) >> 12) *
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	139b      	asrs	r3, r3, #14
 8004ae8:	60bb      	str	r3, [r7, #8]

			BMP280.t_fine = var1 + var2;
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	4413      	add	r3, r2
 8004af0:	4a0d      	ldr	r2, [pc, #52]	; (8004b28 <BMP280_getTemperatureData+0x104>)
 8004af2:	6093      	str	r3, [r2, #8]

			float T  = ((BMP280.t_fine * 5 + 128) >> 8);
 8004af4:	4b0c      	ldr	r3, [pc, #48]	; (8004b28 <BMP280_getTemperatureData+0x104>)
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	4613      	mov	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	3380      	adds	r3, #128	; 0x80
 8004b00:	121b      	asrs	r3, r3, #8
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b0a:	edc7 7a01 	vstr	s15, [r7, #4]
			BMP280_readings.temperature=T/100;
 8004b0e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004b12:	eddf 6a06 	vldr	s13, [pc, #24]	; 8004b2c <BMP280_getTemperatureData+0x108>
 8004b16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b1a:	4b05      	ldr	r3, [pc, #20]	; (8004b30 <BMP280_getTemperatureData+0x10c>)
 8004b1c:	edc3 7a01 	vstr	s15, [r3, #4]
		}
	}
}
 8004b20:	bf00      	nop
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	20000030 	.word	0x20000030
 8004b2c:	42c80000 	.word	0x42c80000
 8004b30:	20000024 	.word	0x20000024

08004b34 <BMP280_getPressureAndTemperatureData>:


void BMP280_getPressureAndTemperatureData()
{
 8004b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b38:	b0a4      	sub	sp, #144	; 0x90
 8004b3a:	af00      	add	r7, sp, #0
	int64_t var1, var2, p;

	// Must be done first to get the t_fine variable set up
	BMP280_getTemperatureData();
 8004b3c:	f7ff ff72 	bl	8004a24 <BMP280_getTemperatureData>
	int32_t adc_P = BMP280_read16b(BMP280_PRESSURE_DATA);
 8004b40:	20f7      	movs	r0, #247	; 0xf7
 8004b42:	f7ff fe57 	bl	80047f4 <BMP280_read16b>
 8004b46:	4603      	mov	r3, r0
 8004b48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	adc_P <<=8;
 8004b4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b50:	021b      	lsls	r3, r3, #8
 8004b52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	adc_P |= BMP280_read8b(BMP280_PRESSURE_DATA+2);
 8004b56:	20f9      	movs	r0, #249	; 0xf9
 8004b58:	f7ff fe24 	bl	80047a4 <BMP280_read8b>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	adc_P >>=4;
 8004b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b6e:	111b      	asrs	r3, r3, #4
 8004b70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	var1 = ((int64_t)BMP280.t_fine) - 128000;
 8004b74:	4bc0      	ldr	r3, [pc, #768]	; (8004e78 <BMP280_getPressureAndTemperatureData+0x344>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8004b7c:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8004b80:	f144 34ff 	adc.w	r4, r4, #4294967295	; 0xffffffff
 8004b84:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	var2 = var1 * var1 * (int64_t)BMP280.p6;
 8004b88:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004b8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b90:	fb03 f102 	mul.w	r1, r3, r2
 8004b94:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004b98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b9c:	fb03 f302 	mul.w	r3, r3, r2
 8004ba0:	18cc      	adds	r4, r1, r3
 8004ba2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ba6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004baa:	fba2 0103 	umull	r0, r1, r2, r3
 8004bae:	1863      	adds	r3, r4, r1
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4bb1      	ldr	r3, [pc, #708]	; (8004e78 <BMP280_getPressureAndTemperatureData+0x344>)
 8004bb4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004bb8:	b21b      	sxth	r3, r3
 8004bba:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8004bbe:	fb03 f501 	mul.w	r5, r3, r1
 8004bc2:	fb00 f204 	mul.w	r2, r0, r4
 8004bc6:	442a      	add	r2, r5
 8004bc8:	fba0 3403 	umull	r3, r4, r0, r3
 8004bcc:	4422      	add	r2, r4
 8004bce:	4614      	mov	r4, r2
 8004bd0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8004bd4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	var2 = var2 + ((var1*(int64_t)BMP280.p5)<<17);
 8004bd8:	4ba7      	ldr	r3, [pc, #668]	; (8004e78 <BMP280_getPressureAndTemperatureData+0x344>)
 8004bda:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004bde:	b21b      	sxth	r3, r3
 8004be0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8004be4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004be8:	fb04 f102 	mul.w	r1, r4, r2
 8004bec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004bf0:	fb03 f202 	mul.w	r2, r3, r2
 8004bf4:	4411      	add	r1, r2
 8004bf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bfa:	fba2 3403 	umull	r3, r4, r2, r3
 8004bfe:	190a      	adds	r2, r1, r4
 8004c00:	4614      	mov	r4, r2
 8004c02:	ea4f 4944 	mov.w	r9, r4, lsl #17
 8004c06:	ea49 39d3 	orr.w	r9, r9, r3, lsr #15
 8004c0a:	ea4f 4843 	mov.w	r8, r3, lsl #17
 8004c0e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8004c12:	eb13 0308 	adds.w	r3, r3, r8
 8004c16:	eb44 0409 	adc.w	r4, r4, r9
 8004c1a:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	var2 = var2 + (((int64_t)BMP280.p4)<<35);
 8004c1e:	4b96      	ldr	r3, [pc, #600]	; (8004e78 <BMP280_getPressureAndTemperatureData+0x344>)
 8004c20:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8004c24:	b21b      	sxth	r3, r3
 8004c26:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60bb      	str	r3, [r7, #8]
 8004c32:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8004c36:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004c3a:	18c9      	adds	r1, r1, r3
 8004c3c:	eb42 0204 	adc.w	r2, r2, r4
 8004c40:	460b      	mov	r3, r1
 8004c42:	4614      	mov	r4, r2
 8004c44:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	var1 = ((var1 * var1 * (int64_t)BMP280.p3)>>8) +
 8004c48:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004c4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c50:	fb03 f102 	mul.w	r1, r3, r2
 8004c54:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004c58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c5c:	fb03 f302 	mul.w	r3, r3, r2
 8004c60:	18cc      	adds	r4, r1, r3
 8004c62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c6a:	fba2 0103 	umull	r0, r1, r2, r3
 8004c6e:	1863      	adds	r3, r4, r1
 8004c70:	4619      	mov	r1, r3
 8004c72:	4b81      	ldr	r3, [pc, #516]	; (8004e78 <BMP280_getPressureAndTemperatureData+0x344>)
 8004c74:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8004c78:	b21b      	sxth	r3, r3
 8004c7a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8004c7e:	fb03 f501 	mul.w	r5, r3, r1
 8004c82:	fb00 f204 	mul.w	r2, r0, r4
 8004c86:	442a      	add	r2, r5
 8004c88:	fba0 3403 	umull	r3, r4, r0, r3
 8004c8c:	4422      	add	r2, r4
 8004c8e:	4614      	mov	r4, r2
 8004c90:	0a1a      	lsrs	r2, r3, #8
 8004c92:	66ba      	str	r2, [r7, #104]	; 0x68
 8004c94:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c96:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8004c9a:	66ba      	str	r2, [r7, #104]	; 0x68
 8004c9c:	1223      	asrs	r3, r4, #8
 8004c9e:	66fb      	str	r3, [r7, #108]	; 0x6c
			((var1 * (int64_t)BMP280.p2)<<12);
 8004ca0:	4b75      	ldr	r3, [pc, #468]	; (8004e78 <BMP280_getPressureAndTemperatureData+0x344>)
 8004ca2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004ca6:	b21b      	sxth	r3, r3
 8004ca8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8004cac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004cb0:	fb04 f102 	mul.w	r1, r4, r2
 8004cb4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004cb8:	fb03 f202 	mul.w	r2, r3, r2
 8004cbc:	4411      	add	r1, r2
 8004cbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004cc2:	fba2 3403 	umull	r3, r4, r2, r3
 8004cc6:	190a      	adds	r2, r1, r4
 8004cc8:	4614      	mov	r4, r2
 8004cca:	ea4f 3b04 	mov.w	fp, r4, lsl #12
 8004cce:	ea4b 5b13 	orr.w	fp, fp, r3, lsr #20
 8004cd2:	ea4f 3a03 	mov.w	sl, r3, lsl #12
	var1 = ((var1 * var1 * (int64_t)BMP280.p3)>>8) +
 8004cd6:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8004cda:	eb13 030a 	adds.w	r3, r3, sl
 8004cde:	eb44 040b 	adc.w	r4, r4, fp
 8004ce2:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)BMP280.p1)>>33;
 8004ce6:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8004cea:	1c19      	adds	r1, r3, #0
 8004cec:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8004cf0:	4b61      	ldr	r3, [pc, #388]	; (8004e78 <BMP280_getPressureAndTemperatureData+0x344>)
 8004cf2:	8a9b      	ldrh	r3, [r3, #20]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	f04f 0400 	mov.w	r4, #0
 8004cfa:	fb03 f502 	mul.w	r5, r3, r2
 8004cfe:	fb01 f004 	mul.w	r0, r1, r4
 8004d02:	4428      	add	r0, r5
 8004d04:	fba1 3403 	umull	r3, r4, r1, r3
 8004d08:	1902      	adds	r2, r0, r4
 8004d0a:	4614      	mov	r4, r2
 8004d0c:	1062      	asrs	r2, r4, #1
 8004d0e:	603a      	str	r2, [r7, #0]
 8004d10:	17e3      	asrs	r3, r4, #31
 8004d12:	607b      	str	r3, [r7, #4]
 8004d14:	e897 0018 	ldmia.w	r7, {r3, r4}
 8004d18:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80

	if (var1 == 0) {
 8004d1c:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8004d20:	4323      	orrs	r3, r4
 8004d22:	f000 80ff 	beq.w	8004f24 <BMP280_getPressureAndTemperatureData+0x3f0>
		return ;  // avoid exception caused by division by zero
	}
	p = 1048576 - adc_P;
 8004d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d2a:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8004d2e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8004d32:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	p = (((p<<31) - var2)*3125) / var1;
 8004d36:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8004d3a:	07e2      	lsls	r2, r4, #31
 8004d3c:	667a      	str	r2, [r7, #100]	; 0x64
 8004d3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d40:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 8004d44:	667a      	str	r2, [r7, #100]	; 0x64
 8004d46:	07db      	lsls	r3, r3, #31
 8004d48:	663b      	str	r3, [r7, #96]	; 0x60
 8004d4a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8004d4e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004d52:	1ac9      	subs	r1, r1, r3
 8004d54:	eb62 0204 	sbc.w	r2, r2, r4
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4614      	mov	r4, r2
 8004d5c:	18db      	adds	r3, r3, r3
 8004d5e:	eb44 0404 	adc.w	r4, r4, r4
 8004d62:	185b      	adds	r3, r3, r1
 8004d64:	eb44 0402 	adc.w	r4, r4, r2
 8004d68:	01a0      	lsls	r0, r4, #6
 8004d6a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004d6c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004d6e:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 8004d72:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004d74:	0198      	lsls	r0, r3, #6
 8004d76:	63b8      	str	r0, [r7, #56]	; 0x38
 8004d78:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004d7c:	eb18 0803 	adds.w	r8, r8, r3
 8004d80:	eb49 0904 	adc.w	r9, r9, r4
 8004d84:	4643      	mov	r3, r8
 8004d86:	464c      	mov	r4, r9
 8004d88:	00a0      	lsls	r0, r4, #2
 8004d8a:	6378      	str	r0, [r7, #52]	; 0x34
 8004d8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004d8e:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
 8004d92:	6378      	str	r0, [r7, #52]	; 0x34
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	633b      	str	r3, [r7, #48]	; 0x30
 8004d98:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004d9c:	185b      	adds	r3, r3, r1
 8004d9e:	eb44 0402 	adc.w	r4, r4, r2
 8004da2:	00a0      	lsls	r0, r4, #2
 8004da4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004da6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004da8:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
 8004dac:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004db6:	eb13 0801 	adds.w	r8, r3, r1
 8004dba:	eb44 0902 	adc.w	r9, r4, r2
 8004dbe:	4640      	mov	r0, r8
 8004dc0:	4649      	mov	r1, r9
 8004dc2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004dc6:	f7fb fb0d 	bl	80003e4 <__aeabi_ldivmod>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	460c      	mov	r4, r1
 8004dce:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	var1 = (((int64_t)BMP280.p9) * (p>>13) * (p>>13)) >> 25;
 8004dd2:	4b29      	ldr	r3, [pc, #164]	; (8004e78 <BMP280_getPressureAndTemperatureData+0x344>)
 8004dd4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004dd8:	b219      	sxth	r1, r3
 8004dda:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8004dde:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8004de2:	0b58      	lsrs	r0, r3, #13
 8004de4:	65b8      	str	r0, [r7, #88]	; 0x58
 8004de6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004de8:	ea40 40c4 	orr.w	r0, r0, r4, lsl #19
 8004dec:	65b8      	str	r0, [r7, #88]	; 0x58
 8004dee:	1363      	asrs	r3, r4, #13
 8004df0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004df2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8004df6:	4623      	mov	r3, r4
 8004df8:	fb03 f002 	mul.w	r0, r3, r2
 8004dfc:	462b      	mov	r3, r5
 8004dfe:	fb01 f303 	mul.w	r3, r1, r3
 8004e02:	4403      	add	r3, r0
 8004e04:	4620      	mov	r0, r4
 8004e06:	fba1 0100 	umull	r0, r1, r1, r0
 8004e0a:	440b      	add	r3, r1
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8004e12:	0b5a      	lsrs	r2, r3, #13
 8004e14:	653a      	str	r2, [r7, #80]	; 0x50
 8004e16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e18:	ea42 42c4 	orr.w	r2, r2, r4, lsl #19
 8004e1c:	653a      	str	r2, [r7, #80]	; 0x50
 8004e1e:	1363      	asrs	r3, r4, #13
 8004e20:	657b      	str	r3, [r7, #84]	; 0x54
 8004e22:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8004e26:	4623      	mov	r3, r4
 8004e28:	fb03 f201 	mul.w	r2, r3, r1
 8004e2c:	462b      	mov	r3, r5
 8004e2e:	fb00 f303 	mul.w	r3, r0, r3
 8004e32:	441a      	add	r2, r3
 8004e34:	4623      	mov	r3, r4
 8004e36:	fba0 3403 	umull	r3, r4, r0, r3
 8004e3a:	4422      	add	r2, r4
 8004e3c:	4614      	mov	r4, r2
 8004e3e:	0e5a      	lsrs	r2, r3, #25
 8004e40:	623a      	str	r2, [r7, #32]
 8004e42:	6a3a      	ldr	r2, [r7, #32]
 8004e44:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8004e48:	623a      	str	r2, [r7, #32]
 8004e4a:	1663      	asrs	r3, r4, #25
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e4e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004e52:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	var2 = (((int64_t)BMP280.p8) * p) >> 19;
 8004e56:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <BMP280_getPressureAndTemperatureData+0x344>)
 8004e58:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8004e5c:	b21b      	sxth	r3, r3
 8004e5e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8004e62:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004e64:	fb04 f102 	mul.w	r1, r4, r2
 8004e68:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e6a:	fb03 f202 	mul.w	r2, r3, r2
 8004e6e:	440a      	add	r2, r1
 8004e70:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004e72:	fba1 3403 	umull	r3, r4, r1, r3
 8004e76:	e001      	b.n	8004e7c <BMP280_getPressureAndTemperatureData+0x348>
 8004e78:	20000030 	.word	0x20000030
 8004e7c:	4422      	add	r2, r4
 8004e7e:	4614      	mov	r4, r2
 8004e80:	0cda      	lsrs	r2, r3, #19
 8004e82:	61ba      	str	r2, [r7, #24]
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8004e8a:	61ba      	str	r2, [r7, #24]
 8004e8c:	14e3      	asrs	r3, r4, #19
 8004e8e:	61fb      	str	r3, [r7, #28]
 8004e90:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004e94:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78

	p = ((p + var1 + var2) >> 8) + (((int64_t)BMP280.p7)<<4);
 8004e98:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004e9c:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8004ea0:	18c9      	adds	r1, r1, r3
 8004ea2:	eb42 0204 	adc.w	r2, r2, r4
 8004ea6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8004eaa:	185b      	adds	r3, r3, r1
 8004eac:	eb44 0402 	adc.w	r4, r4, r2
 8004eb0:	0a1a      	lsrs	r2, r3, #8
 8004eb2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004eb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eb6:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8004eba:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ebc:	1223      	asrs	r3, r4, #8
 8004ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ec0:	4b1b      	ldr	r3, [pc, #108]	; (8004f30 <BMP280_getPressureAndTemperatureData+0x3fc>)
 8004ec2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004ec6:	b21b      	sxth	r3, r3
 8004ec8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8004ecc:	0122      	lsls	r2, r4, #4
 8004ece:	647a      	str	r2, [r7, #68]	; 0x44
 8004ed0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ed2:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8004ed6:	647a      	str	r2, [r7, #68]	; 0x44
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	643b      	str	r3, [r7, #64]	; 0x40
 8004edc:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004ee0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004ee4:	185b      	adds	r3, r3, r1
 8004ee6:	eb44 0402 	adc.w	r4, r4, r2
 8004eea:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	BMP280_readings.pressure=(int32_t)1.0*p/256;
 8004eee:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f174 0200 	sbcs.w	r2, r4, #0
 8004ef8:	da02      	bge.n	8004f00 <BMP280_getPressureAndTemperatureData+0x3cc>
 8004efa:	33ff      	adds	r3, #255	; 0xff
 8004efc:	f144 0400 	adc.w	r4, r4, #0
 8004f00:	0a1a      	lsrs	r2, r3, #8
 8004f02:	613a      	str	r2, [r7, #16]
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8004f0a:	613a      	str	r2, [r7, #16]
 8004f0c:	1223      	asrs	r3, r4, #8
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004f14:	4618      	mov	r0, r3
 8004f16:	4621      	mov	r1, r4
 8004f18:	f7fb fa26 	bl	8000368 <__aeabi_l2f>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <BMP280_getPressureAndTemperatureData+0x400>)
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	e000      	b.n	8004f26 <BMP280_getPressureAndTemperatureData+0x3f2>
		return ;  // avoid exception caused by division by zero
 8004f24:	bf00      	nop
}
 8004f26:	3790      	adds	r7, #144	; 0x90
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f2e:	bf00      	nop
 8004f30:	20000030 	.word	0x20000030
 8004f34:	20000024 	.word	0x20000024

08004f38 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	4603      	mov	r3, r0
 8004f40:	80fb      	strh	r3, [r7, #6]
	HAL_ResumeTick();
 8004f42:	f000 fc61 	bl	8005808 <HAL_ResumeTick>
	HAL_GPIO_TogglePin(LD4_GPIO_Port,LD4_Pin);
 8004f46:	2104      	movs	r1, #4
 8004f48:	4807      	ldr	r0, [pc, #28]	; (8004f68 <HAL_GPIO_EXTI_Callback+0x30>)
 8004f4a:	f7fc f859 	bl	8001000 <HAL_GPIO_TogglePin>
	BMP280_getPressureAndTemperatureData();
 8004f4e:	f7ff fdf1 	bl	8004b34 <BMP280_getPressureAndTemperatureData>
	HAL_GPIO_TogglePin(LD4_GPIO_Port,LD4_Pin);
 8004f52:	2104      	movs	r1, #4
 8004f54:	4804      	ldr	r0, [pc, #16]	; (8004f68 <HAL_GPIO_EXTI_Callback+0x30>)
 8004f56:	f7fc f853 	bl	8001000 <HAL_GPIO_TogglePin>
	HAL_SuspendTick();
 8004f5a:	f000 fc43 	bl	80057e4 <HAL_SuspendTick>
}
 8004f5e:	bf00      	nop
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	48000400 	.word	0x48000400

08004f6c <setupSleepMode>:

void setupSleepMode()
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
	HAL_SuspendTick();
 8004f70:	f000 fc38 	bl	80057e4 <HAL_SuspendTick>
	HAL_PWR_EnterSLEEPMode( PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8004f74:	2101      	movs	r1, #1
 8004f76:	2000      	movs	r0, #0
 8004f78:	f7fc fee2 	bl	8001d40 <HAL_PWR_EnterSLEEPMode>
	SCB->SCR |= SCB_SCR_SLEEPONEXIT_Msk;
 8004f7c:	4a03      	ldr	r2, [pc, #12]	; (8004f8c <setupSleepMode+0x20>)
 8004f7e:	4b03      	ldr	r3, [pc, #12]	; (8004f8c <setupSleepMode+0x20>)
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f043 0302 	orr.w	r3, r3, #2
 8004f86:	6113      	str	r3, [r2, #16]
}
 8004f88:	bf00      	nop
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	e000ed00 	.word	0xe000ed00

08004f90 <init_periodicReadout>:
{
	NVIC_DisableIRQ(buttonIRQn);
}

void init_periodicReadout(TIM_HandleTypeDef *htim, uint16_t sleepTime) // sleepTime [s]
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	807b      	strh	r3, [r7, #2]
	uint16_t ARR=400*sleepTime-1; //calculating sleeping time
 8004f9c:	887b      	ldrh	r3, [r7, #2]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	0092      	lsls	r2, r2, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	0091      	lsls	r1, r2, #2
 8004fa8:	461a      	mov	r2, r3
 8004faa:	460b      	mov	r3, r1
 8004fac:	4413      	add	r3, r2
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	81fb      	strh	r3, [r7, #14]
	HAL_TIM_Base_Start_IT(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fe fb42 	bl	8003640 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_AUTORELOAD(htim, ARR);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	89fa      	ldrh	r2, [r7, #14]
 8004fc2:	62da      	str	r2, [r3, #44]	; 0x2c
 8004fc4:	89fa      	ldrh	r2, [r7, #14]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	60da      	str	r2, [r3, #12]
	//setupSleepMode();
}
 8004fca:	bf00      	nop
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004fda:	f7fb fbdb 	bl	8000794 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004fde:	f000 f821 	bl	8005024 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004fe2:	f000 f9ab 	bl	800533c <MX_GPIO_Init>
	MX_DMA_Init();
 8004fe6:	f000 f983 	bl	80052f0 <MX_DMA_Init>
	MX_RTC_Init();
 8004fea:	f000 f8db 	bl	80051a4 <MX_RTC_Init>
	MX_I2C1_Init();
 8004fee:	f000 f899 	bl	8005124 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 8004ff2:	f000 f94d 	bl	8005290 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8004ff6:	f000 f8fd 	bl	80051f4 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	BMP280_init(&hi2c1,&BMP280, BMP280_PRESSURE_HIGH,BMP280_TEMPERATURE_20B,BMP280_MODE_FORCED);
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	2305      	movs	r3, #5
 8005000:	2204      	movs	r2, #4
 8005002:	4905      	ldr	r1, [pc, #20]	; (8005018 <main+0x44>)
 8005004:	4805      	ldr	r0, [pc, #20]	; (800501c <main+0x48>)
 8005006:	f7ff fc77 	bl	80048f8 <BMP280_init>
	init_periodicReadout(&htim2, 30);
 800500a:	211e      	movs	r1, #30
 800500c:	4804      	ldr	r0, [pc, #16]	; (8005020 <main+0x4c>)
 800500e:	f7ff ffbf 	bl	8004f90 <init_periodicReadout>

	setupSleepMode();
 8005012:	f7ff ffab 	bl	8004f6c <setupSleepMode>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8005016:	e7fe      	b.n	8005016 <main+0x42>
 8005018:	20000030 	.word	0x20000030
 800501c:	200000a4 	.word	0x200000a4
 8005020:	2000015c 	.word	0x2000015c

08005024 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b0b8      	sub	sp, #224	; 0xe0
 8005028:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800502a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800502e:	2244      	movs	r2, #68	; 0x44
 8005030:	2100      	movs	r1, #0
 8005032:	4618      	mov	r0, r3
 8005034:	f000 fcdc 	bl	80059f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005038:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	605a      	str	r2, [r3, #4]
 8005042:	609a      	str	r2, [r3, #8]
 8005044:	60da      	str	r2, [r3, #12]
 8005046:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005048:	463b      	mov	r3, r7
 800504a:	2288      	movs	r2, #136	; 0x88
 800504c:	2100      	movs	r1, #0
 800504e:	4618      	mov	r0, r3
 8005050:	f000 fcce 	bl	80059f0 <memset>

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8005054:	2309      	movs	r3, #9
 8005056:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800505a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800505e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005062:	2301      	movs	r3, #1
 8005064:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005068:	2302      	movs	r3, #2
 800506a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800506e:	2303      	movs	r3, #3
 8005070:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 1;
 8005074:	2301      	movs	r3, #1
 8005076:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 20;
 800507a:	2314      	movs	r3, #20
 800507c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005080:	2307      	movs	r3, #7
 8005082:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005086:	2302      	movs	r3, #2
 8005088:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800508c:	2302      	movs	r3, #2
 800508e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005092:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005096:	4618      	mov	r0, r3
 8005098:	f7fc ff32 	bl	8001f00 <HAL_RCC_OscConfig>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <SystemClock_Config+0x82>
	{
		Error_Handler();
 80050a2:	f000 f9f7 	bl	8005494 <Error_Handler>
	}
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80050a6:	230f      	movs	r3, #15
 80050a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80050ac:	2303      	movs	r3, #3
 80050ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80050b2:	2300      	movs	r3, #0
 80050b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80050b8:	2300      	movs	r3, #0
 80050ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80050be:	2300      	movs	r3, #0
 80050c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80050c4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80050c8:	2104      	movs	r1, #4
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fd fa7c 	bl	80025c8 <HAL_RCC_ClockConfig>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <SystemClock_Config+0xb6>
	{
		Error_Handler();
 80050d6:	f000 f9dd 	bl	8005494 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 80050da:	4b11      	ldr	r3, [pc, #68]	; (8005120 <SystemClock_Config+0xfc>)
 80050dc:	603b      	str	r3, [r7, #0]
			|RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80050de:	2300      	movs	r3, #0
 80050e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80050e2:	2300      	movs	r3, #0
 80050e4:	653b      	str	r3, [r7, #80]	; 0x50
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80050e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80050ee:	463b      	mov	r3, r7
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7fd fcd9 	bl	8002aa8 <HAL_RCCEx_PeriphCLKConfig>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <SystemClock_Config+0xdc>
	{
		Error_Handler();
 80050fc:	f000 f9ca 	bl	8005494 <Error_Handler>
	}
	/**Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8005100:	f7fd fc46 	bl	8002990 <HAL_RCC_EnableCSS>
	/**Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005104:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005108:	f7fc fe5c 	bl	8001dc4 <HAL_PWREx_ControlVoltageScaling>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <SystemClock_Config+0xf2>
	{
		Error_Handler();
 8005112:	f000 f9bf 	bl	8005494 <Error_Handler>
	}
}
 8005116:	bf00      	nop
 8005118:	37e0      	adds	r7, #224	; 0xe0
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	00020042 	.word	0x00020042

08005124 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8005128:	4b1b      	ldr	r3, [pc, #108]	; (8005198 <MX_I2C1_Init+0x74>)
 800512a:	4a1c      	ldr	r2, [pc, #112]	; (800519c <MX_I2C1_Init+0x78>)
 800512c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10909CEC;
 800512e:	4b1a      	ldr	r3, [pc, #104]	; (8005198 <MX_I2C1_Init+0x74>)
 8005130:	4a1b      	ldr	r2, [pc, #108]	; (80051a0 <MX_I2C1_Init+0x7c>)
 8005132:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8005134:	4b18      	ldr	r3, [pc, #96]	; (8005198 <MX_I2C1_Init+0x74>)
 8005136:	2200      	movs	r2, #0
 8005138:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800513a:	4b17      	ldr	r3, [pc, #92]	; (8005198 <MX_I2C1_Init+0x74>)
 800513c:	2201      	movs	r2, #1
 800513e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005140:	4b15      	ldr	r3, [pc, #84]	; (8005198 <MX_I2C1_Init+0x74>)
 8005142:	2200      	movs	r2, #0
 8005144:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8005146:	4b14      	ldr	r3, [pc, #80]	; (8005198 <MX_I2C1_Init+0x74>)
 8005148:	2200      	movs	r2, #0
 800514a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800514c:	4b12      	ldr	r3, [pc, #72]	; (8005198 <MX_I2C1_Init+0x74>)
 800514e:	2200      	movs	r2, #0
 8005150:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005152:	4b11      	ldr	r3, [pc, #68]	; (8005198 <MX_I2C1_Init+0x74>)
 8005154:	2200      	movs	r2, #0
 8005156:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005158:	4b0f      	ldr	r3, [pc, #60]	; (8005198 <MX_I2C1_Init+0x74>)
 800515a:	2200      	movs	r2, #0
 800515c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800515e:	480e      	ldr	r0, [pc, #56]	; (8005198 <MX_I2C1_Init+0x74>)
 8005160:	f7fb ff78 	bl	8001054 <HAL_I2C_Init>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 800516a:	f000 f993 	bl	8005494 <Error_Handler>
	}
	/**Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800516e:	2100      	movs	r1, #0
 8005170:	4809      	ldr	r0, [pc, #36]	; (8005198 <MX_I2C1_Init+0x74>)
 8005172:	f7fc fd4d 	bl	8001c10 <HAL_I2CEx_ConfigAnalogFilter>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 800517c:	f000 f98a 	bl	8005494 <Error_Handler>
	}
	/**Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005180:	2100      	movs	r1, #0
 8005182:	4805      	ldr	r0, [pc, #20]	; (8005198 <MX_I2C1_Init+0x74>)
 8005184:	f7fc fd8f 	bl	8001ca6 <HAL_I2CEx_ConfigDigitalFilter>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 800518e:	f000 f981 	bl	8005494 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8005192:	bf00      	nop
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	200000a4 	.word	0x200000a4
 800519c:	40005400 	.word	0x40005400
 80051a0:	10909cec 	.word	0x10909cec

080051a4 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/**Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80051a8:	4b10      	ldr	r3, [pc, #64]	; (80051ec <MX_RTC_Init+0x48>)
 80051aa:	4a11      	ldr	r2, [pc, #68]	; (80051f0 <MX_RTC_Init+0x4c>)
 80051ac:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80051ae:	4b0f      	ldr	r3, [pc, #60]	; (80051ec <MX_RTC_Init+0x48>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 80051b4:	4b0d      	ldr	r3, [pc, #52]	; (80051ec <MX_RTC_Init+0x48>)
 80051b6:	227f      	movs	r2, #127	; 0x7f
 80051b8:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80051ba:	4b0c      	ldr	r3, [pc, #48]	; (80051ec <MX_RTC_Init+0x48>)
 80051bc:	22ff      	movs	r2, #255	; 0xff
 80051be:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80051c0:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <MX_RTC_Init+0x48>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80051c6:	4b09      	ldr	r3, [pc, #36]	; (80051ec <MX_RTC_Init+0x48>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80051cc:	4b07      	ldr	r3, [pc, #28]	; (80051ec <MX_RTC_Init+0x48>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80051d2:	4b06      	ldr	r3, [pc, #24]	; (80051ec <MX_RTC_Init+0x48>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80051d8:	4804      	ldr	r0, [pc, #16]	; (80051ec <MX_RTC_Init+0x48>)
 80051da:	f7fe f915 	bl	8003408 <HAL_RTC_Init>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <MX_RTC_Init+0x44>
	{
		Error_Handler();
 80051e4:	f000 f956 	bl	8005494 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80051e8:	bf00      	nop
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	20000138 	.word	0x20000138
 80051f0:	40002800 	.word	0x40002800

080051f4 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b088      	sub	sp, #32
 80051f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80051fa:	f107 0310 	add.w	r3, r7, #16
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	605a      	str	r2, [r3, #4]
 8005204:	609a      	str	r2, [r3, #8]
 8005206:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005208:	1d3b      	adds	r3, r7, #4
 800520a:	2200      	movs	r2, #0
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	605a      	str	r2, [r3, #4]
 8005210:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8005212:	4b1e      	ldr	r3, [pc, #120]	; (800528c <MX_TIM2_Init+0x98>)
 8005214:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005218:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 9999;
 800521a:	4b1c      	ldr	r3, [pc, #112]	; (800528c <MX_TIM2_Init+0x98>)
 800521c:	f242 720f 	movw	r2, #9999	; 0x270f
 8005220:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005222:	4b1a      	ldr	r3, [pc, #104]	; (800528c <MX_TIM2_Init+0x98>)
 8005224:	2200      	movs	r2, #0
 8005226:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 3999;
 8005228:	4b18      	ldr	r3, [pc, #96]	; (800528c <MX_TIM2_Init+0x98>)
 800522a:	f640 729f 	movw	r2, #3999	; 0xf9f
 800522e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005230:	4b16      	ldr	r3, [pc, #88]	; (800528c <MX_TIM2_Init+0x98>)
 8005232:	2200      	movs	r2, #0
 8005234:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005236:	4b15      	ldr	r3, [pc, #84]	; (800528c <MX_TIM2_Init+0x98>)
 8005238:	2200      	movs	r2, #0
 800523a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800523c:	4813      	ldr	r0, [pc, #76]	; (800528c <MX_TIM2_Init+0x98>)
 800523e:	f7fe f9d4 	bl	80035ea <HAL_TIM_Base_Init>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <MX_TIM2_Init+0x58>
	{
		Error_Handler();
 8005248:	f000 f924 	bl	8005494 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800524c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005250:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005252:	f107 0310 	add.w	r3, r7, #16
 8005256:	4619      	mov	r1, r3
 8005258:	480c      	ldr	r0, [pc, #48]	; (800528c <MX_TIM2_Init+0x98>)
 800525a:	f7fe fb3c 	bl	80038d6 <HAL_TIM_ConfigClockSource>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <MX_TIM2_Init+0x74>
	{
		Error_Handler();
 8005264:	f000 f916 	bl	8005494 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005268:	2300      	movs	r3, #0
 800526a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800526c:	2300      	movs	r3, #0
 800526e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005270:	1d3b      	adds	r3, r7, #4
 8005272:	4619      	mov	r1, r3
 8005274:	4805      	ldr	r0, [pc, #20]	; (800528c <MX_TIM2_Init+0x98>)
 8005276:	f7fe fd55 	bl	8003d24 <HAL_TIMEx_MasterConfigSynchronization>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <MX_TIM2_Init+0x90>
	{
		Error_Handler();
 8005280:	f000 f908 	bl	8005494 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8005284:	bf00      	nop
 8005286:	3720      	adds	r7, #32
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	2000015c 	.word	0x2000015c

08005290 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8005294:	4b14      	ldr	r3, [pc, #80]	; (80052e8 <MX_USART2_UART_Init+0x58>)
 8005296:	4a15      	ldr	r2, [pc, #84]	; (80052ec <MX_USART2_UART_Init+0x5c>)
 8005298:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800529a:	4b13      	ldr	r3, [pc, #76]	; (80052e8 <MX_USART2_UART_Init+0x58>)
 800529c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80052a0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80052a2:	4b11      	ldr	r3, [pc, #68]	; (80052e8 <MX_USART2_UART_Init+0x58>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80052a8:	4b0f      	ldr	r3, [pc, #60]	; (80052e8 <MX_USART2_UART_Init+0x58>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80052ae:	4b0e      	ldr	r3, [pc, #56]	; (80052e8 <MX_USART2_UART_Init+0x58>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80052b4:	4b0c      	ldr	r3, [pc, #48]	; (80052e8 <MX_USART2_UART_Init+0x58>)
 80052b6:	220c      	movs	r2, #12
 80052b8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052ba:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <MX_USART2_UART_Init+0x58>)
 80052bc:	2200      	movs	r2, #0
 80052be:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80052c0:	4b09      	ldr	r3, [pc, #36]	; (80052e8 <MX_USART2_UART_Init+0x58>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80052c6:	4b08      	ldr	r3, [pc, #32]	; (80052e8 <MX_USART2_UART_Init+0x58>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80052cc:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <MX_USART2_UART_Init+0x58>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80052d2:	4805      	ldr	r0, [pc, #20]	; (80052e8 <MX_USART2_UART_Init+0x58>)
 80052d4:	f7fe fda0 	bl	8003e18 <HAL_UART_Init>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 80052de:	f000 f8d9 	bl	8005494 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80052e2:	bf00      	nop
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	2000019c 	.word	0x2000019c
 80052ec:	40004400 	.word	0x40004400

080052f0 <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) 
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80052f6:	4a10      	ldr	r2, [pc, #64]	; (8005338 <MX_DMA_Init+0x48>)
 80052f8:	4b0f      	ldr	r3, [pc, #60]	; (8005338 <MX_DMA_Init+0x48>)
 80052fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052fc:	f043 0301 	orr.w	r3, r3, #1
 8005300:	6493      	str	r3, [r2, #72]	; 0x48
 8005302:	4b0d      	ldr	r3, [pc, #52]	; (8005338 <MX_DMA_Init+0x48>)
 8005304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	607b      	str	r3, [r7, #4]
 800530c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800530e:	2200      	movs	r2, #0
 8005310:	2100      	movs	r1, #0
 8005312:	2010      	movs	r0, #16
 8005314:	f7fb fb22 	bl	800095c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8005318:	2010      	movs	r0, #16
 800531a:	f7fb fb3b 	bl	8000994 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800531e:	2200      	movs	r2, #0
 8005320:	2100      	movs	r1, #0
 8005322:	2011      	movs	r0, #17
 8005324:	f7fb fb1a 	bl	800095c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8005328:	2011      	movs	r0, #17
 800532a:	f7fb fb33 	bl	8000994 <HAL_NVIC_EnableIRQ>

}
 800532e:	bf00      	nop
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40021000 	.word	0x40021000

0800533c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b08a      	sub	sp, #40	; 0x28
 8005340:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005342:	f107 0314 	add.w	r3, r7, #20
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	605a      	str	r2, [r3, #4]
 800534c:	609a      	str	r2, [r3, #8]
 800534e:	60da      	str	r2, [r3, #12]
 8005350:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005352:	4a3e      	ldr	r2, [pc, #248]	; (800544c <MX_GPIO_Init+0x110>)
 8005354:	4b3d      	ldr	r3, [pc, #244]	; (800544c <MX_GPIO_Init+0x110>)
 8005356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005358:	f043 0304 	orr.w	r3, r3, #4
 800535c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800535e:	4b3b      	ldr	r3, [pc, #236]	; (800544c <MX_GPIO_Init+0x110>)
 8005360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005362:	f003 0304 	and.w	r3, r3, #4
 8005366:	613b      	str	r3, [r7, #16]
 8005368:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800536a:	4a38      	ldr	r2, [pc, #224]	; (800544c <MX_GPIO_Init+0x110>)
 800536c:	4b37      	ldr	r3, [pc, #220]	; (800544c <MX_GPIO_Init+0x110>)
 800536e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005376:	4b35      	ldr	r3, [pc, #212]	; (800544c <MX_GPIO_Init+0x110>)
 8005378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800537a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005382:	4a32      	ldr	r2, [pc, #200]	; (800544c <MX_GPIO_Init+0x110>)
 8005384:	4b31      	ldr	r3, [pc, #196]	; (800544c <MX_GPIO_Init+0x110>)
 8005386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005388:	f043 0301 	orr.w	r3, r3, #1
 800538c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800538e:	4b2f      	ldr	r3, [pc, #188]	; (800544c <MX_GPIO_Init+0x110>)
 8005390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	60bb      	str	r3, [r7, #8]
 8005398:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800539a:	4a2c      	ldr	r2, [pc, #176]	; (800544c <MX_GPIO_Init+0x110>)
 800539c:	4b2b      	ldr	r3, [pc, #172]	; (800544c <MX_GPIO_Init+0x110>)
 800539e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a0:	f043 0302 	orr.w	r3, r3, #2
 80053a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053a6:	4b29      	ldr	r3, [pc, #164]	; (800544c <MX_GPIO_Init+0x110>)
 80053a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	607b      	str	r3, [r7, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80053b2:	4a26      	ldr	r2, [pc, #152]	; (800544c <MX_GPIO_Init+0x110>)
 80053b4:	4b25      	ldr	r3, [pc, #148]	; (800544c <MX_GPIO_Init+0x110>)
 80053b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b8:	f043 0310 	orr.w	r3, r3, #16
 80053bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053be:	4b23      	ldr	r3, [pc, #140]	; (800544c <MX_GPIO_Init+0x110>)
 80053c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053c2:	f003 0310 	and.w	r3, r3, #16
 80053c6:	603b      	str	r3, [r7, #0]
 80053c8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80053ca:	2200      	movs	r2, #0
 80053cc:	2104      	movs	r1, #4
 80053ce:	4820      	ldr	r0, [pc, #128]	; (8005450 <MX_GPIO_Init+0x114>)
 80053d0:	f7fb fdfe 	bl	8000fd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 80053d4:	2200      	movs	r2, #0
 80053d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053da:	481e      	ldr	r0, [pc, #120]	; (8005454 <MX_GPIO_Init+0x118>)
 80053dc:	f7fb fdf8 	bl	8000fd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BUTTON_Pin */
	GPIO_InitStruct.Pin = BUTTON_Pin;
 80053e0:	2301      	movs	r3, #1
 80053e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80053e4:	4b1c      	ldr	r3, [pc, #112]	; (8005458 <MX_GPIO_Init+0x11c>)
 80053e6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053e8:	2300      	movs	r3, #0
 80053ea:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80053ec:	f107 0314 	add.w	r3, r7, #20
 80053f0:	4619      	mov	r1, r3
 80053f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053f6:	f7fb fc43 	bl	8000c80 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD4_Pin */
	GPIO_InitStruct.Pin = LD4_Pin;
 80053fa:	2304      	movs	r3, #4
 80053fc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053fe:	2301      	movs	r3, #1
 8005400:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005402:	2300      	movs	r3, #0
 8005404:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005406:	2300      	movs	r3, #0
 8005408:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 800540a:	f107 0314 	add.w	r3, r7, #20
 800540e:	4619      	mov	r1, r3
 8005410:	480f      	ldr	r0, [pc, #60]	; (8005450 <MX_GPIO_Init+0x114>)
 8005412:	f7fb fc35 	bl	8000c80 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD5_Pin */
	GPIO_InitStruct.Pin = LD5_Pin;
 8005416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800541a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800541c:	2301      	movs	r3, #1
 800541e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005420:	2300      	movs	r3, #0
 8005422:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005424:	2300      	movs	r3, #0
 8005426:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD5_GPIO_Port, &GPIO_InitStruct);
 8005428:	f107 0314 	add.w	r3, r7, #20
 800542c:	4619      	mov	r1, r3
 800542e:	4809      	ldr	r0, [pc, #36]	; (8005454 <MX_GPIO_Init+0x118>)
 8005430:	f7fb fc26 	bl	8000c80 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8005434:	2200      	movs	r2, #0
 8005436:	2100      	movs	r1, #0
 8005438:	2006      	movs	r0, #6
 800543a:	f7fb fa8f 	bl	800095c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800543e:	2006      	movs	r0, #6
 8005440:	f7fb faa8 	bl	8000994 <HAL_NVIC_EnableIRQ>

}
 8005444:	bf00      	nop
 8005446:	3728      	adds	r7, #40	; 0x28
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	40021000 	.word	0x40021000
 8005450:	48000400 	.word	0x48000400
 8005454:	48001000 	.word	0x48001000
 8005458:	10110000 	.word	0x10110000

0800545c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM2)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800546c:	d105      	bne.n	800547a <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		HAL_ResumeTick();
 800546e:	f000 f9cb 	bl	8005808 <HAL_ResumeTick>
		BMP280_getPressureAndTemperatureData();
 8005472:	f7ff fb5f 	bl	8004b34 <BMP280_getPressureAndTemperatureData>
		HAL_SuspendTick();
 8005476:	f000 f9b5 	bl	80057e4 <HAL_SuspendTick>
	}
	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a04      	ldr	r2, [pc, #16]	; (8005490 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d101      	bne.n	8005488 <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_IncTick();
 8005484:	f7fb f99e 	bl	80007c4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8005488:	bf00      	nop
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	40012c00 	.word	0x40012c00

08005494 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8005494:	b480      	push	{r7}
 8005496:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8005498:	bf00      	nop
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
	...

080054a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054aa:	4a12      	ldr	r2, [pc, #72]	; (80054f4 <HAL_MspInit+0x50>)
 80054ac:	4b11      	ldr	r3, [pc, #68]	; (80054f4 <HAL_MspInit+0x50>)
 80054ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b0:	f043 0301 	orr.w	r3, r3, #1
 80054b4:	6613      	str	r3, [r2, #96]	; 0x60
 80054b6:	4b0f      	ldr	r3, [pc, #60]	; (80054f4 <HAL_MspInit+0x50>)
 80054b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	607b      	str	r3, [r7, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054c2:	4a0c      	ldr	r2, [pc, #48]	; (80054f4 <HAL_MspInit+0x50>)
 80054c4:	4b0b      	ldr	r3, [pc, #44]	; (80054f4 <HAL_MspInit+0x50>)
 80054c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054cc:	6593      	str	r3, [r2, #88]	; 0x58
 80054ce:	4b09      	ldr	r3, [pc, #36]	; (80054f4 <HAL_MspInit+0x50>)
 80054d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d6:	603b      	str	r3, [r7, #0]
 80054d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80054da:	2200      	movs	r2, #0
 80054dc:	2100      	movs	r1, #0
 80054de:	2005      	movs	r0, #5
 80054e0:	f7fb fa3c 	bl	800095c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80054e4:	2005      	movs	r0, #5
 80054e6:	f7fb fa55 	bl	8000994 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054ea:	bf00      	nop
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	40021000 	.word	0x40021000

080054f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08a      	sub	sp, #40	; 0x28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005500:	f107 0314 	add.w	r3, r7, #20
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	605a      	str	r2, [r3, #4]
 800550a:	609a      	str	r2, [r3, #8]
 800550c:	60da      	str	r2, [r3, #12]
 800550e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a17      	ldr	r2, [pc, #92]	; (8005574 <HAL_I2C_MspInit+0x7c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d127      	bne.n	800556a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800551a:	4a17      	ldr	r2, [pc, #92]	; (8005578 <HAL_I2C_MspInit+0x80>)
 800551c:	4b16      	ldr	r3, [pc, #88]	; (8005578 <HAL_I2C_MspInit+0x80>)
 800551e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005520:	f043 0302 	orr.w	r3, r3, #2
 8005524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005526:	4b14      	ldr	r3, [pc, #80]	; (8005578 <HAL_I2C_MspInit+0x80>)
 8005528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005532:	23c0      	movs	r3, #192	; 0xc0
 8005534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005536:	2312      	movs	r3, #18
 8005538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800553a:	2301      	movs	r3, #1
 800553c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800553e:	2303      	movs	r3, #3
 8005540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005542:	2304      	movs	r3, #4
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005546:	f107 0314 	add.w	r3, r7, #20
 800554a:	4619      	mov	r1, r3
 800554c:	480b      	ldr	r0, [pc, #44]	; (800557c <HAL_I2C_MspInit+0x84>)
 800554e:	f7fb fb97 	bl	8000c80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005552:	4a09      	ldr	r2, [pc, #36]	; (8005578 <HAL_I2C_MspInit+0x80>)
 8005554:	4b08      	ldr	r3, [pc, #32]	; (8005578 <HAL_I2C_MspInit+0x80>)
 8005556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005558:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800555c:	6593      	str	r3, [r2, #88]	; 0x58
 800555e:	4b06      	ldr	r3, [pc, #24]	; (8005578 <HAL_I2C_MspInit+0x80>)
 8005560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800556a:	bf00      	nop
 800556c:	3728      	adds	r7, #40	; 0x28
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	40005400 	.word	0x40005400
 8005578:	40021000 	.word	0x40021000
 800557c:	48000400 	.word	0x48000400

08005580 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]

  if(hrtc->Instance==RTC)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a08      	ldr	r2, [pc, #32]	; (80055b0 <HAL_RTC_MspInit+0x30>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d107      	bne.n	80055a2 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005592:	4a08      	ldr	r2, [pc, #32]	; (80055b4 <HAL_RTC_MspInit+0x34>)
 8005594:	4b07      	ldr	r3, [pc, #28]	; (80055b4 <HAL_RTC_MspInit+0x34>)
 8005596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800559e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40002800 	.word	0x40002800
 80055b4:	40021000 	.word	0x40021000

080055b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM2)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c8:	d113      	bne.n	80055f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80055ca:	4a0c      	ldr	r2, [pc, #48]	; (80055fc <HAL_TIM_Base_MspInit+0x44>)
 80055cc:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <HAL_TIM_Base_MspInit+0x44>)
 80055ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d0:	f043 0301 	orr.w	r3, r3, #1
 80055d4:	6593      	str	r3, [r2, #88]	; 0x58
 80055d6:	4b09      	ldr	r3, [pc, #36]	; (80055fc <HAL_TIM_Base_MspInit+0x44>)
 80055d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80055e2:	2200      	movs	r2, #0
 80055e4:	2100      	movs	r1, #0
 80055e6:	201c      	movs	r0, #28
 80055e8:	f7fb f9b8 	bl	800095c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80055ec:	201c      	movs	r0, #28
 80055ee:	f7fb f9d1 	bl	8000994 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80055f2:	bf00      	nop
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40021000 	.word	0x40021000

08005600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08a      	sub	sp, #40	; 0x28
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005608:	f107 0314 	add.w	r3, r7, #20
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	605a      	str	r2, [r3, #4]
 8005612:	609a      	str	r2, [r3, #8]
 8005614:	60da      	str	r2, [r3, #12]
 8005616:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a40      	ldr	r2, [pc, #256]	; (8005720 <HAL_UART_MspInit+0x120>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d17a      	bne.n	8005718 <HAL_UART_MspInit+0x118>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005622:	4a40      	ldr	r2, [pc, #256]	; (8005724 <HAL_UART_MspInit+0x124>)
 8005624:	4b3f      	ldr	r3, [pc, #252]	; (8005724 <HAL_UART_MspInit+0x124>)
 8005626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800562c:	6593      	str	r3, [r2, #88]	; 0x58
 800562e:	4b3d      	ldr	r3, [pc, #244]	; (8005724 <HAL_UART_MspInit+0x124>)
 8005630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800563a:	4a3a      	ldr	r2, [pc, #232]	; (8005724 <HAL_UART_MspInit+0x124>)
 800563c:	4b39      	ldr	r3, [pc, #228]	; (8005724 <HAL_UART_MspInit+0x124>)
 800563e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005640:	f043 0301 	orr.w	r3, r3, #1
 8005644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005646:	4b37      	ldr	r3, [pc, #220]	; (8005724 <HAL_UART_MspInit+0x124>)
 8005648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005652:	230c      	movs	r3, #12
 8005654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005656:	2302      	movs	r3, #2
 8005658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800565a:	2300      	movs	r3, #0
 800565c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800565e:	2303      	movs	r3, #3
 8005660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005662:	2307      	movs	r3, #7
 8005664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005666:	f107 0314 	add.w	r3, r7, #20
 800566a:	4619      	mov	r1, r3
 800566c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005670:	f7fb fb06 	bl	8000c80 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005674:	4b2c      	ldr	r3, [pc, #176]	; (8005728 <HAL_UART_MspInit+0x128>)
 8005676:	4a2d      	ldr	r2, [pc, #180]	; (800572c <HAL_UART_MspInit+0x12c>)
 8005678:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800567a:	4b2b      	ldr	r3, [pc, #172]	; (8005728 <HAL_UART_MspInit+0x128>)
 800567c:	2202      	movs	r2, #2
 800567e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005680:	4b29      	ldr	r3, [pc, #164]	; (8005728 <HAL_UART_MspInit+0x128>)
 8005682:	2200      	movs	r2, #0
 8005684:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005686:	4b28      	ldr	r3, [pc, #160]	; (8005728 <HAL_UART_MspInit+0x128>)
 8005688:	2200      	movs	r2, #0
 800568a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800568c:	4b26      	ldr	r3, [pc, #152]	; (8005728 <HAL_UART_MspInit+0x128>)
 800568e:	2280      	movs	r2, #128	; 0x80
 8005690:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005692:	4b25      	ldr	r3, [pc, #148]	; (8005728 <HAL_UART_MspInit+0x128>)
 8005694:	2200      	movs	r2, #0
 8005696:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005698:	4b23      	ldr	r3, [pc, #140]	; (8005728 <HAL_UART_MspInit+0x128>)
 800569a:	2200      	movs	r2, #0
 800569c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800569e:	4b22      	ldr	r3, [pc, #136]	; (8005728 <HAL_UART_MspInit+0x128>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80056a4:	4b20      	ldr	r3, [pc, #128]	; (8005728 <HAL_UART_MspInit+0x128>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80056aa:	481f      	ldr	r0, [pc, #124]	; (8005728 <HAL_UART_MspInit+0x128>)
 80056ac:	f7fb f980 	bl	80009b0 <HAL_DMA_Init>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 80056b6:	f7ff feed 	bl	8005494 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a1a      	ldr	r2, [pc, #104]	; (8005728 <HAL_UART_MspInit+0x128>)
 80056be:	66da      	str	r2, [r3, #108]	; 0x6c
 80056c0:	4a19      	ldr	r2, [pc, #100]	; (8005728 <HAL_UART_MspInit+0x128>)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80056c6:	4b1a      	ldr	r3, [pc, #104]	; (8005730 <HAL_UART_MspInit+0x130>)
 80056c8:	4a1a      	ldr	r2, [pc, #104]	; (8005734 <HAL_UART_MspInit+0x134>)
 80056ca:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80056cc:	4b18      	ldr	r3, [pc, #96]	; (8005730 <HAL_UART_MspInit+0x130>)
 80056ce:	2202      	movs	r2, #2
 80056d0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056d2:	4b17      	ldr	r3, [pc, #92]	; (8005730 <HAL_UART_MspInit+0x130>)
 80056d4:	2210      	movs	r2, #16
 80056d6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056d8:	4b15      	ldr	r3, [pc, #84]	; (8005730 <HAL_UART_MspInit+0x130>)
 80056da:	2200      	movs	r2, #0
 80056dc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80056de:	4b14      	ldr	r3, [pc, #80]	; (8005730 <HAL_UART_MspInit+0x130>)
 80056e0:	2280      	movs	r2, #128	; 0x80
 80056e2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056e4:	4b12      	ldr	r3, [pc, #72]	; (8005730 <HAL_UART_MspInit+0x130>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056ea:	4b11      	ldr	r3, [pc, #68]	; (8005730 <HAL_UART_MspInit+0x130>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80056f0:	4b0f      	ldr	r3, [pc, #60]	; (8005730 <HAL_UART_MspInit+0x130>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80056f6:	4b0e      	ldr	r3, [pc, #56]	; (8005730 <HAL_UART_MspInit+0x130>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80056fc:	480c      	ldr	r0, [pc, #48]	; (8005730 <HAL_UART_MspInit+0x130>)
 80056fe:	f7fb f957 	bl	80009b0 <HAL_DMA_Init>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8005708:	f7ff fec4 	bl	8005494 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a08      	ldr	r2, [pc, #32]	; (8005730 <HAL_UART_MspInit+0x130>)
 8005710:	669a      	str	r2, [r3, #104]	; 0x68
 8005712:	4a07      	ldr	r2, [pc, #28]	; (8005730 <HAL_UART_MspInit+0x130>)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005718:	bf00      	nop
 800571a:	3728      	adds	r7, #40	; 0x28
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	40004400 	.word	0x40004400
 8005724:	40021000 	.word	0x40021000
 8005728:	2000005c 	.word	0x2000005c
 800572c:	4002006c 	.word	0x4002006c
 8005730:	200000f0 	.word	0x200000f0
 8005734:	40020080 	.word	0x40020080

08005738 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08c      	sub	sp, #48	; 0x30
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005740:	2300      	movs	r3, #0
 8005742:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005744:	2300      	movs	r3, #0
 8005746:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8005748:	2200      	movs	r2, #0
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	2019      	movs	r0, #25
 800574e:	f7fb f905 	bl	800095c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8005752:	2019      	movs	r0, #25
 8005754:	f7fb f91e 	bl	8000994 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005758:	4a1e      	ldr	r2, [pc, #120]	; (80057d4 <HAL_InitTick+0x9c>)
 800575a:	4b1e      	ldr	r3, [pc, #120]	; (80057d4 <HAL_InitTick+0x9c>)
 800575c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800575e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005762:	6613      	str	r3, [r2, #96]	; 0x60
 8005764:	4b1b      	ldr	r3, [pc, #108]	; (80057d4 <HAL_InitTick+0x9c>)
 8005766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800576c:	60fb      	str	r3, [r7, #12]
 800576e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005770:	f107 0210 	add.w	r2, r7, #16
 8005774:	f107 0314 	add.w	r3, r7, #20
 8005778:	4611      	mov	r1, r2
 800577a:	4618      	mov	r0, r3
 800577c:	f7fd f8d6 	bl	800292c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005780:	f7fd f8be 	bl	8002900 <HAL_RCC_GetPCLK2Freq>
 8005784:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005788:	4a13      	ldr	r2, [pc, #76]	; (80057d8 <HAL_InitTick+0xa0>)
 800578a:	fba2 2303 	umull	r2, r3, r2, r3
 800578e:	0c9b      	lsrs	r3, r3, #18
 8005790:	3b01      	subs	r3, #1
 8005792:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005794:	4b11      	ldr	r3, [pc, #68]	; (80057dc <HAL_InitTick+0xa4>)
 8005796:	4a12      	ldr	r2, [pc, #72]	; (80057e0 <HAL_InitTick+0xa8>)
 8005798:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800579a:	4b10      	ldr	r3, [pc, #64]	; (80057dc <HAL_InitTick+0xa4>)
 800579c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80057a0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80057a2:	4a0e      	ldr	r2, [pc, #56]	; (80057dc <HAL_InitTick+0xa4>)
 80057a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80057a8:	4b0c      	ldr	r3, [pc, #48]	; (80057dc <HAL_InitTick+0xa4>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057ae:	4b0b      	ldr	r3, [pc, #44]	; (80057dc <HAL_InitTick+0xa4>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80057b4:	4809      	ldr	r0, [pc, #36]	; (80057dc <HAL_InitTick+0xa4>)
 80057b6:	f7fd ff18 	bl	80035ea <HAL_TIM_Base_Init>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d104      	bne.n	80057ca <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80057c0:	4806      	ldr	r0, [pc, #24]	; (80057dc <HAL_InitTick+0xa4>)
 80057c2:	f7fd ff3d 	bl	8003640 <HAL_TIM_Base_Start_IT>
 80057c6:	4603      	mov	r3, r0
 80057c8:	e000      	b.n	80057cc <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3730      	adds	r7, #48	; 0x30
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	40021000 	.word	0x40021000
 80057d8:	431bde83 	.word	0x431bde83
 80057dc:	20000214 	.word	0x20000214
 80057e0:	40012c00 	.word	0x40012c00

080057e4 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0
  /* Disable TIM1 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE);                                                  
 80057e8:	4b06      	ldr	r3, [pc, #24]	; (8005804 <HAL_SuspendTick+0x20>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a05      	ldr	r2, [pc, #20]	; (8005804 <HAL_SuspendTick+0x20>)
 80057ee:	6812      	ldr	r2, [r2, #0]
 80057f0:	68d2      	ldr	r2, [r2, #12]
 80057f2:	f022 0201 	bic.w	r2, r2, #1
 80057f6:	60da      	str	r2, [r3, #12]
}
 80057f8:	bf00      	nop
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	20000214 	.word	0x20000214

08005808 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
  /* Enable TIM1 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 800580c:	4b06      	ldr	r3, [pc, #24]	; (8005828 <HAL_ResumeTick+0x20>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a05      	ldr	r2, [pc, #20]	; (8005828 <HAL_ResumeTick+0x20>)
 8005812:	6812      	ldr	r2, [r2, #0]
 8005814:	68d2      	ldr	r2, [r2, #12]
 8005816:	f042 0201 	orr.w	r2, r2, #1
 800581a:	60da      	str	r2, [r3, #12]
}
 800581c:	bf00      	nop
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	20000214 	.word	0x20000214

0800582c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8005830:	f7fd f8be 	bl	80029b0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005834:	bf00      	nop
 8005836:	bd80      	pop	{r7, pc}

08005838 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800583c:	e7fe      	b.n	800583c <HardFault_Handler+0x4>

0800583e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800583e:	b480      	push	{r7}
 8005840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005842:	e7fe      	b.n	8005842 <MemManage_Handler+0x4>

08005844 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005844:	b480      	push	{r7}
 8005846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005848:	e7fe      	b.n	8005848 <BusFault_Handler+0x4>

0800584a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800584a:	b480      	push	{r7}
 800584c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800584e:	e7fe      	b.n	800584e <UsageFault_Handler+0x4>

08005850 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005854:	bf00      	nop
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800585e:	b480      	push	{r7}
 8005860:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005862:	bf00      	nop
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800586c:	b480      	push	{r7}
 800586e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005870:	bf00      	nop
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800587a:	b480      	push	{r7}
 800587c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800587e:	bf00      	nop
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800588c:	2001      	movs	r0, #1
 800588e:	f7fb fbc9 	bl	8001024 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005892:	bf00      	nop
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800589c:	4802      	ldr	r0, [pc, #8]	; (80058a8 <DMA1_Channel6_IRQHandler+0x10>)
 800589e:	f7fb f93f 	bl	8000b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80058a2:	bf00      	nop
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	2000005c 	.word	0x2000005c

080058ac <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80058b0:	4802      	ldr	r0, [pc, #8]	; (80058bc <DMA1_Channel7_IRQHandler+0x10>)
 80058b2:	f7fb f935 	bl	8000b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80058b6:	bf00      	nop
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	200000f0 	.word	0x200000f0

080058c0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80058c4:	4802      	ldr	r0, [pc, #8]	; (80058d0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80058c6:	f7fd fee7 	bl	8003698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80058ca:	bf00      	nop
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000214 	.word	0x20000214

080058d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80058d8:	4802      	ldr	r0, [pc, #8]	; (80058e4 <TIM2_IRQHandler+0x10>)
 80058da:	f7fd fedd 	bl	8003698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80058de:	bf00      	nop
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	2000015c 	.word	0x2000015c

080058e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80058ec:	4a17      	ldr	r2, [pc, #92]	; (800594c <SystemInit+0x64>)
 80058ee:	4b17      	ldr	r3, [pc, #92]	; (800594c <SystemInit+0x64>)
 80058f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80058fc:	4a14      	ldr	r2, [pc, #80]	; (8005950 <SystemInit+0x68>)
 80058fe:	4b14      	ldr	r3, [pc, #80]	; (8005950 <SystemInit+0x68>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f043 0301 	orr.w	r3, r3, #1
 8005906:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005908:	4b11      	ldr	r3, [pc, #68]	; (8005950 <SystemInit+0x68>)
 800590a:	2200      	movs	r2, #0
 800590c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800590e:	4a10      	ldr	r2, [pc, #64]	; (8005950 <SystemInit+0x68>)
 8005910:	4b0f      	ldr	r3, [pc, #60]	; (8005950 <SystemInit+0x68>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005918:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800591c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800591e:	4b0c      	ldr	r3, [pc, #48]	; (8005950 <SystemInit+0x68>)
 8005920:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005924:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005926:	4a0a      	ldr	r2, [pc, #40]	; (8005950 <SystemInit+0x68>)
 8005928:	4b09      	ldr	r3, [pc, #36]	; (8005950 <SystemInit+0x68>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005930:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005932:	4b07      	ldr	r3, [pc, #28]	; (8005950 <SystemInit+0x68>)
 8005934:	2200      	movs	r2, #0
 8005936:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005938:	4b04      	ldr	r3, [pc, #16]	; (800594c <SystemInit+0x64>)
 800593a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800593e:	609a      	str	r2, [r3, #8]
#endif
}
 8005940:	bf00      	nop
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	e000ed00 	.word	0xe000ed00
 8005950:	40021000 	.word	0x40021000

08005954 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800598c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005958:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800595a:	e003      	b.n	8005964 <LoopCopyDataInit>

0800595c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800595c:	4b0c      	ldr	r3, [pc, #48]	; (8005990 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800595e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005960:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005962:	3104      	adds	r1, #4

08005964 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005964:	480b      	ldr	r0, [pc, #44]	; (8005994 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005966:	4b0c      	ldr	r3, [pc, #48]	; (8005998 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005968:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800596a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800596c:	d3f6      	bcc.n	800595c <CopyDataInit>
	ldr	r2, =_sbss
 800596e:	4a0b      	ldr	r2, [pc, #44]	; (800599c <LoopForever+0x12>)
	b	LoopFillZerobss
 8005970:	e002      	b.n	8005978 <LoopFillZerobss>

08005972 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005972:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005974:	f842 3b04 	str.w	r3, [r2], #4

08005978 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005978:	4b09      	ldr	r3, [pc, #36]	; (80059a0 <LoopForever+0x16>)
	cmp	r2, r3
 800597a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800597c:	d3f9      	bcc.n	8005972 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800597e:	f7ff ffb3 	bl	80058e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005982:	f000 f811 	bl	80059a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005986:	f7ff fb25 	bl	8004fd4 <main>

0800598a <LoopForever>:

LoopForever:
    b LoopForever
 800598a:	e7fe      	b.n	800598a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800598c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8005990:	08005a70 	.word	0x08005a70
	ldr	r0, =_sdata
 8005994:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005998:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 800599c:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 80059a0:	20000254 	.word	0x20000254

080059a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80059a4:	e7fe      	b.n	80059a4 <ADC1_2_IRQHandler>
	...

080059a8 <__libc_init_array>:
 80059a8:	b570      	push	{r4, r5, r6, lr}
 80059aa:	4e0d      	ldr	r6, [pc, #52]	; (80059e0 <__libc_init_array+0x38>)
 80059ac:	4c0d      	ldr	r4, [pc, #52]	; (80059e4 <__libc_init_array+0x3c>)
 80059ae:	1ba4      	subs	r4, r4, r6
 80059b0:	10a4      	asrs	r4, r4, #2
 80059b2:	2500      	movs	r5, #0
 80059b4:	42a5      	cmp	r5, r4
 80059b6:	d109      	bne.n	80059cc <__libc_init_array+0x24>
 80059b8:	4e0b      	ldr	r6, [pc, #44]	; (80059e8 <__libc_init_array+0x40>)
 80059ba:	4c0c      	ldr	r4, [pc, #48]	; (80059ec <__libc_init_array+0x44>)
 80059bc:	f000 f820 	bl	8005a00 <_init>
 80059c0:	1ba4      	subs	r4, r4, r6
 80059c2:	10a4      	asrs	r4, r4, #2
 80059c4:	2500      	movs	r5, #0
 80059c6:	42a5      	cmp	r5, r4
 80059c8:	d105      	bne.n	80059d6 <__libc_init_array+0x2e>
 80059ca:	bd70      	pop	{r4, r5, r6, pc}
 80059cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059d0:	4798      	blx	r3
 80059d2:	3501      	adds	r5, #1
 80059d4:	e7ee      	b.n	80059b4 <__libc_init_array+0xc>
 80059d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059da:	4798      	blx	r3
 80059dc:	3501      	adds	r5, #1
 80059de:	e7f2      	b.n	80059c6 <__libc_init_array+0x1e>
 80059e0:	08005a68 	.word	0x08005a68
 80059e4:	08005a68 	.word	0x08005a68
 80059e8:	08005a68 	.word	0x08005a68
 80059ec:	08005a6c 	.word	0x08005a6c

080059f0 <memset>:
 80059f0:	4402      	add	r2, r0
 80059f2:	4603      	mov	r3, r0
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d100      	bne.n	80059fa <memset+0xa>
 80059f8:	4770      	bx	lr
 80059fa:	f803 1b01 	strb.w	r1, [r3], #1
 80059fe:	e7f9      	b.n	80059f4 <memset+0x4>

08005a00 <_init>:
 8005a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a02:	bf00      	nop
 8005a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a06:	bc08      	pop	{r3}
 8005a08:	469e      	mov	lr, r3
 8005a0a:	4770      	bx	lr

08005a0c <_fini>:
 8005a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0e:	bf00      	nop
 8005a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a12:	bc08      	pop	{r3}
 8005a14:	469e      	mov	lr, r3
 8005a16:	4770      	bx	lr
